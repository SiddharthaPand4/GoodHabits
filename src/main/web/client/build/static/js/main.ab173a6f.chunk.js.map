{"version":3,"sources":["services/axios.js","helpers/auth-header.js","helpers/config.js","helpers/history.js","services/UserService.js","components/Sidebar.js","components/Headbar.js","components/Footerbar.js","components/PrivateRoute.js","services/DashboardService.js","services/CommonService.js","views/HomeView.js","services/FeedService.js","views/FeedView.js","services/DeviceService.js","views/DeviceView.js","views/UserListView.js","views/DeviceConfigView.js","views/LoginView.js","services/TriggerService.js","components/TriggerSet.js","views/TriggerView.js","components/GenericFilter.js","services/AnprService.js","services/AnprReportService.js","views/anpr/AnprView.js","views/TrafficIncidentView.js","views/incidents/IncidentTimeline.js","views/incidents/IncidentRepeatedView.js","services/HotListVehicleService.js","components/HotListedVehicles/HotListedVehiclesList.js","views/IncidentHotlistView.js","views/anpr/IncidentTimeline.js","views/anpr/MasterDataView.js","services/ApmsService.js","views/parking/ParkingDashboardView.js","views/parking/ParkingConsoleView.js","services/ReportService.js","views/parking/ParkingReportView.js","views/parking/ParkingInOutView.js","views/PeopleCount/ApcGenericFilter.js","services/ApcFileService.js","views/PeopleCount/PeopleCounting.js","services/ApcDashboardService.js","views/PeopleCount/ApcDashboard.js","services/AtccService.js","views/atcc/AtccView.js","views/atcc/AtccSummaryView.js","services/VidsService.js","views/vids/HighwayIncidentView.js","views/vids/HighwayIncidentDashboardView.js","App.js","serviceWorker.js","index.js","components/event.js"],"names":["HttpService","ax","axios","create","baseURL","timeout","headers","interceptors","request","use","config","token","JSON","parse","localStorage","getItem","Authorization","response","undefined","err","url","includes","Promise","reject","status","console","log","clear","window","location","Instance","authHeader","history","createBrowserHistory","UserService","get","userId","user","requestBody","userName","lastName","firstName","email","id","roles","method","data","stringify","delete","username","password","post","setItem","removeItem","push","EventBus","publish","Sider","Layout","SubMenu","Menu","Sidebar","props","state","collapsed","loaded","menu","getMenu","then","setState","this","collapsible","breakpoint","collapsedWidth","className","src","theme","mode","defaultSelectedKeys","Item","key","to","type","items","map","item","index","title","submenu","subitem","link","onClick","logout","Component","Header","Headbar","style","background","padding","Footer","textAlign","PrivateRoute","component","rest","render","isLoggedIn","pathname","from","DashboardService","filter","fromDate","toDate","xAxis","fromDateString","moment","format","toDateString","getRandomColor","color","i","Math","floor","random","selectedCustomDateRangeEnum","selectedCustomDateRangeMoment","baseDate","from_date","to_date","startOf","endOf","subtract","CommonService","array","attr","value","length","RangePicker","DatePicker","HomeView","handleCancel","isOpencustomDateRangeModal","atcc","selectedCustomDateRange","selectedXAxisOption","chartData","labels","datasets","incident","getIncidentVehicleCount","bind","getAtccVehicleCount","getBarChartOptions","selectDateRange","selectXAxisOption","refresh","getDateRangeOptions","getXAxisOptions","handleDateRangeChange","graphName","graph","fromToDate","extractFromToDate","resposne","rawData","labelDates","rawDataByVehicleData","date","vehicleType","vehicleTypeIndex","dataSet","label","backgroundColor","getColor","vehicleCount","catch","error","helmetMissingIncidents","reverseDirectionIncidents","parseInt","sort","a","b","Moment","helmetMissingDataset","reverseDirectionDataset","dataValue","findIndex","showCustomDateRangeModal","chartName","yAxisScaleLabel","yAxisLabel","responsive","maintainAspectRatio","animation","duration","hover","animationDuration","responsiveAnimationDuration","legend","position","scales","xAxes","stacked","ticks","beginAtZero","scaleLabel","display","labelString","yAxes","atccChartOptions","incidentChartOptions","onCancel","visible","footer","onChange","changedDateRange","overlay","options","FeedService","feed","ID","Text","Typography","FeedView","loading","videoVisible","feeds","subscribe","event","removeFeed","getFeeds","startFeed","stopFeed","WrappedFeedForm","Form","name","FeedForm","gutter","span","site","cover","alt","bordered","actions","submitted","loginError","handleSubmit","e","preventDefault","validationError","form","getFieldValue","addFeed","fieldsError","getFieldDecorator","getFieldsError","onSubmit","rules","required","message","addonBefore","placeholder","htmlType","disabled","Object","keys","some","field","DeviceService","DeviceView","device","getDevice","width","extra","fingerprint","model","license","registeredTo","Column","Table","confirm","Modal","UserListView","showModal","users","showUserDetails","addUser","refreshUsers","close","getUsers","getRoles","getUser","okText","okType","cancelText","onOk","deleteUser","success","WrappedUserForm","UserForm","bodyStyle","dataSource","pagination","scroll","x","dataIndex","text","record","href","showUser","showDeleteConfirm","createUser","initialValue","role","size","TabPane","Tabs","DeviceConfigView","deviceconfig","getDeviceConfig","tab","defaultActiveKey","onTabChange","LoginView","WrappedLoginForm","LoginForm","login","reload","xl","lg","md","sm","xs","top","prefix","block","withRouter","TriggerService","trigger","put","TriggerSet","days","onChange0","onChange1","onChange2","onChange3","onChange4","onChange5","onChange6","onChangeValue","saveTrigger","deleteTrigger","setName","changed","idx","TriggerDays","Start","End","new","createTrigger","Day","target","selected","marks","day","start","end","dlist","min","max","range","Option","Select","TriggerView","triggers","tsRef","React","createRef","handleChange","newTrigger","getTriggers","selectedt","current","NewTrigger","ChangeTrigger","selectedname","Name","selector","ref","ButtonGroup","Button","Group","layout","page","pageSize","onFromDateChange","onFromTimeChange","onToDateChange","onToTimeChange","onPageChange","onPageSizeChange","handleRefresh","refreshNow","handleLayoutChange","handleFilterChange","time","fromTime","toTime","minuteStep","secondStep","icon","changeLayout","AnprService","lpr","AnprReportService","req","responseType","Paragraph","Panel","Collapse","AnprView","handleOnClick","events","workingEvent","workingEventLoading","magnifyEvent","magnifyEventId","zoomFactor","minZoomFactor","maxZoomFactor","downloading","onLprInputChange","editEvent","updateEvent","updateZoomFactor","downloadAnprReport","getEvents","archiveEvent","anprText","alert","getAnprEventsReport","saveAs","header","renderTable","renderGrid","anprresponse","totalPage","description","count","totalPages","mid","toFixed","preColor","nextColor","1","2","3","4","5","margin","direction","helmet","sectionSpeed","download","height","marginTop","strong","editable","copyable","speed","code","eventDate","onShowSizeChange","showSizeChanger","showQuickJumper","defaultCurrent","total","Total","TrafficIncidentView","getIncidents","IncidentTimeline","currentPage","pageSizes","incidentType","toggleVisible","refreshBriefIncidentsNow","onModalPageChange","onModalPageSizeChange","nextProps","getBriefIncidentsRepeated","showLessItems","antIcon","fontSize","spin","indicator","onClose","Search","Input","tabList","IncidentRepeatedView","timelineLpr","activeTab","helmetMissing","pages","briefIncident","reverseDirection","pagess","onHelmetMissingPageChange","onReverseDirectionPageChange","onHelmetMissingPageSizeChange","onReverseDirectionPageSizeChange","handleTabClick","refreshHelmetMissingIncidentsNow","refreshReverseDirectionIncidentsNow","search","toggleIncidentTimelineModal","tabIndex","activeTabIndex","defaultActiveTabIndex","getHelmetMissingIncidentsRepeated","getReverseDirectionIncidentsRepeated","hasError","searchText","allowClear","onSearch","enterButton","activeTabKey","renderReverseData","renderHelmetMissingData","repeatedTimes","HotListVehicleService","vehicle","HotListedVehiclesList","activeModal","hotListedVehicleResponse","workingVehicle","archived","vehiclesList","openHotListVehicleForm","handleSubmitWorkingHotListVehicle","handleCancelWorkingHotListVehicle","archiveHotListedVehicle","workingVehicleOnChange","getHotListedVehicles","checked","saveHotListedVehicle","vehicles","hoverable","IncidentHotlistView","getIncidentsHotlisted","renderIncidents","getIncidentTimeline","MasterDataView","archiveEventsLoading","archiveLpr","allData","onMasterDataPageChange","onMasterDataPageSizeChange","refreshIncidentsNow","archiveLprOnChange","getIncidentsList","archiveAllEvent","renderMasterData","ApmsService","vehicleNo","slot","lot","free","misaligned","fo_data","misAlignedData","entryexit_data","ParkingDashboardView","parkingEventData","stats","checkInEventsData","cb_data","getParkingSlotStats","getParkingVehicleCount","getCheckedInVehiclesCount","dates","dateString","checkInEvents","checkOutEvents","checkInDataset","borderColor","checkOutDataset","statsData","parkedSlots","freeSlots","parkedMisalignedSlots","dataset","carsParked","carSlots","cloneDeep","bikesParked","bikeSlots","checkedInCars","checkedInBikes","active","plugins","datalabels","anchor","align","offset","borderWidth","borderRadius","context","font","weight","formatter","circumference","PI","rotation","tooltips","callbacks","datasetIndex","ParkingImage","handleLoad","image","loadImage","oldProps","removeEventListener","Image","addEventListener","y","node","imageNode","ParkingConsoleView","slots","biketotal","cartotal","bikefull","carfull","img","baseimg","togglerRef","intervalID","setInterval","ptTimer","setOccupied","forEach","v","lastOccupiedSeconds","clearInterval","getSlots","queryString","edit","fancyTime","secs","params","k","points","p1x","p1y","p2x","p2y","p3x","p3y","p4x","p4y","stroke","closed","fill","pointerDirection","pointerWidth","pointerHeight","lineJoin","shadowColor","getText","fontFamily","numPoints","innerRadius","outerRadius","opacity","SlotToggler","slotmap","selectedSlot","ss","updateSlot","onAlignmentChange","onFreeChange","ReportService","reportType","filterType","downloadReport","handleChangeReportType","getParkingEventsReport","defaultValue","ParkingInOutView","checkIn","checkOut","vehicleLastParkingEvent","apmsresponse","copyVehicleNo","getEventsList","addCheckIn","addCheckOut","getEventsStatus","getEventStatus","timeDiff","getTimeDifference","utc","diff","obj","hasOwnProperty","call","disableCheckIn","disableCheckOut","isEmpty","fromNow","ApcFileService","PeopleCounting","onEventIdInputChange","getPeopleData","pageNumber","list","eventId","ApcDashboardService","ApcDashboard","apc","peakhour","peakHourEvents","getApcPeopleCount","getApcPeakHour","refreshPeakHour","refreshApcChart","labelDuration","percentageOfPeopleCount","peopleCountPercentage","durationIndex","hoverBackgroundColor","j","peopleCount","apcChartOptions","AtccService","interval","AtccView","video","getRawData","sorted","filtered","handleRetrievedData","getAtccData","columns","accessor","Cell","cursor","showVideo","original","vid","downloadVideo","refRawDataTable","defaultPageSize","showPagination","showPaginationTop","showPaginationBottom","pageSizeOptions","manual","onFetchData","instance","res","ceil","totalElements","parseFloat","downloadCsv","startTime","seek","autoPlay","playsInline","poster","timeStamp","vts","fetch","blob","URL","createObjectURL","Blob","document","createElement","setAttribute","tag","body","appendChild","click","parentNode","removeChild","AtccSummaryView","chartdata","makeChartData","getSummaryData","changeInterval","refReactTable","fireFetchData","getAtccSummaryData","timeSeries","Set","add","Array","chartComponent","gridLines","colorschemes","scheme","VidsService","HighwayIncidentView","incidents","playVideo","archiveIncident","incidentDate","HighwayIncidentDashboardView","Content","App","loggedIn","refreshMenu","sideBar","minHeight","path","exact","PgsReportView","Boolean","hostname","match","Root","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","callback"],"mappings":"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","file":"static/js/main.ab173a6f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nfunction forceLogout() {\r\n    localStorage.clear();\r\n    window.location = '/login';\r\n}\r\n\r\nclass HttpService {\r\n\r\n    static Instance() {\r\n\r\n        let ax = new axios.create({\r\n            baseURL: \"/\",\r\n            timeout: 5000,\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        ax.interceptors.request.use(config => {\r\n            let token = JSON.parse(localStorage.getItem('syntoken'));\r\n            if (token) {\r\n                config.headers.Authorization = \"Bearer \" + token.token\r\n            }\r\n            return config\r\n        });\r\n\r\n        axios.interceptors.response.use(undefined, err => {\r\n            if (err.response.config.url.includes('/login'))\r\n                return Promise.reject(err);\r\n\r\n            if (err.response.status === 403) {\r\n                console.log('I am at 403');\r\n                return forceLogout();\r\n            }\r\n            if (err.response.status !== 401) {\r\n                console.log('I am at 401');\r\n                return Promise.reject(err);\r\n            }\r\n        });\r\n\r\n        return ax;\r\n    }\r\n\r\n}\r\n//https://gist.github.com/alfonmga/96474f6adb6ed8dee8bc8bf8627c0ae1\r\nexport default HttpService.Instance()","export function authHeader() {\r\n    // return authorization header with jwt token\r\n    let token = JSON.parse(localStorage.getItem('syntoken'));\r\n\r\n    if (token) {\r\n        return {\r\n            'Authorization': 'Bearer ' + token,\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        };\r\n    } else {\r\n        return {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        };\r\n    }\r\n}","export const config = {\r\n    apiUrl: '/'\r\n};","import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();","import axios from \"./axios\";\r\nimport { authHeader } from '../helpers/auth-header';\r\nimport { config } from '../helpers/config'\r\nimport {history} from \"../helpers/history\";\r\nimport {EventBus} from \"../components/event\";\r\n\r\nclass UserService {\r\n\r\n    static Instance() {\r\n        return new UserService()\r\n    }\r\n\r\n    getMenu() {\r\n        return axios.get('/api/user/menu');\r\n    }\r\n\r\n    getUser(userId) {\r\n        return axios.get('/api/user/' + userId);\r\n    }\r\n\r\n    getUsers() {\r\n        return axios.get('/api/user/');\r\n    }\r\n\r\n    getRoles(){\r\n        return axios.get('/api/user/roles');\r\n    }\r\n\r\n     createUser(user){\r\n        const requestBody = {\r\n             userName:user.userName,\r\n             lastName:user.lastName,\r\n             firstName:user.firstName,\r\n             email:user.email,\r\n             id:user.id,\r\n             roles:user.roles,\r\n        };\r\n\r\n        const request = {\r\n            method: 'POST',\r\n            headers: authHeader(),\r\n            data: JSON.stringify(requestBody),\r\n            url: config.apiUrl + 'api/user/'\r\n        };\r\n        if(user.id){\r\n            request.method='PUT';\r\n        }\r\n        return axios(request);\r\n    }\r\n\r\n    deleteUser(userId){\r\n        return axios.delete('/api/user/' + userId);\r\n    }\r\n\r\n    isLoggedIn() {\r\n        let token = JSON.parse(localStorage.getItem('syntoken'));\r\n        if (!token) {\r\n            console.log(\"cannot locate token, returning false\");\r\n            return false;\r\n        }\r\n        console.log(\"located token, returning true\");\r\n        return true\r\n    }\r\n\r\n    async login(username, password) {\r\n        let response = await axios.post('/login', JSON.stringify({ username, password }), {headers: {\r\n                'Content-Type': 'application/json',\r\n            }});\r\n        console.log(\"got this response\", response);\r\n        let token = response.data;\r\n        if (token) {\r\n            localStorage.setItem('syntoken', JSON.stringify(token));\r\n        }\r\n        return token;\r\n    }\r\n\r\n    logout() {\r\n        localStorage.removeItem(\"syntoken\");\r\n        history.push( \"/#/login\");\r\n        EventBus.publish('login-logout', {})\r\n\r\n    }\r\n}\r\n\r\nexport default UserService.Instance()\r\n\r\n//TODO valiate token,\r\n// https://medium.com/@siddharthac6/json-web-token-jwt-the-right-way-of-implementing-with-node-js-65b8915d550e","import React, {Component} from 'react';\r\nimport {Icon, Layout, Menu} from \"antd\";\r\nimport {Link} from \"react-router-dom\";\r\nimport UserService from \"../services/UserService\";\r\n\r\nconst {Sider} = Layout;\r\nconst {SubMenu} = Menu;\r\n\r\nexport default class Sidebar extends Component {\r\n    state = {\r\n        collapsed: false,\r\n        loaded: false,\r\n        menu: {}\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        UserService.getMenu().then(response => {\r\n            this.setState({menu: response.data, loaded: true});\r\n        });\r\n    }\r\n\r\n    toggleCollapsed() {\r\n        this.setState({\r\n            collapsed: !this.state.collapsed,\r\n        });\r\n    };\r\n\r\n    render() {\r\n\r\n        let menu = this.state.menu;\r\n\r\n        return (\r\n            <Sider\r\n                collapsible\r\n                breakpoint=\"lg\"\r\n                collapsedWidth=\"0\"\r\n            >\r\n                <div className=\"logo\">\r\n                    <img src={\"synlabs-logo.png\"}/>\r\n                </div>\r\n                <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['0']}>\r\n                    <Menu.Item key=\"0\">\r\n                        <Link to='/'><Icon type='home'/><span className='nav-text'>Home</span></Link>\r\n                    </Menu.Item>\r\n\r\n                    {(menu.items || []).map((item, index) =>\r\n\r\n                        <SubMenu key={item.key} title={\r\n                            <span><Icon type='box-plot'/><span>{item.title}</span></span>\r\n                        }\r\n                        >\r\n                            {(item.submenu || []).map((subitem, index) =>\r\n                                <Menu.Item key={subitem.key} className=\"sidebar-nav-link\">\r\n                                <Link to={subitem.link}><span className='nav-text'>{subitem.title}</span></Link>\r\n                                </Menu.Item>\r\n                            )}\r\n                        </SubMenu>\r\n                    )}\r\n\r\n                    <SubMenu key=\"sub1\" title={\r\n                        <span>\r\n                          <Icon type='box-plot'/>\r\n                          <span>ANPR</span>\r\n                        </span>\r\n                    }\r\n                    >\r\n                        <Menu.Item key=\"1\" className=\"sidebar-nav-link\">\r\n                            <Link to='/anpr'><span className='nav-text'>Events</span></Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"2\" className=\"sidebar-nav-link\">\r\n                            <Link to='/anpr/masterdata'><span className='nav-text'>Repeated Events</span></Link>\r\n                        </Menu.Item>\r\n                    </SubMenu>\r\n                    <SubMenu key=\"sub2\" title={\r\n                        <span>\r\n                           <Icon type='box-plot'/>\r\n                           <span>Offences</span>\r\n                         </span>\r\n                    }\r\n                    >\r\n                        <Menu.Item key=\"3\" className=\"sidebar-nav-link\">\r\n                            <Link to='/incidents'><span className='nav-text'>Events</span></Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"4\" className=\"sidebar-nav-link\">\r\n                            <Link to='/incidents/repeated'><span className='nav-text'>Repeated Events</span></Link>\r\n                        </Menu.Item>\r\n                    </SubMenu>\r\n\r\n                    <Menu.Item key=\"5\" className=\"sidebar-nav-link\">\r\n                        <Link to=\"/incidents/hotlisted\"><Icon type='alert'/><span\r\n                            className='nav-text'>Hotlist</span></Link>\r\n                    </Menu.Item>\r\n\r\n                    <SubMenu key=\"pgs\" title={\r\n                        <span>\r\n                           <Icon type='car'/>\r\n                           <span>Parking</span>\r\n                         </span>\r\n                    }>\r\n                        <Menu.Item key=\"pgs-1\" className=\"sidebar-nav-link\">\r\n                            <Link to='/pgs/dashboard'><span className='nav-text'>Dashboard</span></Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"pgs-2\" className=\"sidebar-nav-link\">\r\n                            <Link to='/pgs/console'><span className='nav-text'>Operator Console</span></Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"pgs-3\" className=\"sidebar-nav-link\">\r\n                            <Link to='/pgs/inout'><span className='nav-text'>Check-In/Out</span></Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"pgs-4\" className=\"sidebar-nav-link\">\r\n                            <Link to='/pgs/reports'><span className='nav-text'>Reports</span></Link>\r\n                        </Menu.Item>\r\n                    </SubMenu>\r\n\r\n                    <Menu.Item key=\"6\">\r\n                        <Link to='/feed'><Icon type='video-camera'/><span className='nav-text'>Feed</span></Link>\r\n                    </Menu.Item>\r\n                    <SubMenu key=\"admin\" title={<span><Icon type=\"deployment-unit\"/>Admin</span>}>\r\n                        <Menu.Item key=\"51\">\r\n                            <Link to='/user'><Icon type='user'/><span className='nav-text'>Users</span></Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"52\">\r\n                            <Link to='/device'><Icon type='laptop'/><span className='nav-text'>Device</span></Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"53\">\r\n                            <Link to='/trigger'><Icon type=\"clock-circle\"/><span\r\n                                className='nav-text'>Triggers</span></Link>\r\n                        </Menu.Item>\r\n                    </SubMenu>\r\n\r\n\r\n                    {/*<SubMenu\r\n                        key=\"sub3\"\r\n                        title={\r\n                            <span>\r\n                         <Icon type='box-plot'/>\r\n                         <span>People Counting</span>\r\n                       </span>\r\n                        }\r\n                    >\r\n                        <Menu.Item key=\"7\" className=\"sidebar-nav-link\">\r\n                            <Link to='/people-counting/events'><span className='nav-text'>Events</span></Link>\r\n                        </Menu.Item>\r\n                    </SubMenu>*/}\r\n\r\n                    <SubMenu\r\n                        key=\"sub3\"\r\n                        title={\r\n                            <span>\r\n                                             <Icon type='box-plot'/>\r\n                                             <span>People Counting</span>\r\n                                           </span>\r\n                        }\r\n                    >\r\n                        <Menu.Item key=\"9\" className=\"sidebar-nav-link\">\r\n                            <Link to='/people-counting/events'><span className='nav-text'>Events</span></Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"8\" className=\"sidebar-nav-link\"> <Link to='/people-counting/dashboard'><span\r\n                            className='nav-text'>Dashboard</span></Link>\r\n                        </Menu.Item>\r\n                    </SubMenu>\r\n\r\n                    <Menu.Item key=\"7\">\r\n                        <Link to='/' onClick={() => UserService.logout()}><Icon type='logout'/><span\r\n                            className='nav-text'>Logout</span></Link>\r\n                    </Menu.Item>\r\n                </Menu>\r\n            </Sider>\r\n        );\r\n    }\r\n}","\r\nimport React, {Component} from 'react';\r\nimport {Layout} from \"antd\";\r\nconst {Header} = Layout;\r\n\r\nexport default class Headbar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Header style={{ background: '#fff', padding: 10 }} >&nbsp;</Header>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {Layout} from \"antd\";\r\n\r\nconst {Footer} = Layout;\r\n\r\nexport default class Headbar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Footer style={{textAlign: 'center'}}>\r\n                Powered by SynergyLabs © 2019</Footer>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport UserService from \"../services/UserService\";\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={props => (\r\n        UserService.isLoggedIn()\r\n            ? <Component {...props} />\r\n            : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\r\n    )} />\r\n);\r\n\r\nexport default PrivateRoute","import axios from \"./axios\";\r\nimport moment from 'moment';\r\n\r\nclass DashboardService {\r\n\r\n    static Instance() {\r\n        return new DashboardService()\r\n    }\r\n\r\n    getTotalNoOfVehiclesBetweenTwoDates(filter) {\r\n        return axios.post('/api/dashboard/vehiclescount/datefilter', filter);\r\n    }\r\n\r\n    getTotalNoOfVehiclesBySelectedDate(filter) {\r\n        return axios.post('/api/dashboard/vehiclescount/date', filter);\r\n    }\r\n\r\n    getTotalNoOfVehiclesForLastMonths(filter) {\r\n        return axios.post('/api/dashboard/vehiclescount/month', filter);\r\n    }\r\n\r\n    getAtccVehicleCount(fromDate, toDate, xAxis) {\r\n        let filter = {\r\n            fromDateString: moment(fromDate).format('YYYY-MM-DD HH:mm:ss'),\r\n            toDateString: moment(toDate).format('YYYY-MM-DD HH:mm:ss\"'),\r\n            xAxis: xAxis\r\n        };\r\n        return axios.post('/api/dashboard/atcc/vehicle/count', filter);\r\n    }\r\n\r\n    getIncidentVehicleCount(fromDate, toDate, xAxis) {\r\n        let filter = {\r\n            fromDateString: moment(fromDate).format('YYYY-MM-DD HH:mm:ss'),\r\n            toDateString: moment(toDate).format('YYYY-MM-DD HH:mm:ss'),\r\n            xAxis: xAxis\r\n        };\r\n        return axios.post('/api/dashboard/incident/vehicle/count', filter);\r\n    }\r\n\r\n    getParkingVehicleCount(fromDate, toDate, xAxis) {\r\n        let filter = {\r\n            fromDateString: moment(fromDate).format('YYYY-MM-DD HH:mm:ss'),\r\n            toDateString: moment(toDate).format('YYYY-MM-DD HH:mm:ss'),\r\n            xAxis: xAxis\r\n        };\r\n        return axios.post('/api/apms/guidance/parking/vehicle/count', filter);\r\n    }\r\n\r\n    getColor(index) {\r\n        let color = \"\";\r\n        let colors = [\r\n            '#e83e8c',\r\n            '#dc3545',\r\n            '#007bff',\r\n            '#6610f2',\r\n            '#fd7e14',\r\n            '#ffc107',\r\n            '#28a745',\r\n            '#20c997',\r\n            '#17a2b8',\r\n            '#6c757d',\r\n            '#343a40',\r\n            '#6f42c1'];\r\n\r\n        color = colors[index];\r\n        if (color) {\r\n            return color;\r\n        }\r\n        return this.getRandomColor();\r\n\r\n    }\r\n\r\n\r\n    getRandomColor() {\r\n        let letters = '0123456789ABCDEF';\r\n        let color = '#';\r\n        for (let i = 0; i < 6; i++) {\r\n            color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    }\r\n\r\n\r\n    extractFromToDate(selectedCustomDateRangeEnum, selectedCustomDateRangeMoment) {\r\n\r\n        let baseDate;\r\n        let from_date;\r\n        let to_date;\r\n        switch (selectedCustomDateRangeEnum) {\r\n            case  \"Today\":\r\n                baseDate = moment();\r\n                from_date = baseDate.startOf('day').toDate();\r\n                to_date = baseDate.endOf('day').toDate();\r\n                break;\r\n            case  \"Yesterday\":\r\n                baseDate = moment().subtract(1, 'days');\r\n                from_date = baseDate.startOf('day').toDate();\r\n                to_date = baseDate.endOf('day').toDate();\r\n                break;\r\n            case  \"This week\":\r\n                baseDate = moment();\r\n                from_date = baseDate.startOf('week').toDate();\r\n                to_date = baseDate.endOf('week').toDate();\r\n                break;\r\n            case  \"This month\":\r\n                baseDate = moment();\r\n                from_date = baseDate.startOf('month').toDate();\r\n                to_date = baseDate.endOf('month').toDate();\r\n                break;\r\n            case  \"This quarter\":\r\n                baseDate = moment();\r\n                from_date = baseDate.startOf('quarter').toDate();\r\n                to_date = baseDate.endOf('quarter').toDate();\r\n                break;\r\n            case  \"This year\":\r\n                baseDate = moment();\r\n                from_date = baseDate.startOf('year').toDate();\r\n                to_date = baseDate.endOf('year').toDate();\r\n                break;\r\n            case  \"Last week\":\r\n                baseDate = moment().subtract(1, 'weeks');\r\n                from_date = baseDate.startOf('week').toDate();\r\n                to_date = baseDate.endOf('week').toDate();\r\n                break;\r\n            case  \"Last month\":\r\n                baseDate = moment().subtract(1, 'months');\r\n                from_date = baseDate.startOf('month').toDate();\r\n                to_date = baseDate.endOf('month').toDate();\r\n                break;\r\n            case  \"Last quarter\":\r\n                baseDate = moment().subtract(1, 'quarters');\r\n                from_date = baseDate.startOf('quarter').toDate();\r\n                to_date = baseDate.endOf('quarter').toDate();\r\n                break;\r\n            case  \"Last year\":\r\n                baseDate = moment().subtract(1, 'years');\r\n                from_date = baseDate.startOf('year').toDate();\r\n                to_date = baseDate.endOf('year').toDate();\r\n                break;\r\n            case  \"Second Last week\":\r\n                baseDate = moment().subtract(2, 'weeks');\r\n                from_date = baseDate.startOf('week').toDate();\r\n                to_date = baseDate.endOf('week').toDate();\r\n                break;\r\n            case  \"Second Last month\":\r\n                baseDate = moment().subtract(2, 'months');\r\n                from_date = baseDate.startOf('month').toDate();\r\n                to_date = baseDate.endOf('month').toDate();\r\n                break;\r\n            case  \"Second Last quarter\":\r\n                baseDate = moment().subtract(2, 'quarters');\r\n                from_date = baseDate.startOf('quarter').toDate();\r\n                to_date = baseDate.endOf('quarter').toDate();\r\n                break;\r\n            case  \"Second Last year\":\r\n                baseDate = moment().subtract(2, 'years');\r\n                from_date = baseDate.startOf('year').toDate();\r\n                to_date = baseDate.endOf('year').toDate();\r\n                break;\r\n            case \"Custom\":\r\n            default:\r\n                from_date = selectedCustomDateRangeMoment[0].toDate();\r\n                to_date = selectedCustomDateRangeMoment[1].toDate();\r\n                break;\r\n        }\r\n\r\n        return {\r\n            from_date: from_date,\r\n            to_date: to_date\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default DashboardService.Instance()","\r\n\r\nclass CommonService {\r\n\r\n    static Instance() {\r\n        return new CommonService()\r\n    }\r\n\r\n    ifExist(array, attr, value) {\r\n        for (let i = 0; i < array.length; i += 1) {\r\n            if (array[i][attr] === value) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    findIndex(array, attr, value) {\r\n        if (!array) {\r\n            return -1;\r\n        }\r\n        for (let i = 0; i < array.length; i += 1) {\r\n            if (array[i][attr] === value) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n\r\nexport default CommonService.Instance()","import React, {Component} from \"react\";\r\nimport {Button, Card, DatePicker, Dropdown, Icon, Menu, Modal} from \"antd\";\r\nimport DashboardService from \"../services/DashboardService\";\r\nimport CommonService from \"../services/CommonService\";\r\nimport Moment from 'moment';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nconst {RangePicker} = DatePicker;\r\n\r\nexport default class HomeView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isOpencustomDateRangeModal: \"\",\r\n            atcc: {\r\n                filter: {\r\n                    selectedCustomDateRange: \"Today\",\r\n                    selectedXAxisOption: \"Hourly\",\r\n                    fromDate: {},\r\n                    toDate: {}\r\n                },\r\n                chartData: {\r\n                    labels: [],\r\n                    datasets: []\r\n                }\r\n            }, incident: {\r\n                filter: {\r\n                    selectedCustomDateRange: \"Today\",\r\n                    selectedXAxisOption: \"Hourly\",\r\n                    fromDate: {},\r\n                    toDate: {}\r\n                },\r\n                chartData: {\r\n                    labels: [],\r\n                    datasets: []\r\n                }\r\n            },\r\n        };\r\n\r\n        this.getIncidentVehicleCount = this.getIncidentVehicleCount.bind(this);\r\n        this.getAtccVehicleCount = this.getAtccVehicleCount.bind(this);\r\n        this.getBarChartOptions = this.getBarChartOptions.bind(this);\r\n        this.selectDateRange = this.selectDateRange.bind(this);\r\n        this.selectXAxisOption = this.selectXAxisOption.bind(this);\r\n        this.refresh = this.refresh.bind(this);\r\n        this.getDateRangeOptions = this.getDateRangeOptions.bind(this);\r\n        this.getXAxisOptions = this.getXAxisOptions.bind(this);\r\n        this.handleDateRangeChange = this.handleDateRangeChange.bind(this);\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    showCustomDateRangeModal(graphName) {\r\n        this.setState({\r\n            isOpencustomDateRangeModal: graphName,\r\n        });\r\n    };\r\n\r\n    handleCancel = () => {\r\n        this.setState({\r\n            isOpencustomDateRangeModal: \"\",\r\n        });\r\n    };\r\n\r\n    selectDateRange(graphName, selectedCustomDateRangeEnum, selectedCustomDateRangeMoment) {\r\n        let {isOpencustomDateRangeModal} = this.state;\r\n        let graph = this.state[graphName];\r\n        graph.filter.selectedCustomDateRange = selectedCustomDateRangeEnum;\r\n        let fromToDate = DashboardService.extractFromToDate(graph.filter.selectedCustomDateRange, selectedCustomDateRangeMoment);\r\n        graph.filter.fromDate = fromToDate.from_date;\r\n        graph.filter.toDate = fromToDate.to_date;\r\n\r\n\r\n        if (selectedCustomDateRangeEnum === \"Custom\") {\r\n            isOpencustomDateRangeModal = \"\"\r\n        }\r\n        this.setState({[graphName]: graph, isOpencustomDateRangeModal}, () => {\r\n            this.refresh();\r\n        });\r\n\r\n    }\r\n\r\n    selectXAxisOption(graphName, selectedXAxisOption) {\r\n        let graph = this.state[graphName];\r\n        graph.filter.selectedXAxisOption = selectedXAxisOption;\r\n        this.setState({[graphName]: graph}, () => {\r\n            this.refresh();\r\n        });\r\n    }\r\n\r\n    refresh() {\r\n\r\n        this.getAtccVehicleCount(this.state.atcc.filter.fromDate, this.state.atcc.filter.toDate, this.state.atcc.filter.selectedXAxisOption);\r\n\r\n        this.getIncidentVehicleCount(this.state.incident.filter.fromDate, this.state.incident.filter.toDate, this.state.incident.filter.selectedXAxisOption);\r\n    }\r\n\r\n\r\n    getAtccVehicleCount(from_date, to_date, xAxis) {\r\n        let {atcc} = this.state;\r\n        atcc.chartData = {\r\n            labels: [],\r\n            datasets: []\r\n        };\r\n        DashboardService.getAtccVehicleCount(from_date, to_date, xAxis).then(resposne => {\r\n\r\n            let rawData = resposne.data;\r\n            if (rawData && rawData.length > 0) {\r\n                //let labelDates = DashboardService.enumerateDaysBetweenDates(from_date, to_date);\r\n                let labelDates = [];\r\n\r\n                let rawDataByVehicleData = [];\r\n                for (let i in rawData) {\r\n\r\n                    if (!labelDates.includes(rawData[i].date)) {\r\n                        labelDates.push(rawData[i].date)\r\n                    }\r\n\r\n                    if (!rawDataByVehicleData[rawData[i].vehicleType]) {\r\n                        rawDataByVehicleData[rawData[i].vehicleType] = {};\r\n                    }\r\n                    if (!rawDataByVehicleData[rawData[i].vehicleType][rawData[i].date]) {\r\n                        rawDataByVehicleData[rawData[i].vehicleType][rawData[i].date] = rawData[i];\r\n                    }\r\n                }\r\n                atcc.chartData.labels = labelDates;\r\n                let vehicleTypeIndex = 0;\r\n                for (let vehicleType in rawDataByVehicleData) {\r\n\r\n                    let color = DashboardService.getColor(vehicleTypeIndex);\r\n                    let dataSet = {\r\n                        label: vehicleType,\r\n                        data: [],\r\n                        backgroundColor: color\r\n                    };\r\n\r\n                    for (let i in labelDates) {\r\n                        if (rawDataByVehicleData[vehicleType][labelDates[i]]) {\r\n                            dataSet.data.push(rawDataByVehicleData[vehicleType][labelDates[i]].vehicleCount);\r\n                        } else {\r\n                            dataSet.data.push(0);\r\n                        }\r\n                    }\r\n                    atcc.chartData.datasets.push(dataSet);\r\n                    vehicleTypeIndex++;\r\n                }\r\n            }\r\n            this.setState({atcc});\r\n        }).catch(error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n\r\n    getIncidentVehicleCount(from_date, to_date, xAxis) {\r\n        let {incident} = this.state;\r\n        incident.chartData = {\r\n            labels: [],\r\n            datasets: []\r\n        };\r\n        DashboardService.getIncidentVehicleCount(from_date, to_date, xAxis).then(resposne => {\r\n\r\n            let helmetMissingIncidents = resposne.data.helmetMissingIncidents;\r\n            let reverseDirectionIncidents = resposne.data.reverseDirectionIncidents;\r\n\r\n            //Get all unique labels(timestamps) from both type of incidents\r\n            let labels = [];\r\n            for (let i in reverseDirectionIncidents) {\r\n                if (xAxis === \"Hourly\") {\r\n                    reverseDirectionIncidents[i].date = parseInt(reverseDirectionIncidents[i].date);\r\n                }\r\n                if (!labels.includes(reverseDirectionIncidents[i].date)) {\r\n                    labels.push(reverseDirectionIncidents[i].date);\r\n                }\r\n            }\r\n\r\n            for (let i in helmetMissingIncidents) {\r\n                if (xAxis === \"Hourly\") {\r\n                    helmetMissingIncidents[i].date = parseInt(helmetMissingIncidents[i].date);\r\n                }\r\n                if (!labels.includes(helmetMissingIncidents[i].date)) {\r\n                    labels.push(helmetMissingIncidents[i].date);\r\n                }\r\n            }\r\n\r\n            // sort the labels, as it is a timeseries\r\n            if (xAxis === \"Hourly\") {\r\n                labels.sort((a, b) => a - b);\r\n            }\r\n            if (xAxis === \"Daily\") {\r\n                labels.sort((a, b) => new Moment(a).format('YYYY-MM-DD') - new Moment(b).format('YYYY-MM-DD'))\r\n            }\r\n\r\n            //prepare dataset\r\n            let helmetMissingDataset = {\r\n                label: \"Without Helmet\",\r\n                data: [],\r\n                backgroundColor: DashboardService.getColor(0)\r\n            };\r\n            let reverseDirectionDataset = {\r\n                label: \"Reverse Direction\",\r\n                data: [],\r\n                backgroundColor: DashboardService.getColor(2)\r\n            };\r\n\r\n            //fill the value of dataset for each label\r\n            let dataValue = 0;\r\n            let index = -1;\r\n            for (let i in labels) {\r\n                dataValue = 0;\r\n                index = CommonService.findIndex(helmetMissingIncidents, 'date', labels[i]);\r\n                if (index > -1) {\r\n                    dataValue = helmetMissingIncidents[index].vehicleCount;\r\n                }\r\n                helmetMissingDataset.data.push(dataValue);\r\n\r\n                dataValue = 0;\r\n                index = CommonService.findIndex(reverseDirectionIncidents, 'date', labels[i]);\r\n                if (index > -1) {\r\n                    dataValue = reverseDirectionIncidents[index].vehicleCount;\r\n                }\r\n                reverseDirectionDataset.data.push(dataValue);\r\n            }\r\n\r\n            //finalize it with setState\r\n            incident.chartData.labels = labels;\r\n            incident.chartData.datasets.push(helmetMissingDataset);\r\n            incident.chartData.datasets.push(reverseDirectionDataset);\r\n            this.setState({incident});\r\n        }).catch(error => {\r\n            this.setState({incident});\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    handleDateRangeChange() {\r\n        this.setState(() => {\r\n            this.refresh();\r\n        });\r\n    }\r\n\r\n    getXAxisOptions(graphName) {\r\n        return (<Menu>\r\n\r\n            <Menu.Item key=\"1\"\r\n                       onClick={() => this.selectXAxisOption(graphName, \"Hourly\")}>\r\n                Hourly\r\n            </Menu.Item>\r\n            <Menu.Item key=\"5\"\r\n                       onClick={() => this.selectXAxisOption(graphName, \"Daily\")}>\r\n                Daily\r\n            </Menu.Item>\r\n        </Menu>)\r\n    }\r\n\r\n    getDateRangeOptions(graphName) {\r\n        return (\r\n            <Menu>\r\n                <Menu.Item key=\"1\" onClick={() => this.selectDateRange(graphName, \"Today\")}>\r\n                    Today\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" onClick={() => this.selectDateRange(graphName, \"Yesterday\")}>\r\n                    Yesterday\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" onClick={() => this.selectDateRange(graphName, \"This week\")}>\r\n                    This week\r\n                </Menu.Item>\r\n                <Menu.Item key=\"4\" onClick={() => this.selectDateRange(graphName, \"Last week\")}>\r\n                    Last week\r\n                </Menu.Item>\r\n                <Menu.Item key=\"5\" onClick={() => this.selectDateRange(graphName, \"This month\")}>\r\n                    This month\r\n                </Menu.Item>\r\n                <Menu.Item key=\"6\" onClick={() => this.selectDateRange(graphName, \"This year\")}>\r\n                    This year\r\n                </Menu.Item>\r\n                <Menu.Item key=\"7\" onClick={() => this.selectDateRange(graphName, \"Last year\")}>\r\n                    Last year\r\n                </Menu.Item>\r\n                <Menu.Item onClick={() => this.showCustomDateRangeModal(graphName)}>\r\n                    Custom\r\n                </Menu.Item>\r\n\r\n            </Menu>\r\n        );\r\n    }\r\n\r\n    getBarChartOptions(chartName) {\r\n        let yAxisScaleLabel = \"Day\";\r\n        if (this.state[chartName].filter.selectedXAxisOption === \"Hourly\") {\r\n            yAxisScaleLabel = \"Hours(24-hour)\"\r\n        }\r\n        let yAxisLabel = \"Vehicles\";\r\n        if (chartName === \"incident\") {\r\n            yAxisLabel = \"Challans\"\r\n        }\r\n\r\n        let options = {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            animation: {\r\n                duration: 0\r\n            },\r\n            hover: {\r\n                animationDuration: 0\r\n            },\r\n            responsiveAnimationDuration: 0,\r\n            legend: {\r\n                position: 'right'\r\n            },\r\n            scales: {\r\n                xAxes: [{\r\n                    stacked: true,\r\n                    ticks: {\r\n                        beginAtZero: true\r\n                    }, scaleLabel: {\r\n                        display: true,\r\n                        labelString: yAxisScaleLabel\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                    stacked: true,\r\n                    ticks: {\r\n                        beginAtZero: true\r\n                    }, scaleLabel: {\r\n                        display: true,\r\n                        labelString: yAxisLabel\r\n                    }\r\n                }]\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        let {atcc, incident} = this.state;\r\n        const atccChartOptions = this.getBarChartOptions(\"atcc\");\r\n        const incidentChartOptions = this.getBarChartOptions(\"incident\");\r\n        return (\r\n            <div>\r\n                <div>\r\n\r\n                    <Modal\r\n                        onCancel={this.handleCancel}\r\n                        title=\"Custom Date Range\"\r\n                        visible={!!this.state.isOpencustomDateRangeModal}\r\n                        footer={[]}\r\n\r\n                    >\r\n                        <RangePicker\r\n                            onChange={(changedDateRange) => this.selectDateRange(this.state.isOpencustomDateRangeModal, \"Custom\", changedDateRange)}/>\r\n                    </Modal>\r\n                </div>\r\n                <div>\r\n                    <Card title={<div>ATCC\r\n                        &nbsp;\r\n                        <Dropdown overlay={() => this.getDateRangeOptions(\"atcc\")}>\r\n                            <Button>\r\n                                {atcc.filter.selectedCustomDateRange ? atcc.filter.selectedCustomDateRange : \"Select\"}\r\n                                <Icon\r\n                                    type=\"down\"/>\r\n                            </Button>\r\n                        </Dropdown>\r\n                        &nbsp;<Dropdown overlay={() => this.getXAxisOptions(\"atcc\")}>\r\n                            <Button>\r\n                                {atcc.filter.selectedXAxisOption ? atcc.filter.selectedXAxisOption : \"Select\"} <Icon\r\n                                type=\"down\"/>\r\n                            </Button>\r\n                        </Dropdown>\r\n                    </div>}>\r\n                        <Line data={atcc.chartData} options={atccChartOptions}/>\r\n\r\n                    </Card>\r\n                    <br/>\r\n                    <Card title={<div>Incidents\r\n                        &nbsp;\r\n                        <Dropdown overlay={() => this.getDateRangeOptions(\"incident\")}>\r\n                            <Button>\r\n                                {incident.filter.selectedCustomDateRange ? incident.filter.selectedCustomDateRange : \"Select\"}\r\n                                <Icon\r\n                                    type=\"down\"/>\r\n                            </Button>\r\n                        </Dropdown>\r\n                        &nbsp;<Dropdown overlay={() => this.getXAxisOptions(\"incident\")}>\r\n                            <Button>\r\n                                {incident.filter.selectedXAxisOption ? incident.filter.selectedXAxisOption : \"Select\"}\r\n                                <Icon\r\n                                    type=\"down\"/>\r\n                            </Button>\r\n                        </Dropdown>\r\n                    </div>}>\r\n                        <Line data={incident.chartData} options={incidentChartOptions}/>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import axios from './axios';\r\n\r\nclass FeedService {\r\n\r\n    static Instance() {\r\n        return new FeedService()\r\n    }\r\n\r\n    getFeeds() {\r\n        return axios.get('/api/feeds');\r\n    }\r\n\r\n    getFeed(feed) {\r\n        return axios.get('/api/feed/' + feed.ID);\r\n    }\r\n\r\n    addFeed(feed) {\r\n        return axios.post('/api/feed/', feed)\r\n    }\r\n\r\n    removeFeed(feed) {\r\n        return axios.delete('/api/feed/' + feed.ID);\r\n    }\r\n\r\n    startFeed(feed) {\r\n        return axios.get('/api/feed/' +feed.ID+ '/start');\r\n    }\r\n\r\n    stopFeed(feed) {\r\n        return axios.get('/api/feed/' +feed.ID+ '/stop');\r\n    }\r\n}\r\n\r\nexport default FeedService.Instance()\r\n","import React, {Component} from \"react\";\r\nimport {Button, Card, Col, Form, Input, Row, Tag, Typography} from \"antd\";\r\nimport FeedService from \"../services/FeedService\";\r\nimport {EventBus} from \"../components/event\";\r\nconst {Text} = Typography;\r\n\r\nexport default class FeedView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            videoVisible: false,\r\n            feeds: {},\r\n        };\r\n\r\n        EventBus.subscribe('feed-refresh', (event) => this.refresh())\r\n        this.removeFeed = this.removeFeed.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        FeedService.getFeeds().then(request => {\r\n            this.setState({\"feeds\": request.data, loading: false})\r\n        })\r\n    }\r\n\r\n    removeFeed(feed) {\r\n        FeedService.removeFeed(feed).then(() => {\r\n            this.refresh()\r\n        })\r\n    }\r\n\r\n    startFeed(feed) {\r\n        FeedService.startFeed(feed).then(() => {\r\n            //this should force re-render :)\r\n            this.setState({\"refresh_state\": Math.random()})\r\n        })\r\n    }\r\n\r\n    stopFeed(feed) {\r\n        FeedService.stopFeed(feed).then(() => {\r\n            //this should force re-render :)\r\n            this.setState({\"refresh_state\": Math.random()})\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        let feeds = this.state.feeds;\r\n\r\n        if (this.state.loading || !this.state.feeds || this.state.feeds.length === 0) {\r\n            feeds = []\r\n        }\r\n\r\n        const WrappedFeedForm = Form.create({name: 'feed_form'})(FeedForm);\r\n\r\n        return (\r\n            <Row gutter={16}>\r\n                {\r\n                    feeds.map((feed, index) =>\r\n\r\n                        <Col span={8} key={index}>\r\n\r\n                            <Card\r\n                                title={\r\n                                    <Tag color=\"#f50\">{feed.site}/{feed.location}/{feed.name}</Tag>\r\n                                }\r\n                                cover={<img alt=\"feedview\" src={\"/api/feed/\" + feed.ID+ \"/view\"}/>}\r\n                                bordered={true}\r\n                                actions={[\r\n                                    <Button onClick={() => {this.startFeed(feed)}}>Start</Button>,\r\n                                    <Button onClick={() => {this.stopFeed(feed)}}>Stop</Button>,\r\n                                    <Button onClick={() => {this.removeFeed(feed)}}>Delete</Button>\r\n                                ]}\r\n                            >\r\n\r\n                            </Card>\r\n                        </Col>\r\n                    )\r\n                }\r\n\r\n                <Col span={8} key={-1}>\r\n\r\n                    <Card bordered={true}>\r\n                        <WrappedFeedForm/>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nfunction hasErrors(fieldsError) {\r\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n}\r\n\r\nclass FeedForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            submitted: false,\r\n            loading: false,\r\n            loginError: '',\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    handleSubmit(e) {\r\n\r\n        e.preventDefault();\r\n\r\n        const form = this.props.form;\r\n        var feed = {};\r\n        feed.url = form.getFieldValue(\"url\");\r\n        feed.site = form.getFieldValue(\"site\");\r\n        feed.location = form.getFieldValue(\"location\");\r\n        feed.name = form.getFieldValue(\"name\");\r\n        let validationError;\r\n        if (!feed.url) {\r\n            validationError = \"Missing url\"\r\n        }\r\n\r\n        if (!feed.site) {\r\n            validationError = \"Missing site\"\r\n        }\r\n\r\n        if (!feed.location) {\r\n            validationError = \"Missing location\"\r\n        }\r\n\r\n        if (!feed.name) {\r\n            validationError = \"Missing name\"\r\n        }\r\n\r\n        if (validationError) {\r\n            this.setState({validationError: validationError});\r\n            return\r\n        }\r\n\r\n        console.log('saving feed', feed);\r\n        this.setState({submitted: true, loading: true});\r\n\r\n        FeedService.addFeed(feed).then(response => {\r\n            EventBus.publish('feed-refresh', {})\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const {getFieldDecorator, getFieldsError} = this.props.form;\r\n        const validationError = this.state.validationError;\r\n        return (\r\n            <Form onSubmit={this.handleSubmit}>\r\n                <Form.Item>\r\n                    {getFieldDecorator('url', {rules: [{required: true, message: 'enter feed url!'}],})(\r\n                        <Input addonBefore=\"Feed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" placeholder=\"rtsp://\"/>,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    {getFieldDecorator('site', {rules: [{required: true, message: 'enter site!'}],})(\r\n                        <Input addonBefore=\"Site&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"\r\n                               placeholder=\"Site (e.g. gurgaon)\"/>,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    {getFieldDecorator('location', {rules: [{required: true, message: 'enter location!'}],})(\r\n                        <Input addonBefore=\"Location\" placeholder=\"Location (e.g. 9th floor)\"/>,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    {getFieldDecorator('name', {rules: [{required: true, message: 'enter name!'}],})(\r\n                        <Input addonBefore=\"Name&nbsp;&nbsp;&nbsp;&nbsp;\" placeholder=\"Name (e.g. front gate )\"/>,\r\n                    )}\r\n                </Form.Item>\r\n                <Button htmlType=\"submit\" type=\"primary\" disabled={hasErrors(getFieldsError())}>Add</Button>\r\n                {validationError && <Text type=\"danger\">{validationError}</Text>}\r\n            </Form>\r\n        )\r\n    }\r\n}","import axios from './axios';\r\n\r\nclass DeviceService {\r\n\r\n    static Instance() {\r\n        return new DeviceService()\r\n    }\r\n\r\n    getDevice() {\r\n       return axios.get('/api/device');\r\n    }\r\n\r\n    getDeviceConfig() {\r\n        return axios.get('/api/device/config');\r\n    }\r\n\r\n}\r\n\r\nexport default DeviceService.Instance()","import React, {Component} from \"react\";\r\nimport {Card, Icon} from 'antd';\r\nimport DeviceService from \"../services/DeviceService\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default class DeviceView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {loading:true, device:{}}\r\n    }\r\n\r\n    componentDidMount() {\r\n        DeviceService.getDevice().then(request => {\r\n            this.setState({\"device\" : request.data, loading : false})\r\n        },\r\n        error =>{\r\n            console.log(\"error\");\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let loading = this.state.loading;\r\n        let device = this.state.device;\r\n\r\n        if (loading) {\r\n            return (<div>Loading..</div>)\r\n        }\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Card title=\"Device details\" style={{width: 300}} extra={<Link to=\"/device/conf\"><Icon type=\"setting\" /></Link>}>\r\n                    <p>ID: {device.fingerprint}</p>\r\n                    <p>Name: {device.name}</p>\r\n                    <p>Model: {device.model}</p>\r\n                    <p>License: {device.license}</p>\r\n                    <p>Status: {device.status}</p>\r\n                    <p>RegisteredTo: {device.registeredTo}</p>\r\n\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport {Table, Divider,Row,Col,Card,Form,Button,Input,Icon,Typography,Select,Modal,message} from 'antd';\r\nimport UserService from \"../services/UserService\";\r\n\r\nimport '../form.css';\r\nconst { Column} = Table;\r\nconst {Text} = Typography;\r\nconst { confirm } = Modal;\r\nexport default class UserListView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            users: [],\r\n            showUserDetails:false,\r\n            mode:\"Add\",\r\n            user:{userName:\"\", lastName:\"\",firstName:\"\",email:\"\",password:\"\",roles:[],id:\"\"},\r\n            roles:[],\r\n            visible: false ,\r\n        };\r\n\r\n        this.addUser=this.addUser.bind(this);\r\n        this.refresh=this.refresh.bind(this);\r\n        this.refreshUsers=this.refreshUsers.bind(this);\r\n        this.close=this.close.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh(){\r\n        UserService.getUsers().then(request => {\r\n            this.setState({\"users\": request.data, loading: false,showUserDetails:false})\r\n        },\r\n        error=>{\r\n          message.error(error.response.data.message);\r\n        });\r\n\r\n        UserService.getRoles().then(request =>{\r\n            this.setState({roles:request.data})\r\n        },\r\n        error=>{\r\n          message.error(error.response.data.message);\r\n        });\r\n    }\r\n\r\n    refreshUsers(){\r\n        this.refresh();\r\n    }\r\n\r\n    showModal = () => {\r\n        this.setState({\r\n          visible: true,\r\n        });\r\n    };\r\n\r\n\r\n    addUser(){\r\n        this.setState({mode:\"Add\",showUserDetails:true, user:{userName:\"\", lastName:\"\",firstName:\"\",email:\"\",password:\"\"}})\r\n    }\r\n\r\n    showUser(userId){\r\n        this.setState({showUserDetails:true,mode:\"Edit\"});\r\n        UserService.getUser(userId).then(response =>{\r\n            this.setState({user : response.data})\r\n        },\r\n        error=>{\r\n          message.error(error.response.data.message);\r\n        });\r\n    }\r\n\r\n    close(){\r\n        this.setState({showUserDetails:false})\r\n    }\r\n\r\n     showDeleteConfirm(userId,refresh) {\r\n      confirm({\r\n        title: 'Are you sure you want to make user inactive?',\r\n        okText: 'Yes',\r\n        okType: 'danger',\r\n        cancelText: 'No',\r\n        onOk() {\r\n          console.log('OK');\r\n          UserService.deleteUser(userId).then(response=>{\r\n            message.success(\"User Deactivated!\");\r\n            refresh();\r\n          },\r\n          error=>{\r\n            message.error(error.response.data.message);\r\n          });\r\n\r\n\r\n        },\r\n        onCancel() {\r\n          console.log('Cancel');\r\n        },\r\n      });\r\n     }\r\n\r\n    render() {\r\n\r\n     const WrappedUserForm = Form.create({name: 'user_form'})(UserForm);\r\n     const showUserDetails=this.state.showUserDetails;\r\n\r\n        return (\r\n         <div>\r\n            <Row gutter={2}>\r\n                <Col span={2}>\r\n                    <Button type=\"primary\" onClick={this.addUser}>\r\n                         + ADD\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <br/>\r\n            <Row gutter={24}>\r\n                <Col span={12}>\r\n                    <Card\r\n                      className=\"limitable\"\r\n                      bodyStyle={{ padding: \"0px\", width: \"100%\" }}\r\n                    >\r\n                     <Table dataSource={this.state.users} pagination={false} scroll={{ x: true}} >\r\n                            <Column title=\"Username\" dataIndex=\"userName\" key=\"userName\" render={(text, record) => (\r\n                                <span><a href={\"user/\" + record.ID}>{text}</a></span>\r\n                            )}/>\r\n                            <Column title=\"Email\" dataIndex=\"email\" key=\"email\" />\r\n                            <Column title=\"Token\" dataIndex=\"token\" key=\"token\" />\r\n                            <Column title=\"Action\" key=\"action\" render={(text, record) => (\r\n                                    <span>\r\n                                        <a onClick={this.showUser.bind(this,record.id)}>Edit</a>\r\n                                        <Divider type=\"vertical\" />\r\n                                        <a onClick={this.showDeleteConfirm.bind(this,record.id,this.refresh)}>Delete</a>\r\n                                    </span>\r\n                                )}\r\n                            />\r\n                     </Table>\r\n                    </Card>\r\n                </Col>\r\n\r\n               {showUserDetails ?\r\n                 <Col span={12}>\r\n                   <WrappedUserForm user={this.state.user} roles={this.state.roles} refresh={this.refreshUsers} close={this.close} mode={this.state.mode}/>\r\n                 </Col>\r\n                :null}\r\n\r\n            </Row>\r\n         </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass UserForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            user:{},\r\n            loading: false\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.close = this.close.bind(this);\r\n\r\n    }\r\n\r\n    close(){\r\n        this.props.close();\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        const form = this.props.form;\r\n        let user = {};\r\n        user.firstName = form.getFieldValue(\"firstname\");\r\n        user.userName = form.getFieldValue(\"username\");\r\n        user.lastName = form.getFieldValue(\"lastname\");\r\n        user.email = form.getFieldValue(\"email\");\r\n        user.password = form.getFieldValue(\"password\");\r\n        user.roles=form.getFieldValue(\"role\");\r\n        user.id=this.props.user.id;\r\n        let validationError;\r\n        if (!user.firstName) {\r\n            validationError = \"Missing firstname\"\r\n        }\r\n        if (!user.userName) {\r\n            validationError = \"Missing username\"\r\n        }\r\n        if (!user.lastName) {\r\n            validationError = \"Missing lastname\"\r\n        }\r\n        if (!user.email) {\r\n            validationError = \"Missing email\"\r\n        }\r\n\r\n        if(user.roles.length===0){\r\n            validationError=\"Missing role\"\r\n        }\r\n        if (validationError) {\r\n            this.setState({validationError: validationError});\r\n            return\r\n        }\r\n        this.setState({loading: true});\r\n        console.log('saving user', user);\r\n        UserService.createUser(user).then(response => {\r\n            if(user.id){\r\n                 message.success(\"User updated\")\r\n            }\r\n            else{\r\n                 message.success(\"User created\")\r\n            }\r\n            this.setState({loading: false});\r\n            this.props.refresh();\r\n\r\n        }).catch(error=> {\r\n            console.log(error);\r\n            this.setState({loading: false});\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const {getFieldDecorator} = this.props.form;\r\n        const validationError = this.state.validationError;\r\n\r\n         return (\r\n            <Card title={this.props.mode ===\"Add\"? \"Add User\" : \"Edit User\"}>\r\n\r\n               <Form onSubmit={this.handleSubmit} className=\"user-form\" >\r\n                    <Form.Item label=\"Username\" className=\"formitem\">\r\n                        {getFieldDecorator('username', {\r\n                            initialValue:this.props.user.userName,\r\n                            rules: [{required: true, message: 'Please input your username!'}],\r\n                        })(\r\n                            <Input\r\n                                type=\"text\"\r\n                                placeholder=\"Username\"\r\n\r\n                            />,\r\n                        )}\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Firstname\" className=\"formitem\">\r\n                        {getFieldDecorator('firstname', {\r\n                            initialValue:this.props.user.firstName,\r\n                            rules: [{required: true, message: 'Please input your Firstname!'}],\r\n                        })(\r\n                            <Input\r\n                                type=\"text\"\r\n                                placeholder=\"Firstname\"\r\n\r\n                            />,\r\n                        )}\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Lastname\" className=\"formitem\">\r\n                        {getFieldDecorator('lastname', {\r\n                            initialValue:this.props.user.lastName,\r\n                            rules: [{required: true, message: 'Please input your lastname!'}],\r\n                        })(\r\n                            <Input\r\n                                type=\"text\"\r\n                                placeholder=\"Lastname\"\r\n\r\n                            />,\r\n                        )}\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Email\" className=\"formitem\">\r\n                        {getFieldDecorator('email', {\r\n                            initialValue:this.props.user.email,\r\n                            rules: [{required: true, message: 'Please input your email!'}],\r\n                        })(\r\n                            <Input\r\n                                type=\"email\"\r\n                                placeholder=\"email\"\r\n\r\n                            />,\r\n                        )}\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Role\" className=\"formitem\">\r\n                          {getFieldDecorator('role', {\r\n                            initialValue:this.props.user.roles,\r\n                            rules: [{ required: true, message: 'Please select role!' }],\r\n                          })(\r\n                            <Select mode=\"multiple\"\r\n                              placeholder=\"Select a role\"\r\n                            >\r\n                            {this.props.roles.map(role =>\r\n                                 <option key={role.id} value={role.name} >{role.name}</option>\r\n                             )}\r\n\r\n                            </Select>,\r\n                              )}\r\n                    </Form.Item>\r\n                    <br/>\r\n                    <div>\r\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"user-form-button\"  size=\"small\" loading={this.state.loading}>\r\n                            Save\r\n                        </Button>\r\n                        <span>&nbsp;&nbsp;</span>\r\n                        <Button type=\"secondary\" className=\"user-form-button\"  size=\"small\" onClick={this.close}>\r\n                            Close\r\n                        </Button>\r\n                    </div>\r\n\r\n                    {validationError && <Text type=\"danger\">{validationError}</Text>}\r\n               </Form>\r\n            </Card>\r\n\r\n\r\n         )\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport DeviceService from \"../services/DeviceService\";\r\nimport { Tabs } from 'antd';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport default class DeviceConfigView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {loading:true, deviceconfig:{}}\r\n    }\r\n\r\n    componentDidMount() {\r\n        DeviceService.getDeviceConfig().then(request => {\r\n            this.setState({\"deviceconfig\" : request.data, loading : false})\r\n        })\r\n    }\r\n\r\n    onTabChange(tab) {\r\n        console.log(\"tab changed\", tab)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Tabs defaultActiveKey=\"1\" onChange={this.onTabChange}>\r\n                <TabPane tab=\"Feed\" key=\"common\">\r\n                    Feed details\r\n                </TabPane>\r\n                <TabPane tab=\"Basic Intrusion\" key=\"bi\">\r\n                    Basic Intrusion\r\n                </TabPane>\r\n                <TabPane tab=\"Advanced Intrusion\" key=\"ai\">\r\n                    Advanced Intrusion\r\n                </TabPane>\r\n            </Tabs>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport UserService from \"../services/UserService\";\r\nimport {EventBus} from \"../components/event\";\r\nimport {Button, Col, Form, Icon, Input, Row, Typography, Card} from 'antd';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {history} from \"../helpers/history\";\r\nimport {Router} from 'react-router';\r\n\r\nconst {Text} = Typography;\r\n\r\n\r\nclass LoginView extends Component {\r\n\r\n    componentDidMount() {\r\n        if (UserService.isLoggedIn()) {\r\n            history.push(\"/#/\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const WrappedLoginForm = Form.create({name: 'login_form'})(LoginForm);\r\n        return (\r\n            <WrappedLoginForm/>\r\n        )\r\n    }\r\n}\r\n\r\nclass LoginForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            submitted: false,\r\n            loading: false,\r\n            loginError: '',\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(e) {\r\n\r\n        e.preventDefault();\r\n\r\n        const form = this.props.form;\r\n        const username = form.getFieldValue(\"username\");\r\n        const password = form.getFieldValue(\"password\");\r\n        this.setState({submitted: true});\r\n\r\n        if (!(username && password)) {\r\n            return\r\n        }\r\n\r\n        this.setState({loading: true});\r\n        let self = this;\r\n        UserService.login(username, password)\r\n            .then(token => {\r\n                const {from} = history.state || {from: {pathname: \"/\"}};\r\n                history.push(from);\r\n                /* EventBus.publish('login-logout', {});*/\r\n                window.location.reload();\r\n\r\n            }).catch(error => {\r\n            this.setState({\r\n                loginError: \"Something went wrong, please try again\",\r\n                loading: false\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const {getFieldDecorator} = this.props.form;\r\n        const loginError = this.state.loginError;\r\n\r\n        return (\r\n            <Row>\r\n                <Col xl={{span: 8}} lg={{span: 6}} md={{span: 4}} sm={{span: 2}} xs={{span: 2}}/>\r\n                <Col xl={{span: 8}} lg={{span: 12}} md={{span: 12}} sm={{span: 24}} xs={{span: 24}}>\r\n                    <Card title={<img style={{}} src={\"synlabs-logo.png\"}/>} style={{top: 50}}>\r\n                        <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                            <Form.Item>\r\n                                {getFieldDecorator('username', {\r\n                                    rules: [{required: true, message: 'Please input your username!'}],\r\n                                })(\r\n                                    <Input\r\n                                        prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}}/>}\r\n                                        placeholder=\"Username\"\r\n                                    />,\r\n                                )}\r\n                            </Form.Item>\r\n                            <Form.Item>\r\n                                {getFieldDecorator('password', {\r\n                                    rules: [{required: true, message: 'Please input your Password!'}],\r\n                                })(\r\n                                    <Input\r\n                                        prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\r\n                                        type=\"password\"\r\n                                        placeholder=\"Password\"\r\n                                    />,\r\n                                )}\r\n                            </Form.Item>\r\n                            <Form.Item>\r\n                                <Button type=\"primary\" htmlType=\"submit\" block className=\"login-form-button\">\r\n                                    Log in\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                        {loginError && <Text type=\"danger\">{loginError}</Text>\r\n                        }\r\n                    </Card>\r\n\r\n\r\n                </Col>\r\n            </Row>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(LoginView);\r\n","\r\nimport axios from './axios';\r\n\r\nclass TriggerService {\r\n\r\n    static Instance() {\r\n        return new TriggerService()\r\n    }\r\n\r\n    getTrigger() {\r\n        return axios.get('/api/trigger/');\r\n    }\r\n\r\n    getTriggers() {\r\n        return axios.get('/api/triggers');\r\n    }\r\n\r\n    createTrigger(trigger) {\r\n        return axios.post('/api/trigger/', trigger);\r\n    }\r\n\r\n    saveTrigger(trigger) {\r\n        return axios.put('/api/trigger/' + trigger.ID, trigger);\r\n    }\r\n\r\n    deleteTrigger(trigger) {\r\n        return axios.delete('/api/trigger/' + trigger.ID);\r\n    }\r\n}\r\n\r\nexport default TriggerService.Instance()","import React, {Component} from \"react\";\r\nimport {Slider, Button, Input} from \"antd\";\r\nimport TriggerService from \"../services/TriggerService\";\r\n\r\nexport default class TriggerSet extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\r\n        this.onChange0 = this.onChange0.bind(this);\r\n        this.onChange1 = this.onChange1.bind(this);\r\n        this.onChange2 = this.onChange2.bind(this);\r\n        this.onChange3 = this.onChange3.bind(this);\r\n        this.onChange4 = this.onChange4.bind(this);\r\n        this.onChange5 = this.onChange5.bind(this);\r\n        this.onChange6 = this.onChange6.bind(this);\r\n        this.onChangeValue = this.onChangeValue.bind(this);\r\n        this.saveTrigger = this.saveTrigger.bind(this);\r\n        this.deleteTrigger = this.deleteTrigger.bind(this);\r\n        this.setName = this.setName.bind(this);\r\n\r\n        this.state = {\r\n            trigger : this.props.trigger,\r\n            changed : false\r\n        }\r\n    }\r\n\r\n    onChange0(value) { this.onChangeValue(0, value)    }\r\n    onChange1(value) { this.onChangeValue(1, value)    }\r\n    onChange2(value) { this.onChangeValue(2, value)    }\r\n    onChange3(value) { this.onChangeValue(3, value)    }\r\n    onChange4(value) { this.onChangeValue(4, value)    }\r\n    onChange5(value) { this.onChangeValue(5, value)    }\r\n    onChange6(value) { this.onChangeValue(6, value)    }\r\n\r\n    onChangeValue(idx, value) {\r\n        let trigger = this.state.trigger;\r\n        trigger.TriggerDays[idx].Start = value[0];\r\n        trigger.TriggerDays[idx].End = value[1];\r\n        this.setState({trigger:trigger, changed: true})\r\n    }\r\n\r\n    saveTrigger() {\r\n\r\n        if (this.state.trigger.new) {\r\n            TriggerService.createTrigger(this.state.trigger)\r\n        } else {\r\n            TriggerService.saveTrigger(this.state.trigger)\r\n        }\r\n\r\n    }\r\n\r\n    NewTrigger() {\r\n        let trigger = {name:\"New\", TriggerDays: [], new:true};\r\n        for (let i=0;i<7;i++) {\r\n            trigger.TriggerDays.push({\r\n                Start:0,\r\n                End:24,\r\n                Day:i,\r\n            })\r\n        }\r\n        this.setState({trigger:trigger, changed: true})\r\n    }\r\n\r\n    setName(e, value) {\r\n        let trigger = this.state.trigger;\r\n        trigger.name = e.target.value;\r\n        this.setState({trigger:trigger, changed: true});\r\n    }\r\n\r\n    deleteTrigger() {\r\n        TriggerService.deleteTrigger(this.state.trigger)\r\n    }\r\n\r\n    ChangeTrigger(trigger) {\r\n        this.setState({trigger:trigger, changed: false})\r\n    }\r\n\r\n    render() {\r\n        let selected = this.state.trigger;\r\n        let changed = this.state.changed;\r\n\r\n        if (!selected) return (<div>Waiting..</div>);\r\n        let marks = {};\r\n        for (let i = 12; i <= 24; i++) {\r\n            let j = i - 12;\r\n            marks[j] = i + ':00'\r\n        }\r\n\r\n        for (let i = 0; i <= 12; i++) {\r\n            let j = i + 12;\r\n            marks[j] = (i < 10 ? '0' : '') + i + ':00'\r\n        }\r\n\r\n\r\n        selected.TriggerDays.map((day, idx) => {\r\n            let start = day.Start;\r\n            let end = day.End;\r\n            if (start > end) {\r\n                day.Start = start - 12;\r\n                day.End = end + 12\r\n            }\r\n        });\r\n\r\n        let dlist = selected.TriggerDays;\r\n\r\n        return (\r\n            <div>\r\n                {selected.new ? (<Input placeholder=\"Name\" onChange={this.setName}/>) : (<span>{selected.ID} - {selected.name}</span>)}\r\n                <div>\r\n                    <span>{this.days[dlist[0].Day]}</span>\r\n                    <Slider min={0} max={24} range marks={marks} value={[dlist[0].Start, dlist[0].End]} onChange={this.onChange0}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <span>{this.days[dlist[1].Day]}</span>\r\n                    <Slider min={0} max={24} range marks={marks} value={[dlist[1].Start, dlist[1].End]} onChange={this.onChange1}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <span>{this.days[dlist[2].Day]}</span>\r\n                    <Slider min={0} max={24} range marks={marks} value={[dlist[2].Start, dlist[2].End]} onChange={this.onChange2}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <span>{this.days[dlist[3].Day]}</span>\r\n                    <Slider min={0} max={24} range marks={marks} value={[dlist[3].Start, dlist[3].End]} onChange={this.onChange3}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <span>{this.days[dlist[4].Day]}</span>\r\n                    <Slider min={0} max={24} range marks={marks} value={[dlist[4].Start, dlist[4].End]} onChange={this.onChange4}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <span>{this.days[dlist[5].Day]}</span>\r\n                    <Slider min={0} max={24} range marks={marks} value={[dlist[5].Start, dlist[5].End]} onChange={this.onChange5}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <span>{this.days[dlist[6].Day]}</span>\r\n                    <Slider min={0} max={24} range marks={marks} value={[dlist[6].Start, dlist[6].End]} onChange={this.onChange6}/>\r\n                </div>\r\n\r\n                <Button type=\"primary\" disabled={!changed} onClick={this.saveTrigger}>Save</Button>\r\n                <Button type=\"link\" disabled={changed} onClick={this.deleteTrigger}>Delete</Button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React, {Component} from \"react\";\r\nimport {Select, Button} from 'antd';\r\nimport TriggerService from \"../services/TriggerService\";\r\nimport TriggerSet from \"../components/TriggerSet\";\r\n\r\nconst {Option} = Select;\r\nexport default class TriggerView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            triggers: []\r\n        };\r\n\r\n        this.tsRef = React.createRef();\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.newTrigger = this.newTrigger.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        TriggerService.getTriggers().then(request => {\r\n            this.setState({\r\n                triggers: request.data,\r\n                selected: request.data[0].ID,\r\n                selectedt: request.data[0],\r\n                loading: false\r\n            })\r\n        });\r\n    }\r\n\r\n    newTrigger() {\r\n        this.tsRef.current.NewTrigger();\r\n    }\r\n\r\n    handleChange(id) {\r\n\r\n        console.log(\"changing to ...\", id);\r\n\r\n        for (let i = 0; i < this.state.triggers.length; i++) {\r\n            console.log(\"checking:\", this.state.triggers[i].ID);\r\n            if (id == this.state.triggers[i].ID) {\r\n                console.log(\"selected:\", id);\r\n                this.tsRef.current.ChangeTrigger(this.state.triggers[i]);\r\n                this.setState({selected: id, selectedt: this.state.triggers[i]});\r\n                return\r\n            }\r\n        }\r\n\r\n        console.log(\"cant select:(\")\r\n    }\r\n\r\n    render() {\r\n\r\n        let selected = this.state.selected;\r\n        let selectedt = this.state.selectedt;\r\n        let triggers = this.state.triggers;\r\n\r\n        if (this.state.loading) {\r\n            triggers = [];\r\n        }\r\n\r\n        let selectedname = \"\";\r\n        if (selectedt) {\r\n            selectedname = selectedt.Name\r\n        }\r\n\r\n        console.log(\"SN\", selectedname, selected, selectedt);\r\n        let selector = (\r\n\r\n            <div>\r\n                <Select style={{width: 120}} onChange={this.handleChange}>\r\n                    {\r\n                        triggers.map((trigger, index) =>\r\n                            <Option key={trigger.ID}>{trigger.name}</Option>\r\n                        )\r\n                    }\r\n\r\n                </Select>\r\n                &nbsp;\r\n                <Button type=\"primary\" onClick={this.newTrigger}>New</Button>\r\n            </div>\r\n        );\r\n\r\n        if (selectedt) {\r\n            return (\r\n                <div>\r\n                    {selector}\r\n                    <TriggerSet trigger={selectedt} ref={this.tsRef}/>\r\n                </div>\r\n\r\n            )\r\n        }\r\n\r\n        return (\r\n            selector\r\n        )\r\n    }\r\n}","\r\nimport React, {Component} from \"react\";\r\nimport {Button, DatePicker, Icon, TimePicker} from 'antd';\r\nconst ButtonGroup = Button.Group;\r\n\r\nexport default class DeviceView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            layout: \"list\",\r\n            filter: {\r\n                page: 1,\r\n                pageSize: 10\r\n            }\r\n        };\r\n        this.onFromDateChange = this.onFromDateChange.bind(this);\r\n        this.onFromTimeChange = this.onFromTimeChange.bind(this);\r\n        this.onToDateChange = this.onToDateChange.bind(this);\r\n        this.onToTimeChange = this.onToTimeChange.bind(this);\r\n        this.onPageChange = this.onPageChange.bind(this);\r\n        this.onPageSizeChange = this.onPageSizeChange.bind(this);\r\n        this.refresh = this.refresh.bind(this);\r\n    }\r\n\r\n    refresh(){\r\n        this.props.handleRefresh();\r\n    }\r\n    onPageChange(page, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.page = page;\r\n        filter.pageSize = pageSize;\r\n        this.refreshNow(filter)\r\n    }\r\n\r\n    onPageSizeChange(current, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.pageSize = pageSize;\r\n        this.refreshNow(filter);\r\n    }\r\n\r\n    changeLayout(layout) {\r\n        this.setState({\"layout\": layout});\r\n        this.props.handleLayoutChange(layout);\r\n    }\r\n\r\n   onFromDateChange(date) {\r\n       let filter = this.state.filter;\r\n       if(date!=null){\r\n         filter.fromDate = date.format(\"YYYY-MM-DD\");\r\n       }\r\n       else{\r\n           filter.fromDate=null;\r\n       }\r\n       this.setState({filter: filter});\r\n       this.props.handleFilterChange(filter);\r\n   }\r\n\r\n   onFromTimeChange(time) {\r\n       let filter = this.state.filter;\r\n       if(time!=null){\r\n         filter.fromTime = time.format(\"HH:mm:ss\");\r\n       }\r\n       else{\r\n           filter.fromTime=null;\r\n       }\r\n       this.setState({filter: filter});\r\n       this.props.handleFilterChange(filter);\r\n   }\r\n\r\n   onToDateChange(date) {\r\n       let filter = this.state.filter;\r\n       if(date!=null){\r\n         filter.toDate = date.format(\"YYYY-MM-DD\");\r\n       }\r\n       else{\r\n         filter.toDate=null;\r\n       }\r\n       this.setState({filter: filter});\r\n       this.props.handleFilterChange(filter);\r\n   }\r\n\r\n   onToTimeChange(time) {\r\n       let filter = this.state.filter;\r\n       if(time!=null){\r\n        filter.toTime = time.format(\"HH:mm:ss\");\r\n       }\r\n       else{\r\n         filter.toTime=null;\r\n       }\r\n       this.setState({filter: filter});\r\n       this.props.handleFilterChange(filter);\r\n   }\r\n\r\n    render() {\r\n\r\n        let layout = this.state.layout;\r\n\r\n        return (\r\n            <div>\r\n                <span>From: </span>\r\n                <DatePicker onChange={this.onFromDateChange}/>&nbsp;&nbsp;\r\n                <TimePicker minuteStep={15} secondStep={60} onChange={this.onFromTimeChange}/>&nbsp;&nbsp;\r\n                <span>To: </span>\r\n                <DatePicker onChange={this.onToDateChange}/>&nbsp;&nbsp;\r\n                <TimePicker minuteStep={15} secondStep={60} onChange={this.onToTimeChange}/>&nbsp;&nbsp;\r\n\r\n                <ButtonGroup>\r\n                    <Button type={layout === \"list\" ? \"primary\" : \"\"} size=\"small\" icon=\"table\"\r\n                            onClick={() => {\r\n                                this.changeLayout(\"list\")\r\n                            }}/>\r\n                    <Button type={layout === \"table\" ? \"primary\" : \"\"} size=\"small\" icon=\"unordered-list\"\r\n                            onClick={() => {\r\n                                this.changeLayout(\"table\")\r\n                            }}/>\r\n                </ButtonGroup>&nbsp;&nbsp;\r\n                <Button onClick={() => {\r\n                    this.refresh()\r\n                }}><Icon type=\"reload\"/>Reload</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import axios from \"./axios\";\r\n\r\nclass AnprService {\r\n\r\n    static Instance() {\r\n        return new AnprService()\r\n    }\r\n\r\n    getEvents(filter) {\r\n        return axios.post('/api/anpr/events', filter);\r\n    }\r\n\r\n    getIncidents(filter) {\r\n        return axios.post('/api/anpr/incidents', filter);\r\n    }\r\n\r\n    getIncidentsHotlisted(filter) {\r\n        return axios.post('/api/anpr/incidents/hotListed', filter);\r\n    }\r\n\r\n    archiveEvent(event) {\r\n        return axios.delete('/api/anpr/' + event.id);\r\n    }\r\n\r\n    archiveAllEvent(lpr) {\r\n            return axios.put('/api/anpr/events/archive/' + lpr);\r\n        }\r\n\r\n    updateEvent(event) {\r\n        return axios.put('/api/anpr/event', event);\r\n    }\r\n\r\n    getEventFile(id) {\r\n        return axios.get('/public/anpr/anprText/' + id + '/image.jpg');\r\n    }\r\n\r\n    getHelmetMissingIncidentsRepeated(filter) {\r\n            return axios.post('/api/incident/repeated/helmet-missing', filter);\r\n    }\r\n    getReverseDirectionIncidentsRepeated(filter) {\r\n            return axios.post('/api/incident/repeated/reverse', filter);\r\n    }\r\n    getBriefIncidentsRepeated(filter) {\r\n                return axios.post('/api/incident/timeline', filter);\r\n    }\r\n     getIncidentTimeline(filter) {\r\n                     return axios.post('/api/anpr/events/list/bylpr', filter);\r\n     }\r\n     getIncidentsList(filter) {\r\n                    return axios.post('/api/anpr/events/list/lpr/count', filter);\r\n     }\r\n\r\n}\r\n\r\nexport default AnprService.Instance()","import axios from \"./axios\";\r\nimport { authHeader } from '../helpers/auth-header';\r\nimport { config } from '../helpers/config'\r\n\r\nclass AnprReportService {\r\n\r\n    static Instance() {\r\n        return new AnprReportService()\r\n    }\r\n\r\n    getAnprEventsReport(req) {\r\n        const request = {\r\n            method: 'POST',\r\n            headers: authHeader(),\r\n            responseType: 'blob',\r\n            data: JSON.stringify(req),\r\n            url: config.apiUrl + 'api/anpr/anprevent'\r\n        };\r\n        return axios(request);\r\n    }\r\n\r\n}\r\n\r\nexport default AnprReportService.Instance()","import React, {Component} from \"react\";\r\nimport {\r\n    Card,\r\n    Col,\r\n    Collapse,\r\n    Divider,\r\n    Empty,\r\n    Icon,\r\n    Pagination,\r\n    Row,\r\n    Table,\r\n    Tag,\r\n    Input, Button, Menu, Dropdown, Typography, Slider,\r\n    Modal,\r\n    message,  Form\r\n} from 'antd';\r\nimport GenericFilter from \"../../components/GenericFilter\";\r\nimport Moment from \"react-moment\";\r\nimport AnprService from \"../../services/AnprService\";\r\nimport Magnifier from \"react-magnifier\";\r\nimport moment from \"moment\";\r\nimport {saveAs} from \"file-saver\";\r\nimport AnprReportService from \"../../services/AnprReportService\";\r\n\r\nconst {Paragraph, Text} = Typography;\r\n\r\nconst {Column} = Table;\r\nconst {Panel} = Collapse;\r\n\r\n\r\nexport default class AnprView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible: true,\r\n            loading: true,\r\n            layout: \"list\",\r\n            events: {},\r\n            filter: {\r\n                page: 1,\r\n                pageSize: 12\r\n            },\r\n            workingEvent: {},\r\n            workingEventLoading: false,\r\n            magnifyEvent: {\r\n                magnifyEventId: \"\",\r\n                zoomFactor: 2,\r\n                minZoomFactor: 1,\r\n                maxZoomFactor: 5\r\n            },\r\n            downloading: false,\r\n        };\r\n\r\n        this.refresh = this.refresh.bind(this);\r\n        this.handleFilterChange = this.handleFilterChange.bind(this);\r\n        this.handleLayoutChange = this.handleLayoutChange.bind(this);\r\n        this.handleRefresh = this.handleRefresh.bind(this);\r\n        this.onPageChange = this.onPageChange.bind(this);\r\n        this.onPageSizeChange = this.onPageSizeChange.bind(this);\r\n        this.onLprInputChange = this.onLprInputChange.bind(this);\r\n        this.editEvent = this.editEvent.bind(this);\r\n        this.updateEvent = this.updateEvent.bind(this);\r\n        this.magnifyEvent = this.magnifyEvent.bind(this);\r\n        this.updateZoomFactor = this.updateZoomFactor.bind(this);\r\n        this.downloadAnprReport=this.downloadAnprReport.bind(this);\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        AnprService.getEvents(this.state.filter).then(request => {\r\n            this.setState({\"anprresponse\": request.data, loading: false})\r\n        })\r\n    }\r\n\r\n    //cant use refresh to read from state as state may not have been set\r\n    refreshNow(filter) {\r\n        AnprService.getEvents(this.state.filter).then(request => {\r\n            this.setState({\"anprresponse\": request.data, loading: false})\r\n        })\r\n    }\r\n\r\n    archiveEvent(event) {\r\n        AnprService.archiveEvent(event).then(request => {\r\n            this.refresh();\r\n        })\r\n    }\r\n\r\n    onLprInputChange(e) {\r\n\r\n        let filter = this.state.filter;\r\n        filter.lpr = e.target.value;\r\n        console.log(filter);\r\n        this.setState({filter: filter})\r\n    }\r\n\r\n    handleFilterChange(data) {\r\n        this.setState({filter: data})\r\n    }\r\n\r\n    handleLayoutChange(data) {\r\n        this.setState({layout: data})\r\n    }\r\n\r\n    handleOnClick = e => {\r\n        console.log(e);\r\n        this.setState({\r\n            visible: false,\r\n        });\r\n    };\r\n\r\n    handleRefresh() {\r\n        this.refresh();\r\n    }\r\n\r\n    onPageChange(page, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.page = page;\r\n        filter.pageSize = pageSize;\r\n        this.refreshNow(filter)\r\n    }\r\n\r\n    onPageSizeChange(current, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.pageSize = pageSize;\r\n        this.refreshNow(filter);\r\n    }\r\n\r\n    editEvent(event) {\r\n        this.setState({workingEvent: event});\r\n    }\r\n\r\n    magnifyEvent(event) {\r\n        let magnifyEvent = this.state.magnifyEvent;\r\n        magnifyEvent.magnifyEventId = event.id;\r\n\r\n        this.setState({magnifyEvent});\r\n    }\r\n\r\n    updateZoomFactor(zoomFactor) {\r\n        let magnifyEvent = this.state.magnifyEvent;\r\n        magnifyEvent.zoomFactor = zoomFactor;\r\n\r\n        this.setState({magnifyEvent});\r\n    }\r\n\r\n    updateEvent(anprText) {\r\n\r\n        let {workingEvent, workingEventLoading} = this.state;\r\n        workingEvent.anprText = anprText;\r\n        workingEventLoading = true;\r\n        this.setState({workingEvent, workingEventLoading});\r\n        AnprService.updateEvent(workingEvent).then(request => {\r\n            let {workingEvent, workingEventLoading} = this.state;\r\n            workingEvent.anprText = anprText;\r\n            workingEventLoading = false;\r\n            this.setState({workingEventLoading});\r\n        }).catch(error => {\r\n            alert(\"error in saving\");\r\n            let {workingEventLoading} = this.state;\r\n            workingEventLoading = false;\r\n            this.setState({workingEventLoading});\r\n        })\r\n    }\r\n//shashank\r\n    downloadAnprReport(){\r\n        this.setState({downloading:true})\r\n        let filter= this.state.filter;\r\n        var req={\r\n            fromDateString: filter.from_date !=null?moment(filter.fromDate).format('YYYY-MM-DD HH:mm:ss'):\"\",\r\n            toDateString:filter.to_date !=null? moment(filter.toDate).format('YYYY-MM-DD HH:mm:ss\"'):\"\",\r\n            lpr:filter.lpr,\r\n        }\r\n\r\n        AnprReportService.getAnprEventsReport(req).then(response => {\r\n            this.setState({downloading: false});\r\n            saveAs(response.data, \"anpr-events.csv\");\r\n        }).catch(error => {\r\n            this.setState({downloading: false});\r\n        });\r\n    }\r\n\r\n    //shashank\r\n\r\n    render() {\r\n\r\n        let layout = this.state.layout;\r\n        let lpr = this.state.filter.lpr;\r\n\r\n        return (\r\n            <div>\r\n                <h3>ANPR</h3>\r\n                <Collapse bordered={false} defaultActiveKey={['1']}>\r\n                    <Panel header=\"Filter\" key=\"1\">\r\n\r\n                        LPR: <Input value={lpr} style={{\"width\": \"200px\"}} onChange={this.onLprInputChange}/>&nbsp;&nbsp;\r\n                        <Button onClick={() => {\r\n                            this.downloadAnprReport()\r\n                        }}><Icon type=\"download\"/>Download</Button>\r\n\r\n                        <br/><br/>\r\n                        <GenericFilter handleRefresh={this.refresh} filter={this.state.filter} layout={layout}\r\n                                       handleFilterChange={this.handleFilterChange}\r\n                                       handleLayoutChange={this.handleLayoutChange}\r\n                        />\r\n\r\n\r\n\r\n                    </Panel>\r\n                </Collapse>\r\n                <div>\r\n                    {layout === \"table\" ? (this.renderTable()) : (this.renderGrid())}\r\n                </div>\r\n            </div>)\r\n    }\r\n\r\n    renderGrid() {\r\n\r\n\r\n        if (this.state.loading || !this.state.anprresponse || this.state.anprresponse.totalPage === 0) {\r\n            return <Empty description={false}/>\r\n        }\r\n\r\n        let events = this.state.anprresponse.events;\r\n        let workingEventLoading = this.state.workingEventLoading;\r\n        let workingEvent = this.state.workingEvent;\r\n        let count = this.state.anprresponse.totalPages * this.state.anprresponse.pageSize;\r\n\r\n        let {magnifyEventId, zoomFactor, minZoomFactor, maxZoomFactor} = this.state.magnifyEvent;\r\n        const mid = ((maxZoomFactor - minZoomFactor) / 2).toFixed(5);\r\n        const preColor = zoomFactor >= mid ? '' : 'rgba(0, 0, 0, .45)';\r\n        const nextColor = zoomFactor >= mid ? 'rgba(0, 0, 0, .45)' : '';\r\n        const marks = {\r\n            1: {label: <span><Icon style={{color: preColor}} type=\"zoom-out\"/></span>},\r\n            2: {label: <span>2</span>},\r\n            3: {label: <span>3</span>},\r\n            4: {label: <span>4</span>},\r\n            5: {label: <span><Icon style={{color: nextColor}} type=\"zoom-in\"/></span>,}\r\n        };\r\n        return <div style={{background: '#ECECEC', padding: '5px'}}>\r\n            <Row>\r\n                {\r\n                    events.map((event, index) =>\r\n                        <Col xl={{span: 8}} lg={{span: 12}} md={{span: 12}} sm={{span: 24}} xs={{span: 24}} key={index}>\r\n                            <Card\r\n                                style={{margin: \"5px\"}}\r\n                                title={\r\n                                    <div>\r\n                                        {(event.direction && event.direction === \"rev\") ?\r\n                                            <Tag color=\"#f50\">Reverse</Tag> : null}\r\n                                        {(event.helmet) ? <Tag color=\"#f50\">Without helmet</Tag> : null}\r\n\r\n                                        {(event.sectionSpeed) ? <Tag color=\"#f50\">Overspeeding</Tag> : null}\r\n                                    </div>\r\n                                }\r\n                                extra={<Dropdown overlay={<Menu>\r\n                                    <Menu.Item key=\"0\" onClick={() => this.magnifyEvent(event)}><Icon type=\"zoom-in\"/>Zoom\r\n                                        image\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"1\">\r\n                                        <a\r\n                                            title={\"click here to download\"}\r\n                                            href={\"/public/anpr/vehicle/\" + event.id + \"/image.jpg\"}\r\n                                            download={true}><Icon type=\"download\"/>{' '} Full\r\n                                            image</a>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"2\">\r\n                                        <a\r\n                                            title={\"click here to download\"}\r\n                                            href={\"/public/anpr/lpr/\" + event.id + \"/image.jpg\"}\r\n                                            download={true}><Icon type=\"download\"/>{' '} Cropped image</a>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"3\">\r\n                                        <Button type=\"danger\" onClick={() => this.archiveEvent(event)}><Icon\r\n                                            type=\"warning\"/>{' '}\r\n                                            Archive\r\n                                        </Button>\r\n                                    </Menu.Item>\r\n\r\n                                </Menu>}>\r\n                                    <Button>\r\n                                        More <Icon type=\"down\"/>\r\n                                    </Button>\r\n                                </Dropdown>}\r\n                                bordered={true}\r\n                                cover={(magnifyEventId === event.id) ?\r\n                                    <Magnifier src={\"/public/anpr/vehicle/\" + event.id + \"/image.jpg\"}\r\n                                               zoomFactor={zoomFactor}/> : <img alt=\"event\"\r\n                                                                                src={\"/public/anpr/vehicle/\" + event.id + \"/image.jpg\"}/>\r\n\r\n                                }\r\n                            >\r\n                                <div>\r\n                                    {(magnifyEventId === event.id) ?\r\n                                        <Slider\r\n                                            marks={marks}\r\n                                            min={minZoomFactor}\r\n                                            max={maxZoomFactor}\r\n                                            onChange={this.updateZoomFactor}\r\n                                            value={typeof zoomFactor === 'number' ? zoomFactor : 0}\r\n                                        />\r\n                                        :\r\n                                        <div style={{height: \"54px\", textAlign: \"center\"}}>\r\n                                            <Button size=\"small\" type=\"dashed\" onClick={() => this.magnifyEvent(event)}>\r\n                                                <Icon type=\"zoom-in\"/>Zoom Image\r\n                                            </Button>\r\n                                        </div>\r\n\r\n                                    }\r\n                                </div>\r\n                                <div style={{textAlign: \"center\"}}>\r\n                                    <img alt=\"event\"\r\n                                         src={\"/public/anpr/lpr/\" + event.id + \"/image.jpg\"}/>\r\n                                </div>\r\n                                <div style={{marginTop: \"5px\", textAlign: \"center\"}}\r\n                                     onClick={() => this.editEvent(event)}>\r\n                                    <Paragraph\r\n                                        strong\r\n                                        editable={{onChange: this.updateEvent}}\r\n                                        copyable>{event.anprText}</Paragraph>\r\n                                    <Text\r\n                                        type=\"secondary\">{(workingEventLoading && workingEvent.id === event.id) ? \"saving...\" : \"\"}</Text>\r\n                                    <Text\r\n                                        type=\"secondary\">{(event.speed) ? \"Speed: \"+event.speed : \"\"}</Text>\r\n                                    <div>\r\n                                        <Text code><Icon type=\"schedule\"/> <Moment\r\n                                            format=\"ll\">{event.eventDate}</Moment>{' '}|{' '}<Moment\r\n                                            format=\"LTS\">{event.eventDate}</Moment></Text>\r\n                                    </div>\r\n                                    <div>\r\n                                        <Text code><Icon type=\"environment\"/> {event.location}</Text>\r\n                                    </div>\r\n\r\n\r\n                                </div>\r\n\r\n                            </Card>\r\n                        </Col>\r\n                    )\r\n                }\r\n            </Row>\r\n            <div style={{textAlign: \"right\"}}>\r\n                <Pagination onChange={this.onPageChange} onShowSizeChange={this.onPageSizeChange} showSizeChanger\r\n                            showQuickJumper\r\n                            defaultCurrent={1} total={count} current={this.state.filter.page}\r\n                            pageSize={this.state.filter.pageSize}/>\r\n            </div>\r\n\r\n        </div>\r\n    }\r\n\r\n    renderTable() {\r\n\r\n        if (this.state.loading || !this.state.events || this.state.events.Total === 0) {\r\n            return <Empty description={false}/>\r\n        }\r\n\r\n        let events = this.state.anprresponse.events;\r\n        let count = this.state.anprresponse.totalPages * this.state.anprresponse.pageSize;\r\n\r\n        const paginationOptions = {\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            onShowSizeChange: this.onPageSizeChange,\r\n            onChange: this.onPageChange,\r\n            total: count\r\n        };\r\n\r\n        const pagination = {\r\n            ...paginationOptions,\r\n            total: count,\r\n            current: this.state.filter.page,\r\n            pageSize: this.state.filter.pageSize\r\n        };\r\n\r\n        return (\r\n            <Table dataSource={events} pagination={pagination}>\r\n                <Column title=\"Location\" dataIndex=\"location\" key=\"location\"\r\n                        render={location => location}/>\r\n                <Column title=\"Date\" dataIndex=\"eventDate\" key=\"eventDate\"\r\n                        render={eventDate => (<Moment format=\"L\">{eventDate}</Moment>)}/>\r\n                <Column title=\"Time\" dataIndex=\"eventDate\" key=\"eventTime\"\r\n                        render={eventDate => (<Moment format=\"LTS\">{eventDate}</Moment>)}/>\r\n                <Column title=\"LPR\" dataIndex=\"anprText\" key=\"anprText\"\r\n                        render={anprText => anprText}/>\r\n                <Column title=\"LP Image\" dataIndex=\"id\" key=\"anprimage\"\r\n                        render={id => (\r\n                            <a title={\"click here to download\"} href={\"/public/anpr/lpr/\" + id + \"/image.jpg\"}\r\n                               download={true}>\r\n                                <img alt=\"event\"\r\n                                     src={\"/public/anpr/lpr/\" + id + \"/image.jpg\"}/></a> )}/>\r\n                <Column title=\"direction\" dataIndex=\"direction\" key=\"direction\"\r\n                        render={direction => direction}/>\r\n                <Column title=\"Helmet?\" dataIndex=\"helmet\" key=\"helmet\"\r\n                        render={helmet => helmet ? <span>No</span> : <span>N/A</span>}/>\r\n                <Column title=\"Speed\" dataIndex=\"speed\" key=\"speed\"\r\n                        render={speed => <span>{speed}</span>}/>\r\n                <Column title=\"Action\"\r\n                        key=\"action\"\r\n                        render={(text, event) => (\r\n                            <Button type=\"danger\" onClick={() => this.archiveEvent(event)}><Icon type=\"warning\"/>{' '}\r\n                                Archive</Button>\r\n                        )}\r\n                />\r\n\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {\r\n    Card,\r\n    Col,\r\n    Collapse,\r\n    Empty,\r\n    Icon,\r\n    Pagination,\r\n    Row,\r\n    Table,\r\n    Tag,\r\n    Input, Button, Menu, Dropdown, Typography, Slider\r\n} from 'antd';\r\nimport GenericFilter from \"../components/GenericFilter\";\r\nimport Moment from \"react-moment\";\r\nimport AnprService from \"../services/AnprService\";\r\nimport Magnifier from \"react-magnifier\";\r\n\r\nconst {Column} = Table;\r\nconst {Panel} = Collapse;\r\nconst {Paragraph, Text} = Typography;\r\n\r\n\r\nexport default class TrafficIncidentView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            layout: \"list\",\r\n            events: {},\r\n            filter: {\r\n                page: 1,\r\n                pageSize: 12\r\n            },\r\n            workingEvent: {},\r\n            workingEventLoading: false,\r\n            magnifyEvent: {\r\n                magnifyEventId: \"\",\r\n                zoomFactor: 2,\r\n                minZoomFactor: 1,\r\n                maxZoomFactor: 5\r\n            },\r\n        };\r\n\r\n        this.refresh = this.refresh.bind(this);\r\n        this.handleFilterChange = this.handleFilterChange.bind(this);\r\n        this.handleLayoutChange = this.handleLayoutChange.bind(this);\r\n        this.handleRefresh = this.handleRefresh.bind(this);\r\n        this.onPageChange = this.onPageChange.bind(this);\r\n        this.onPageSizeChange = this.onPageSizeChange.bind(this);\r\n        this.onLprInputChange = this.onLprInputChange.bind(this);\r\n        this.editEvent = this.editEvent.bind(this);\r\n        this.updateEvent = this.updateEvent.bind(this);\r\n        this.magnifyEvent = this.magnifyEvent.bind(this);\r\n        this.updateZoomFactor = this.updateZoomFactor.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        AnprService.getIncidents(this.state.filter).then(request => {\r\n            this.setState({\"anprresponse\": request.data, loading: false})\r\n        })\r\n    }\r\n\r\n    //cant use refresh to read from state as state may not have been set\r\n    refreshNow(filter) {\r\n        AnprService.getIncidents(this.state.filter).then(request => {\r\n            this.setState({\"anprresponse\": request.data, loading: false})\r\n        })\r\n    }\r\n\r\n    archiveEvent(event) {\r\n        AnprService.archiveEvent(event).then(request => {\r\n            this.refresh();\r\n        })\r\n    }\r\n\r\n    onLprInputChange(e) {\r\n\r\n        let filter = this.state.filter;\r\n        filter.lpr = e.target.value;\r\n        console.log(filter);\r\n        this.setState({filter: filter})\r\n    }\r\n\r\n    handleFilterChange(data) {\r\n        this.setState({filter: data})\r\n    }\r\n\r\n    handleLayoutChange(data) {\r\n        this.setState({layout: data})\r\n    }\r\n\r\n    handleRefresh() {\r\n        this.refresh();\r\n    }\r\n\r\n    onPageChange(page, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.page = page;\r\n        filter.pageSize = pageSize;\r\n        this.refreshNow(filter)\r\n    }\r\n\r\n    onPageSizeChange(current, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.pageSize = pageSize;\r\n        this.refreshNow(filter);\r\n    }\r\n\r\n    editEvent(event) {\r\n        this.setState({workingEvent: event});\r\n    }\r\n\r\n    magnifyEvent(event) {\r\n        let magnifyEvent = this.state.magnifyEvent;\r\n        magnifyEvent.magnifyEventId = event.id;\r\n\r\n        this.setState({magnifyEvent});\r\n    }\r\n\r\n    updateZoomFactor(zoomFactor) {\r\n        let magnifyEvent = this.state.magnifyEvent;\r\n        magnifyEvent.zoomFactor = zoomFactor;\r\n\r\n        this.setState({magnifyEvent});\r\n    }\r\n\r\n\r\n    updateEvent(anprText) {\r\n\r\n        let {workingEvent, workingEventLoading} = this.state;\r\n        workingEvent.anprText = anprText;\r\n        workingEventLoading = true;\r\n        this.setState({workingEvent, workingEventLoading});\r\n        AnprService.updateEvent(workingEvent).then(request => {\r\n            let {workingEvent, workingEventLoading} = this.state;\r\n            workingEvent.anprText = anprText;\r\n            workingEventLoading = false;\r\n            this.setState({workingEventLoading});\r\n        }).catch(error => {\r\n            alert(\"error in saving\");\r\n            let {workingEventLoading} = this.state;\r\n            workingEventLoading = false;\r\n            this.setState({workingEventLoading});\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let layout = this.state.layout;\r\n        let lpr = this.state.filter.lpr;\r\n\r\n        return (<div>\r\n            <h3>Incidents</h3>\r\n            <Collapse bordered={false} defaultActiveKey={['1']}>\r\n                <Panel header=\"Filter\" key=\"1\">\r\n                    LPR: <Input value={lpr} style={{\"width\": \"200px\"}} onChange={this.onLprInputChange}/> <br/><br/>\r\n                    <GenericFilter handleRefresh={this.refresh} filter={this.state.filter} layout={layout}\r\n                                   handleFilterChange={this.handleFilterChange}\r\n                                   handleLayoutChange={this.handleLayoutChange}/>\r\n                </Panel>\r\n                <div>\r\n                    {layout === \"table\" ? (this.renderTable()) : (this.renderGrid())}\r\n                </div>\r\n            </Collapse>\r\n        </div>)\r\n    }\r\n\r\n    renderGrid() {\r\n\r\n\r\n        if (this.state.loading || !this.state.anprresponse || this.state.anprresponse.totalPage === 0) {\r\n            return <Empty description={false}/>\r\n        }\r\n\r\n        let events = this.state.anprresponse.events;\r\n        let workingEventLoading = this.state.workingEventLoading;\r\n        let workingEvent = this.state.workingEvent;\r\n        let count = this.state.anprresponse.totalPages * this.state.anprresponse.pageSize;\r\n\r\n        let {magnifyEventId, zoomFactor, minZoomFactor, maxZoomFactor} = this.state.magnifyEvent;\r\n        const mid = ((maxZoomFactor - minZoomFactor) / 2).toFixed(5);\r\n        const preColor = zoomFactor >= mid ? '' : 'rgba(0, 0, 0, .45)';\r\n        const nextColor = zoomFactor >= mid ? 'rgba(0, 0, 0, .45)' : '';\r\n        const marks = {\r\n            1: {label: <span><Icon style={{color: preColor}} type=\"zoom-out\"/></span>},\r\n            2: {label: <span>2</span>},\r\n            3: {label: <span>3</span>},\r\n            4: {label: <span>4</span>},\r\n            5: {label: <span><Icon style={{color: nextColor}} type=\"zoom-in\"/></span>,}\r\n        };\r\n        return <div style={{background: '#ECECEC', padding: '5px'}}>\r\n            <Row>\r\n                {\r\n                    events.map((event, index) =>\r\n                        <Col xl={{span: 8}} lg={{span: 12}} md={{span: 12}} sm={{span: 24}} xs={{span: 24}} key={index}>\r\n                            <Card\r\n                                style={{margin: \"5px\"}}\r\n                                title={\r\n                                    <div>\r\n                                        {(event.direction && event.direction === \"rev\") ?\r\n                                            <Tag color=\"#f50\">Reverse</Tag> : null}\r\n                                        {(event.helmet) ? <Tag color=\"#f50\">Without helmet</Tag> : null}\r\n                                    </div>\r\n                                }\r\n                                extra={<Dropdown overlay={<Menu>\r\n                                    <Menu.Item key=\"0\" onClick={() => this.magnifyEvent(event)}><Icon type=\"zoom-in\"/>Zoom\r\n                                        image\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"1\">\r\n                                        <a\r\n                                            title={\"click here to download\"}\r\n                                            href={\"/public/anpr/vehicle/\" + event.id + \"/image.jpg\"}\r\n                                            download={true}><Icon type=\"download\"/>{' '} Full\r\n                                            image</a>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"2\">\r\n                                        <a\r\n                                            title={\"click here to download\"}\r\n                                            href={\"/public/anpr/lpr/\" + event.id + \"/image.jpg\"}\r\n                                            download={true}><Icon type=\"download\"/>{' '} Cropped image</a>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"3\">\r\n                                        <Button type=\"danger\" onClick={() => this.archiveEvent(event)}><Icon\r\n                                            type=\"warning\"/>{' '}\r\n                                            Archive\r\n                                        </Button>\r\n                                    </Menu.Item>\r\n\r\n                                </Menu>}>\r\n                                    <Button>\r\n                                        More <Icon type=\"down\"/>\r\n                                    </Button>\r\n                                </Dropdown>}\r\n                                bordered={true}\r\n                                cover={(magnifyEventId === event.id) ?\r\n                                    <Magnifier src={\"/public/anpr/vehicle/\" + event.id + \"/image.jpg\"}\r\n                                               zoomFactor={zoomFactor}/> : <img alt=\"event\"\r\n                                                                                src={\"/public/anpr/vehicle/\" + event.id + \"/image.jpg\"}/>\r\n\r\n                                }\r\n                            >\r\n                                <div>\r\n                                    {(magnifyEventId === event.id) ?\r\n                                        <Slider\r\n                                            marks={marks}\r\n                                            min={minZoomFactor}\r\n                                            max={maxZoomFactor}\r\n                                            onChange={this.updateZoomFactor}\r\n                                            value={typeof zoomFactor === 'number' ? zoomFactor : 0}\r\n                                        />\r\n                                        : <div style={{height: \"54px\", textAlign: \"center\"}}>\r\n                                            <Button size=\"small\" type=\"dashed\" onClick={() => this.magnifyEvent(event)}>\r\n                                                <Icon type=\"zoom-in\"/>Zoom Image\r\n                                            </Button>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                <div style={{textAlign: \"center\"}}>\r\n                                    <img alt=\"event\"\r\n                                         src={\"/public/anpr/lpr/\" + event.id + \"/image.jpg\"}/>\r\n                                </div>\r\n                                <div style={{marginTop: \"5px\", textAlign: \"center\"}}\r\n                                     onClick={() => this.editEvent(event)}>\r\n                                    <Paragraph\r\n                                        strong\r\n                                        editable={{onChange: this.updateEvent}}\r\n                                        copyable>{event.anprText}</Paragraph>\r\n                                    <Text\r\n                                        type=\"secondary\">{(workingEventLoading && workingEvent.id === event.id) ? \"saving...\" : \"\"}</Text>\r\n                                    <div>\r\n                                        <Text code> <Moment format=\"ll\">{event.eventDate}</Moment>{' '}|{' '}<Moment\r\n                                            format=\"LTS\">{event.eventDate}</Moment></Text>\r\n                                    </div>\r\n                                    <div>\r\n                                        <Text code><Icon type=\"environment\"/> {event.location}</Text>\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </Card>\r\n                        </Col>\r\n                    )\r\n                }\r\n            </Row>\r\n            <div style={{textAlign: \"right\"}}>\r\n                <Pagination onChange={this.onPageChange} onShowSizeChange={this.onPageSizeChange} showSizeChanger\r\n                            showQuickJumper\r\n                            defaultCurrent={1} total={count} current={this.state.filter.page}\r\n                            pageSize={this.state.filter.pageSize}/>\r\n            </div>\r\n\r\n        </div>\r\n    }\r\n\r\n    renderTable() {\r\n\r\n        if (this.state.loading || !this.state.events || this.state.events.Total === 0) {\r\n            return <Empty description={false}/>\r\n        }\r\n\r\n        let events = this.state.anprresponse.events;\r\n        let count = this.state.anprresponse.totalPages * this.state.anprresponse.pageSize;\r\n\r\n        const paginationOptions = {\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            onShowSizeChange: this.onPageSizeChange,\r\n            onChange: this.onPageChange,\r\n            total: count\r\n        };\r\n\r\n        const pagination = {\r\n            ...paginationOptions,\r\n            total: count,\r\n            current: this.state.filter.page,\r\n            pageSize: this.state.filter.pageSize\r\n        };\r\n\r\n        return (\r\n            <Table dataSource={events} pagination={pagination}>\r\n                <Column title=\"Location\" dataIndex=\"location\" key=\"location\"\r\n                        render={location => location}/>\r\n                <Column title=\"Date\" dataIndex=\"eventDate\" key=\"eventDate\"\r\n                        render={eventDate => (<Moment format=\"L\">{eventDate}</Moment>)}/>\r\n                <Column title=\"Time\" dataIndex=\"eventDate\" key=\"eventTime\"\r\n                        render={eventDate => (<Moment format=\"LTS\">{eventDate}</Moment>)}/>\r\n                <Column title=\"LPR\" dataIndex=\"anprText\" key=\"anprText\"\r\n                        render={anprText => anprText}/>\r\n                <Column title=\"image\" dataIndex=\"id\" key=\"anprimage\"\r\n                        render={id => (\r\n                            <a title={\"click here to download\"} href={\"/public/anpr/lpr/\" + id + \"/image.jpg\"}\r\n                               download={true}>\r\n                                <img alt=\"event\"\r\n                                     src={\"/public/anpr/lpr/\" + id + \"/image.jpg\"}/></a>)}/>\r\n                <Column title=\"direction\" dataIndex=\"direction\" key=\"direction\"\r\n                        render={direction => direction}/>\r\n                <Column title=\"Helmet\" dataIndex=\"helmet\" key=\"helmet\"\r\n                        render={helmet => helmet ? <span>No</span> : <span>Yes</span>}/>\r\n                <Column title=\"Action\"\r\n                        key=\"action\"\r\n                        render={(text, event) => (\r\n                            <Button type=\"danger\" onClick={() => this.archiveEvent(event)}><Icon type=\"warning\"/>{' '}\r\n                                Archive</Button>\r\n                        )}\r\n                />\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport {\r\n  Empty,\r\n  Icon,\r\n  Spin,\r\n  Table,\r\n  Timeline,\r\n  Modal,\r\n  Button,\r\n  Typography,\r\n} from \"antd\";\r\nimport Moment from \"react-moment\";\r\n\r\nimport AnprService from \"../../services/AnprService\";\r\n\r\nconst {Paragraph, Text} = Typography;\r\nconst {Column} = Table;\r\nexport default class IncidentTimeline extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n          loading:false,\r\n          anprresponse: {},\r\n          filter:{\r\n            currentPage: 1,\r\n            pageSizes: 24,\r\n            lpr: \"\",\r\n            incidentType:\"\"\r\n          }\r\n        };\r\n\r\n       this.toggleVisible = this.toggleVisible.bind(this);\r\n       this.refreshBriefIncidentsNow = this.refreshBriefIncidentsNow.bind(this);\r\n       this.onModalPageChange = this.onModalPageChange.bind(this);\r\n              this.onModalPageSizeChange = this.onModalPageSizeChange.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        let filter = this.state.filter;\r\n        if((filter.lpr !== nextProps.lpr) || (filter.incidentType !== nextProps.incidentType)) {\r\n            filter.lpr = nextProps.lpr;\r\n            filter.incidentType = nextProps.incidentType;\r\n            this.setState({filter},()=>{\r\n              this.refreshBriefIncidentsNow();\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n\r\n    toggleVisible(){\r\n        let filter = this.state.filter;\r\n                filter.currentPage = 1;\r\n                this.setState({filter: filter});\r\n                this.props.toggleVisible();\r\n\r\n    }\r\n\r\n    refreshBriefIncidentsNow() {\r\n\r\n           let {loading, filter, anprresponse} = this.state;\r\n\r\n           if(filter.lpr && filter.incidentType){\r\n              this.setState({loading : true});\r\n              AnprService.getBriefIncidentsRepeated(filter).then(request =>\r\n              {\r\n                loading = false;\r\n                anprresponse= request.data;\r\n                this.setState({loading, anprresponse});\r\n              }).catch(error=> {\r\n               loading = false;\r\n               this.setState({loading});\r\n               alert(\"Something went wrong\");\r\n                 });\r\n           }\r\n\r\n    }\r\n    onModalPageChange(currentPage, pageSizes){\r\n             let filter = this.state.filter;\r\n             filter.currentPage = currentPage;\r\n             filter.pageSizes = pageSizes;\r\n             this.refreshBriefIncidentsNow(filter);\r\n          }\r\n\r\n          onModalPageSizeChange(current, pageSizes) {\r\n               let filter = this.state.filter;\r\n               filter.pageSizes = pageSizes;\r\n               this.refreshBriefIncidentsNow(filter);\r\n            }\r\n\r\n    render(){\r\n         let events = this.state.anprresponse.events;\r\n         let count = this.state.anprresponse.totalPages * this.state.anprresponse.pageSizes;\r\n\r\n                  const paginationOption = {\r\n                         showSizeChanger: false,\r\n                         showQuickJumper: false,\r\n                         pageSize:5,\r\n                         showLessItems: true,\r\n                         onShowSizeChange: this.onModalPageSizeChange,\r\n                         onChange: this.onModalPageChange,\r\n                         total: count\r\n                     };\r\n\r\n                     const pagination = {\r\n                         ...paginationOption,\r\n                         total: count,\r\n                         current: this.state.filter.currentPage,\r\n                         pageSizes: this.state.filter.pageSizes\r\n                     };\r\n\r\n         if (this.state.loading)\r\n         {\r\n            const antIcon = <Icon type=\"loading\" style={{fontSize: 24}} spin/>;\r\n            return <Spin indicator={antIcon}/>\r\n         }\r\n\r\n         if (!this.state.anprresponse.events){\r\n                   return <Empty description={false}/>\r\n         }\r\n\r\n        return <Modal\r\n\r\n                title={<div>{this.state.filter.incidentType}<Paragraph copyable>{this.state.filter.lpr}</Paragraph></div> }\r\n                visible={this.props.visible}\r\n                onCancel={this.toggleVisible}\r\n                onClose={this.toggleVisible}\r\n                footer={[\r\n                         <Button key=\"close\"  type=\"primary\" onClick={this.toggleVisible}>\r\n                           Close\r\n                         </Button>\r\n                        ]}\r\n                >\r\n                 <div>\r\n                                               <Table dataSource={events} pagination={pagination}>\r\n                                                    <Column title=\"When and Where\"\r\n                                                             render={(text, record, index)=> <Timeline.Item>\r\n                                                           <div>\r\n                                                             <p><Icon type=\"clock-circle\" />  <Moment format=\"lll\">{record.eventDate}</Moment></p>\r\n                                                             <p><Icon type=\"environment\"/> {record.location}</p>\r\n                                                             <a title={\"click here to download\"}\r\n                                                               href={\"/public/anpr/lpr/\" + record.id + \"/image.jpg\"}\r\n                                                             download={true}>\r\n                                                             <img alt=\"event\"\r\n                                                                 src={\"/public/anpr/lpr/\" + record.id + \"/image.jpg\"}style={{width:160,height:\"auto\"}}/>\r\n                                                             </a>\r\n                                                           </div>\r\n                                                             </Timeline.Item>\r\n                                                             }/>\r\n                                                    <Column  title=\"Captured Image\" dataIndex=\"id\" key=\"anprimage\"\r\n                                                              render={id => (\r\n                                                                      <a title={\"click here to download\"}  href={\"/public/anpr/vehicle/\" + id + \"/image.jpg\"}\r\n                                                                      download={true}>\r\n                                                                      <img alt=\"event\"\r\n                                                                      src={\"/public/anpr/vehicle/\" + id + \"/image.jpg\" } style={{width:200,height:\"auto\"}}/></a>)}/>\r\n                                               </Table>\r\n                                            </div>\r\n               </Modal>\r\n    }\r\n}","import React, {Component} from \"react\"\r\nimport {Button, Card, Col, Empty, Icon, Input, Row, Spin, Table} from \"antd\";\r\nimport AnprService from \"../../services/AnprService\";\r\nimport IncidentTimeline from \"./IncidentTimeline\";\r\n\r\nconst {Column} = Table;\r\nconst {Search} = Input;\r\n\r\nconst tabList = [\r\n    {\r\n        key: 'Reverse',\r\n        tab: 'Reverse',\r\n    },\r\n    {\r\n        key: 'Helmet-Missing',\r\n        tab: 'Helmet-Missing',\r\n    },\r\n];\r\n\r\nexport default class IncidentRepeatedView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeTab: \"Reverse\",\r\n            visible: false,\r\n            timelineLpr: \"\",\r\n            filter: {\r\n                lpr: \"\"\r\n            },\r\n            helmetMissing: {\r\n                loading: false,\r\n                anprresponse: {},\r\n                filter: {\r\n                    pages: 1,\r\n                    pageSizes: 24,\r\n                    lpr: \"\",\r\n                    incidentType: \"\"\r\n                }\r\n            },\r\n            briefIncident: {\r\n                loading: false,\r\n                anprresponse: {},\r\n                filter: {\r\n                    lpr: \"\",\r\n                }\r\n            },\r\n            reverseDirection: {\r\n                loading: false,\r\n                anprresponse: {},\r\n                filter: {\r\n                    pagess: 1,\r\n                    pageSizes: 24,\r\n                    lpr: \"\",\r\n                    incidentType: \"\"\r\n                }\r\n            }\r\n        };\r\n\r\n        this.refresh = this.refresh.bind(this);\r\n        this.handleRefresh = this.handleRefresh.bind(this);\r\n        this.onHelmetMissingPageChange = this.onHelmetMissingPageChange.bind(this);\r\n        this.onReverseDirectionPageChange = this.onReverseDirectionPageChange.bind(this);\r\n        this.onHelmetMissingPageSizeChange = this.onHelmetMissingPageSizeChange.bind(this);\r\n        this.onReverseDirectionPageSizeChange = this.onReverseDirectionPageSizeChange.bind(this);\r\n        this.handleTabClick = this.handleTabClick.bind(this);\r\n        this.refreshHelmetMissingIncidentsNow = this.refreshHelmetMissingIncidentsNow.bind(this);\r\n        this.refreshReverseDirectionIncidentsNow = this.refreshReverseDirectionIncidentsNow.bind(this);\r\n        this.onLprInputChange = this.onLprInputChange.bind(this);\r\n        this.search = this.search.bind(this);\r\n        this.onTabChange = this.onTabChange.bind(this);\r\n        this.toggleIncidentTimelineModal = this.toggleIncidentTimelineModal.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    handleTabClick(tabIndex) {\r\n        this.setState({\r\n            activeTabIndex:\r\n                tabIndex === this.state.activeTabIndex\r\n                    ? this.props.defaultActiveTabIndex\r\n                    : tabIndex\r\n        });\r\n    }\r\n\r\n    refresh() {\r\n        this.refreshHelmetMissingIncidentsNow();\r\n        this.refreshReverseDirectionIncidentsNow();\r\n    }\r\n\r\n    showModal = (lpr) => {\r\n        this.setState({\r\n            visible: true,\r\n            timelineLpr: lpr\r\n        });\r\n    }\r\n\r\n    toggleIncidentTimelineModal() {\r\n        let visible = this.state.visible;\r\n        this.setState({visible: !visible});\r\n    }\r\n\r\n    //cant use refresh to read from state as state may not have been set\r\n    refreshHelmetMissingIncidentsNow() {\r\n\r\n        let helmetMissing = this.state.helmetMissing;\r\n        helmetMissing.loading = true;\r\n        this.setState({helmetMissing: helmetMissing});\r\n\r\n        AnprService.getHelmetMissingIncidentsRepeated(this.state.helmetMissing.filter).then(request => {\r\n            helmetMissing.loading = false;\r\n            helmetMissing.anprresponse = request.data;\r\n            this.setState({helmetMissing: helmetMissing});\r\n        }).catch(error => {\r\n            helmetMissing.loading = false;\r\n            this.setState({helmetMissing: helmetMissing});\r\n            alert(\"Something went wrong\");\r\n        });\r\n    }\r\n\r\n    refreshReverseDirectionIncidentsNow() {\r\n        let reverseDirection = this.state.reverseDirection;\r\n        reverseDirection.loading = true;\r\n        this.setState({reverseDirection: reverseDirection});\r\n        AnprService.getReverseDirectionIncidentsRepeated(this.state.reverseDirection.filter).then(request => {\r\n            reverseDirection.loading = false;\r\n            reverseDirection.anprresponse = request.data;\r\n            this.setState({reverseDirection: reverseDirection});\r\n        }).catch(error => {\r\n            reverseDirection.loading = false;\r\n            this.setState({hasError: true});\r\n            alert(\"Something went wrong\");\r\n        });\r\n    }\r\n\r\n\r\n    handleRefresh() {\r\n        this.refresh();\r\n    }\r\n\r\n    onLprInputChange(e) {\r\n        let filter = this.state.filter;\r\n        filter.lpr = e.target.value;\r\n        this.setState({filter: filter})\r\n    }\r\n\r\n    search(searchText) {\r\n        let {filter, reverseDirection, helmetMissing} = this.state;\r\n        filter.lpr = searchText;\r\n        reverseDirection.filter.lpr = searchText;\r\n        helmetMissing.filter.lpr = searchText;\r\n        this.setState({filter, reverseDirection, helmetMissing}, () => {\r\n            this.refresh();\r\n        });\r\n    }\r\n\r\n    onHelmetMissingPageChange(page, pageSize) {\r\n        let filter = this.state.helmetMissing.filter;\r\n        filter.page = page;\r\n        filter.pageSize = pageSize;\r\n        this.refreshHelmetMissingIncidentsNow(filter);\r\n    }\r\n\r\n    onReverseDirectionPageChange(pages, pageSizes) {\r\n        let filter = this.state.reverseDirection.filter;\r\n        filter.pages = pages;\r\n        filter.pageSizes = pageSizes;\r\n        this.refreshReverseDirectionIncidentsNow(filter);\r\n    }\r\n\r\n    onHelmetMissingPageSizeChange(current, pageSize) {\r\n        let filter = this.state.helmetMissing.filter;\r\n        filter.pageSize = pageSize;\r\n        this.refreshHelmetMissingIncidentsNow(filter);\r\n    }\r\n\r\n    onReverseDirectionPageSizeChange(current, pageSizes) {\r\n        let filter = this.state.reverseDirection.filter;\r\n        filter.pageSizes = pageSizes;\r\n        this.refreshReverseDirectionIncidentsNow(filter);\r\n    }\r\n\r\n    onTabChange(key) {\r\n        this.setState({activeTab: key})\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n\r\n                </div>\r\n\r\n                <Card\r\n                    style={{width: '100%'}}\r\n                    title={<Row>\r\n                        <Col xl={{span: 16}} lg={{span: 16}} md={{span: 12}} sm={{span: 12}} xs={{span: 12}}>\r\n                            <h4>Repeated Incidents</h4>\r\n                        </Col>\r\n                        <Col xl={{span: 8}} lg={{span: 8}} md={{span: 12}} sm={{span: 12}} xs={{span: 12}}>\r\n\r\n                            <Search allowClear\r\n                                    placeholder=\"Search Vehicle \"\r\n                                    onChange={this.onLprInputChange}\r\n                                    style={{textAlign: \"right\"}}\r\n                                    onSearch={value => this.search(value)} enterButton\r\n                            />\r\n                        </Col>\r\n                    </Row>}\r\n\r\n                    tabList={tabList}\r\n                    activeTabKey={this.state.activeTab}\r\n\r\n                    onTabChange={key => {\r\n                        this.onTabChange(key);\r\n                    }}\r\n                >\r\n                    {this.state.activeTab === \"Reverse\" ? (this.renderReverseData()) : this.renderHelmetMissingData()}\r\n\r\n                    <IncidentTimeline\r\n                        lpr={this.state.timelineLpr}\r\n                        incidentType={this.state.activeTab}\r\n                        visible={this.state.visible}\r\n                        toggleVisible={this.toggleIncidentTimelineModal}\r\n                    />\r\n                </Card>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderReverseData() {\r\n\r\n\r\n        let events = this.state.reverseDirection.anprresponse.events;\r\n        let count = this.state.reverseDirection.anprresponse.totalPages * this.state.reverseDirection.anprresponse.pageSizes;\r\n\r\n        const paginationOption = {\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            onShowSizeChange: this.onReverseDirectionPageSizeChange,\r\n            onChange: this.onReverseDirectionPageChange,\r\n            total: count\r\n        };\r\n\r\n        const pagination = {\r\n            ...paginationOption,\r\n            total: count,\r\n            current: this.state.reverseDirection.filter.pages,\r\n            pageSizes: this.state.reverseDirection.filter.pageSizes\r\n        };\r\n\r\n        if (this.state.reverseDirection.loading) {\r\n            const antIcon = <Icon type=\"loading\" style={{fontSize: 24}} spin/>;\r\n            return <Spin indicator={antIcon}/>\r\n        }\r\n\r\n        if (!this.state.reverseDirection.anprresponse.events) {\r\n            return <Empty description={false}/>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Table dataSource={events} pagination={pagination}>\r\n\r\n                    <Column title=\"LPR\" dataIndex=\"anprText\" key=\"anprText\"\r\n                            render={anprText => <Button onClick={() => this.showModal(anprText)}>{anprText}</Button>}/>\r\n\r\n                    <Column title=\"Repeated Times\" dataIndex=\"repeatedTimes\" key=\"repeatedTimes\"\r\n                            render={repeatedTimes => repeatedTimes}/>\r\n                </Table>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    renderHelmetMissingData() {\r\n\r\n\r\n        let events = this.state.helmetMissing.anprresponse.events;\r\n        let count = this.state.helmetMissing.anprresponse.totalPages * this.state.helmetMissing.anprresponse.pageSize;\r\n\r\n        const paginationOptions = {\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            onShowSizeChange: this.onHelmetMissingPageSizeChange,\r\n            onChange: this.onHelmetMissingPageChange,\r\n            total: count\r\n        };\r\n\r\n        const pagination = {\r\n            ...paginationOptions,\r\n            total: count,\r\n            current: this.state.helmetMissing.filter.page,\r\n            pageSize: this.state.helmetMissing.filter.pageSize\r\n        };\r\n\r\n        if (this.state.helmetMissing.loading) {\r\n            const antIcon = <Icon type=\"loading\" style={{fontSize: 24}} spin/>;\r\n            return <Spin indicator={antIcon}/>\r\n        }\r\n\r\n        if (!this.state.helmetMissing.anprresponse.events) {\r\n            return <Empty description={false}/>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Table dataSource={events} pagination={pagination}>\r\n\r\n                    <Column title=\"LPR\" dataIndex=\"anprText\" key=\"anprText\"\r\n                            render={anprText => <Button onClick={() => this.showModal(anprText)}>{anprText}</Button>}/>\r\n                    <Column title=\"Repeated Times\" dataIndex=\"repeatedTimes\" key=\"repeatedTimes\"\r\n                            render={repeatedTimes => repeatedTimes}/>\r\n                </Table>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","import axios from \"./axios\";\r\n\r\nclass HotListVehicleService {\r\n\r\n    static Instance() {\r\n        return new HotListVehicleService()\r\n    }\r\n\r\n    getHotListedVehicles(filter) {\r\n        return axios.post('/api/hotlist/vehicle/list', filter);\r\n    }\r\n\r\n    saveHotListedVehicle(vehicle) {\r\n        return axios.post('/api/hotlist/vehicle/save', vehicle);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default HotListVehicleService.Instance()","import React, {Component} from \"react\";\r\nimport {\r\n    Card,\r\n    Col,\r\n    Icon,\r\n    Pagination,\r\n    Row,\r\n    Modal,\r\n    message, Input, Typography, Spin, Checkbox, Tag\r\n} from 'antd';\r\n\r\nimport HotListVehicleService from \"../../services/HotListVehicleService\";\r\n\r\nconst {Search} = Input;\r\nconst {Text} = Typography;\r\n\r\nexport default class HotListedVehiclesList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeModal: \"\",\r\n            hotListedVehicleResponse: {},\r\n            filter: {\r\n                page: 1,\r\n                pageSize: 40,\r\n                lpr: \"\"\r\n            },\r\n            workingVehicle: {\r\n                id: undefined,\r\n                lpr: \"\",\r\n                archived: false\r\n            },\r\n            loading: {\r\n                vehiclesList: false\r\n            }\r\n        };\r\n\r\n        this.refresh = this.refresh.bind(this);\r\n        this.onPageChange = this.onPageChange.bind(this);\r\n        this.onPageSizeChange = this.onPageSizeChange.bind(this);\r\n        this.openHotListVehicleForm = this.openHotListVehicleForm.bind(this);\r\n        this.handleSubmitWorkingHotListVehicle = this.handleSubmitWorkingHotListVehicle.bind(this);\r\n        this.handleCancelWorkingHotListVehicle = this.handleCancelWorkingHotListVehicle.bind(this);\r\n        this.archiveHotListedVehicle = this.archiveHotListedVehicle.bind(this);\r\n        this.workingVehicleOnChange = this.workingVehicleOnChange.bind(this);\r\n        this.search = this.search.bind(this);\r\n        this.onLprInputChange = this.onLprInputChange.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh(this.state.filter);\r\n    }\r\n\r\n    refresh(filter) {\r\n        let loading = this.state.loading;\r\n        loading.vehiclesList = true;\r\n        this.setState({loading});\r\n        HotListVehicleService.getHotListedVehicles(filter).then(response => {\r\n            loading.vehiclesList = false;\r\n            this.setState({hotListedVehicleResponse: response.data, loading})\r\n        }).catch(error => {\r\n            loading.vehiclesList = false;\r\n            this.setState({loading});\r\n            message.error('Something went wrong!');\r\n        })\r\n    }\r\n\r\n\r\n    archiveHotListedVehicle(event) {\r\n        HotListVehicleService.archiveHotListedVehicle(event).then(request => {\r\n            this.refresh(this.state.filter);\r\n            message.success('Vehicle archived!');\r\n        }).catch(error => {\r\n            message.error('Something went wrong!');\r\n        })\r\n    }\r\n\r\n\r\n    onPageChange(page, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.page = page;\r\n        filter.pageSize = pageSize;\r\n        this.refresh(filter)\r\n    }\r\n\r\n    onPageSizeChange(current, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.pageSize = pageSize;\r\n        this.refresh(filter);\r\n    }\r\n\r\n\r\n    confirm(e) {\r\n        console.log(e);\r\n        message.success('Click on Yes');\r\n    }\r\n\r\n    cancel(e) {\r\n        console.log(e);\r\n        message.error('Click on No');\r\n    }\r\n\r\n    openHotListVehicleForm(vehicle) {\r\n        let workingVehicle = {\r\n            id: undefined,\r\n            lpr: \"\",\r\n            archived: false\r\n        };\r\n        if (vehicle) {\r\n            workingVehicle.id = vehicle.id;\r\n            workingVehicle.lpr = vehicle.lpr;\r\n            workingVehicle.archived = vehicle.archived;\r\n        }\r\n\r\n        this.setState({\r\n            activeModal: \"workingVehicle\", workingVehicle: workingVehicle\r\n        });\r\n    };\r\n\r\n    workingVehicleOnChange(e) {\r\n        let {workingVehicle} = this.state;\r\n\r\n        switch (e.target.type) {\r\n            case \"checkbox\":\r\n                workingVehicle[e.target.name] = e.target.checked;\r\n                break;\r\n            default:\r\n                workingVehicle[e.target.name] = e.target.value;\r\n                break;\r\n\r\n        }\r\n        this.setState({workingVehicle: workingVehicle});\r\n    }\r\n\r\n    handleSubmitWorkingHotListVehicle(e) {\r\n        HotListVehicleService.saveHotListedVehicle(this.state.workingVehicle).then(response => {\r\n            this.refresh(this.state.filter);\r\n            let workingVehicle = {\r\n                id: undefined,\r\n                lpr: \"\",\r\n                archived: false\r\n            };\r\n            this.setState({activeModal: \"\", workingVehicle});\r\n            message.success('Saved!');\r\n        }).catch(error => {\r\n            message.error('Something went wrong!');\r\n        })\r\n    };\r\n\r\n    handleCancelWorkingHotListVehicle(e) {\r\n        let workingVehicle = {\r\n            id: undefined,\r\n            lpr: \"\",\r\n            archived: false\r\n        };\r\n        this.setState({\r\n            activeModal: \"\",\r\n            workingVehicle\r\n        });\r\n    };\r\n\r\n    search(searchText) {\r\n        let {filter} = this.state;\r\n        filter.lpr = searchText;\r\n        this.setState({filter: filter});\r\n        this.refresh(filter)\r\n    }\r\n\r\n    onLprInputChange(e) {\r\n\r\n        let filter = this.state.filter;\r\n        filter.lpr = e.target.value;\r\n        this.setState({filter: filter})\r\n    }\r\n\r\n    render() {\r\n        let {filter, hotListedVehicleResponse, workingVehicle, loading} = this.state;\r\n\r\n        let vehicles = hotListedVehicleResponse.events;\r\n        let count = hotListedVehicleResponse.totalPages * hotListedVehicleResponse.pageSize;\r\n\r\n\r\n        if (loading.vehiclesList) {\r\n            const antIcon = <Icon type=\"loading\" style={{fontSize: 24}} spin/>;\r\n            return <Spin indicator={antIcon}/>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col xl={{span: 8}} lg={{span: 8}} md={{span: 16}} sm={{span: 12}} xs={{span: 12}}>\r\n                        <Search allowClear placeholder=\"input search text\" name=\"lpr\" value={filter.lpr}\r\n                                onChange={this.onLprInputChange} onSearch={value => this.search(value)} enterButton/>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <br/>\r\n                <div>\r\n                    <div>\r\n                        <Row>\r\n                            <Col xl={{span: 3}} lg={{span: 4}} md={{span: 6}} sm={{span: 8}} xs={{span: 16}}\r\n                                 key={\"new\"}>\r\n                                <Card style={{backgroundColor: \"#40a9ff\"}} hoverable\r\n                                      onClick={() => this.openHotListVehicleForm(undefined)}>\r\n                                    <div style={{textAlign: \"center\"}}>\r\n                                        <Text style={{color: \"white\"}} strong>\r\n                                            <Icon type=\"plus\"/> New</Text>\r\n                                    </div>\r\n                                </Card>\r\n                            </Col>\r\n                            {(vehicles || []).map((vehicle, index) =>\r\n                                <Col xl={{span: 3}} lg={{span: 4}} md={{span: 6}} sm={{span: 8}} xs={{span: 16}}\r\n                                     key={index}>\r\n                                    <div style={{textAlign: \"center\"}}>\r\n                                        <Card hoverable onClick={() => this.openHotListVehicleForm(vehicle)}\r\n                                              style={{backgroundColor: vehicle.archived ? \"#fafafa\" : \"\"}}>\r\n                                            <div style={{textAlign: \"center\"}}>\r\n                                                <Text delete={vehicle.archived} strong>\r\n                                                    {vehicle.lpr}\r\n                                                </Text>\r\n                                            </div>\r\n                                        </Card>\r\n                                    </div>\r\n                                </Col>\r\n                            )}\r\n                        </Row>\r\n\r\n                        <Modal\r\n                            title={<div><Tag>{workingVehicle.id ? \"EDIT\" : \"NEW\"}</Tag>{' '}<Text\r\n                                copyable={workingVehicle.lpr.length > 0}>{workingVehicle.lpr}</Text></div>}\r\n                            visible={this.state.activeModal === \"workingVehicle\"}\r\n                            onOk={this.handleSubmitWorkingHotListVehicle}\r\n                            onCancel={this.handleCancelWorkingHotListVehicle}\r\n                        >\r\n                            <Checkbox onChange={this.workingVehicleOnChange} name={\"archived\"}\r\n                                      checked={workingVehicle.archived}>Archive</Checkbox>\r\n                            <br/>\r\n                            <br/>\r\n                            <Input onChange={this.workingVehicleOnChange} name={\"lpr\"} value={workingVehicle.lpr}\r\n                                   size=\"large\"\r\n                                   placeholder=\"Enter vehicle number here\"/>\r\n\r\n\r\n                        </Modal>\r\n\r\n\r\n                    </div>\r\n                    {(hotListedVehicleResponse && hotListedVehicleResponse.totalPages > 1) ?\r\n                        <div style={{textAlign: \"right\"}}>\r\n                            <Pagination onChange={this.onPageChange} onShowSizeChange={this.onPageSizeChange}\r\n                                        showSizeChanger\r\n                                        showQuickJumper\r\n                                        defaultCurrent={1} total={count} current={this.state.filter.page}\r\n                                        pageSize={this.state.filter.pageSize}/>\r\n                        </div> : null}\r\n\r\n\r\n                </div>\r\n\r\n            </div>)\r\n    }\r\n\r\n\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {\r\n    Card,\r\n    Col,\r\n    Collapse,\r\n    Empty,\r\n    Icon,\r\n    Pagination,\r\n    Row,\r\n    Table,\r\n    Tag,\r\n    Input, Button, Menu, Dropdown, Typography, Slider\r\n} from 'antd';\r\nimport GenericFilter from \"../components/GenericFilter\";\r\nimport Moment from \"react-moment\";\r\nimport AnprService from \"../services/AnprService\";\r\nimport Magnifier from \"react-magnifier\";\r\nimport HotListedVehiclesList from \"../components/HotListedVehicles/HotListedVehiclesList\";\r\n\r\n\r\nconst {Column} = Table;\r\nconst {Panel} = Collapse;\r\nconst {Paragraph, Text} = Typography;\r\nconst tabList = [\r\n    {\r\n        key: 'incidents',\r\n        tab: 'Incidents',\r\n    },\r\n    {\r\n        key: 'vehicles',\r\n        tab: 'Vehicles',\r\n    },\r\n];\r\n\r\n\r\nexport default class IncidentHotlistView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeTab: \"incidents\",\r\n            loading: true,\r\n            layout: \"list\",\r\n            events: {},\r\n            filter: {\r\n                page: 1,\r\n                pageSize: 12\r\n            },\r\n            workingEvent: {},\r\n            workingEventLoading: false,\r\n            magnifyEvent: {\r\n                magnifyEventId: \"\",\r\n                zoomFactor: 2,\r\n                minZoomFactor: 1,\r\n                maxZoomFactor: 5\r\n            },\r\n\r\n        };\r\n\r\n        this.refresh = this.refresh.bind(this);\r\n        this.handleFilterChange = this.handleFilterChange.bind(this);\r\n        this.handleLayoutChange = this.handleLayoutChange.bind(this);\r\n        this.handleRefresh = this.handleRefresh.bind(this);\r\n        this.onPageChange = this.onPageChange.bind(this);\r\n        this.onPageSizeChange = this.onPageSizeChange.bind(this);\r\n        this.onLprInputChange = this.onLprInputChange.bind(this);\r\n        this.editEvent = this.editEvent.bind(this);\r\n        this.updateEvent = this.updateEvent.bind(this);\r\n        this.magnifyEvent = this.magnifyEvent.bind(this);\r\n        this.updateZoomFactor = this.updateZoomFactor.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        AnprService.getIncidentsHotlisted(this.state.filter).then(request => {\r\n            this.setState({\"anprresponse\": request.data, loading: false})\r\n        })\r\n    }\r\n\r\n    //cant use refresh to read from state as state may not have been set\r\n    refreshNow(filter) {\r\n        AnprService.getIncidentsHotlisted(this.state.filter).then(request => {\r\n            this.setState({\"anprresponse\": request.data, loading: false})\r\n        })\r\n    }\r\n\r\n    archiveEvent(event) {\r\n        AnprService.archiveEvent(event).then(request => {\r\n            this.refresh();\r\n        })\r\n    }\r\n\r\n    onLprInputChange(e) {\r\n\r\n        let filter = this.state.filter;\r\n        filter.lpr = e.target.value;\r\n        console.log(filter);\r\n        this.setState({filter: filter})\r\n    }\r\n\r\n    handleFilterChange(data) {\r\n        this.setState({filter: data})\r\n    }\r\n\r\n    handleLayoutChange(data) {\r\n        this.setState({layout: data})\r\n    }\r\n\r\n    handleRefresh() {\r\n        this.refresh();\r\n    }\r\n\r\n    onPageChange(page, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.page = page;\r\n        filter.pageSize = pageSize;\r\n        this.refreshNow(filter)\r\n    }\r\n\r\n    onPageSizeChange(current, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.pageSize = pageSize;\r\n        this.refreshNow(filter);\r\n    }\r\n\r\n    editEvent(event) {\r\n        this.setState({workingEvent: event});\r\n    }\r\n\r\n    magnifyEvent(event) {\r\n        let magnifyEvent = this.state.magnifyEvent;\r\n        magnifyEvent.magnifyEventId = event.id;\r\n\r\n        this.setState({magnifyEvent});\r\n    }\r\n\r\n    updateZoomFactor(zoomFactor) {\r\n        let magnifyEvent = this.state.magnifyEvent;\r\n        magnifyEvent.zoomFactor = zoomFactor;\r\n\r\n        this.setState({magnifyEvent});\r\n    }\r\n\r\n\r\n    updateEvent(anprText) {\r\n\r\n        let {workingEvent, workingEventLoading} = this.state;\r\n        workingEvent.anprText = anprText;\r\n        workingEventLoading = true;\r\n        this.setState({workingEvent, workingEventLoading});\r\n        AnprService.updateEvent(workingEvent).then(request => {\r\n            let {workingEvent, workingEventLoading} = this.state;\r\n            workingEvent.anprText = anprText;\r\n            workingEventLoading = false;\r\n            this.setState({workingEventLoading});\r\n        }).catch(error => {\r\n            alert(\"error in saving\");\r\n            let {workingEventLoading} = this.state;\r\n            workingEventLoading = false;\r\n            this.setState({workingEventLoading});\r\n        })\r\n    }\r\n\r\n    onTabChange(key) {\r\n        if (key === \"incidents\") {\r\n            this.refresh();\r\n        }\r\n        this.setState({activeTab: key})\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (<div>\r\n            <Card\r\n                style={{width: '100%'}}\r\n                title=\"Hotlist\"\r\n                tabList={tabList}\r\n                activeTabKey={this.state.activeTab}\r\n                onTabChange={key => {\r\n                    this.onTabChange(key);\r\n                }}\r\n            >\r\n                {this.state.activeTab === \"incidents\" ? (this.renderIncidents()) : <HotListedVehiclesList/>}\r\n            </Card>\r\n\r\n\r\n        </div>)\r\n    }\r\n\r\n\r\n    renderIncidents() {\r\n        let layout = this.state.layout;\r\n        let lpr = this.state.filter.lpr;\r\n\r\n        return <div>\r\n            <Collapse bordered={false} defaultActiveKey={['1']}>\r\n                <Panel header=\"Filter\" key=\"1\">\r\n                    LPR: <Input value={lpr} style={{\"width\": \"200px\"}} onChange={this.onLprInputChange}/> <br/><br/>\r\n                    <GenericFilter handleRefresh={this.refresh} filter={this.state.filter} layout={layout}\r\n                                   handleFilterChange={this.handleFilterChange}\r\n                                   handleLayoutChange={this.handleLayoutChange}/>\r\n                </Panel>\r\n                <div>\r\n                    {layout === \"table\" ? (this.renderTable()) : (this.renderGrid())}\r\n                </div>\r\n            </Collapse>\r\n\r\n        </div>;\r\n    }\r\n\r\n    renderGrid() {\r\n\r\n\r\n        if (this.state.loading || !this.state.anprresponse || this.state.anprresponse.totalPage === 0) {\r\n            return <Empty description={false}/>\r\n        }\r\n\r\n        let events = this.state.anprresponse.events;\r\n        let workingEventLoading = this.state.workingEventLoading;\r\n        let workingEvent = this.state.workingEvent;\r\n        let count = this.state.anprresponse.totalPages * this.state.anprresponse.pageSize;\r\n\r\n        let {magnifyEventId, zoomFactor, minZoomFactor, maxZoomFactor} = this.state.magnifyEvent;\r\n        const mid = ((maxZoomFactor - minZoomFactor) / 2).toFixed(5);\r\n        const preColor = zoomFactor >= mid ? '' : 'rgba(0, 0, 0, .45)';\r\n        const nextColor = zoomFactor >= mid ? 'rgba(0, 0, 0, .45)' : '';\r\n        const marks = {\r\n            1: {label: <span><Icon style={{color: preColor}} type=\"zoom-out\"/></span>},\r\n            2: {label: <span>2</span>},\r\n            3: {label: <span>3</span>},\r\n            4: {label: <span>4</span>},\r\n            5: {label: <span><Icon style={{color: nextColor}} type=\"zoom-in\"/></span>,}\r\n        };\r\n        return <div style={{background: '#ECECEC', padding: '5px'}}>\r\n            <Row>\r\n                {\r\n                    events.map((event, index) =>\r\n                        <Col xl={{span: 8}} lg={{span: 12}} md={{span: 12}} sm={{span: 24}} xs={{span: 24}} key={index}>\r\n                            <Card\r\n                                style={{margin: \"5px\"}}\r\n                                title={\r\n                                    <div>\r\n                                        {(event.direction && event.direction === \"rev\") ?\r\n                                            <Tag color=\"#f50\">Reverse</Tag> : null}\r\n                                        {(event.helmet) ? <Tag color=\"#f50\">Without helmet</Tag> : null}\r\n                                    </div>\r\n                                }\r\n                                extra={<Dropdown overlay={<Menu>\r\n                                    <Menu.Item key=\"0\" onClick={() => this.magnifyEvent(event)}><Icon type=\"zoom-in\"/>Zoom\r\n                                        image\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"1\">\r\n                                        <a\r\n                                            title={\"click here to download\"}\r\n                                            href={\"/public/anpr/vehicle/\" + event.id + \"/image.jpg\"}\r\n                                            download={true}><Icon type=\"download\"/>{' '} Full\r\n                                            image</a>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"2\">\r\n                                        <a\r\n                                            title={\"click here to download\"}\r\n                                            href={\"/public/anpr/lpr/\" + event.id + \"/image.jpg\"}\r\n                                            download={true}><Icon type=\"download\"/>{' '} Cropped image</a>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"3\">\r\n                                        <Button type=\"danger\" onClick={() => this.archiveEvent(event)}><Icon\r\n                                            type=\"warning\"/>{' '}\r\n                                            Archive\r\n                                        </Button>\r\n                                    </Menu.Item>\r\n\r\n                                </Menu>}>\r\n                                    <Button>\r\n                                        More <Icon type=\"down\"/>\r\n                                    </Button>\r\n                                </Dropdown>}\r\n                                bordered={true}\r\n                                cover={(magnifyEventId === event.id) ?\r\n                                    <Magnifier src={\"/public/anpr/vehicle/\" + event.id + \"/image.jpg\"}\r\n                                               zoomFactor={zoomFactor}/> : <img alt=\"event\"\r\n                                                                                src={\"/public/anpr/vehicle/\" + event.id + \"/image.jpg\"}/>\r\n\r\n                                }\r\n                            >\r\n                                <div>\r\n                                    {(magnifyEventId === event.id) ?\r\n                                        <Slider\r\n                                            marks={marks}\r\n                                            min={minZoomFactor}\r\n                                            max={maxZoomFactor}\r\n                                            onChange={this.updateZoomFactor}\r\n                                            value={typeof zoomFactor === 'number' ? zoomFactor : 0}\r\n                                        />\r\n                                        : <div style={{height:\"54px\",textAlign: \"center\"}}>\r\n                                               <Button size=\"small\" type=\"dashed\" onClick={() => this.magnifyEvent(event)} >\r\n                                                   <Icon type=\"zoom-in\"/>Zoom Image\r\n                                               </Button>\r\n                                           </div>\r\n                                    }\r\n                                </div>\r\n                                <div style={{textAlign: \"center\"}}>\r\n                                    <img alt=\"event\"\r\n                                         src={\"/public/anpr/lpr/\" + event.id + \"/image.jpg\"}/>\r\n                                </div>\r\n                                <div style={{marginTop: \"5px\", textAlign: \"center\"}}\r\n                                     onClick={() => this.editEvent(event)}>\r\n                                    <Paragraph\r\n                                        strong\r\n                                        editable={{onChange: this.updateEvent}}\r\n                                        copyable>{event.anprText}</Paragraph>\r\n                                    <Text\r\n                                        type=\"secondary\">{(workingEventLoading && workingEvent.id === event.id) ? \"saving...\" : \"\"}</Text>\r\n                                    <div>\r\n                                        <Text code> <Moment format=\"ll\">{event.eventDate}</Moment>{' '}|{' '}<Moment\r\n                                            format=\"LTS\">{event.eventDate}</Moment></Text>\r\n                                    </div>\r\n                                    <div>\r\n                                        <Text code><Icon type=\"environment\"/> {event.location}</Text>\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </Card>\r\n                        </Col>\r\n                    )\r\n                }\r\n            </Row>\r\n            <div style={{textAlign: \"right\"}}>\r\n                <Pagination onChange={this.onPageChange} onShowSizeChange={this.onPageSizeChange} showSizeChanger\r\n                            showQuickJumper\r\n                            defaultCurrent={1} total={count} current={this.state.filter.page}\r\n                            pageSize={this.state.filter.pageSize}/>\r\n            </div>\r\n\r\n        </div>\r\n    }\r\n\r\n    renderTable() {\r\n\r\n        if (this.state.loading || !this.state.events || this.state.events.Total === 0) {\r\n            return <Empty description={false}/>\r\n        }\r\n\r\n        let events = this.state.anprresponse.events;\r\n        let count = this.state.anprresponse.totalPages * this.state.anprresponse.pageSize;\r\n\r\n        const paginationOptions = {\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            onShowSizeChange: this.onPageSizeChange,\r\n            onChange: this.onPageChange,\r\n            total: count\r\n        };\r\n\r\n        const pagination = {\r\n            ...paginationOptions,\r\n            total: count,\r\n            current: this.state.filter.page,\r\n            pageSize: this.state.filter.pageSize\r\n        };\r\n\r\n        return (\r\n            <Table dataSource={events} pagination={pagination}>\r\n                <Column title=\"Location\" dataIndex=\"location\" key=\"location\"\r\n                        render={location => location}/>\r\n                <Column title=\"Date\" dataIndex=\"eventDate\" key=\"eventDate\"\r\n                        render={eventDate => (<Moment format=\"L\">{eventDate}</Moment>)}/>\r\n                <Column title=\"Time\" dataIndex=\"eventDate\" key=\"eventTime\"\r\n                        render={eventDate => (<Moment format=\"LTS\">{eventDate}</Moment>)}/>\r\n                <Column title=\"LPR\" dataIndex=\"anprText\" key=\"anprText\"\r\n                        render={anprText => anprText}/>\r\n                <Column title=\"image\" dataIndex=\"id\" key=\"anprimage\"\r\n                        render={id => (\r\n                            <a title={\"click here to download\"} href={\"/public/anpr/lpr/\" + id + \"/image.jpg\"}\r\n                               download={true}>\r\n                                <img alt=\"event\"\r\n                                     src={\"/public/anpr/lpr/\" + id + \"/image.jpg\"}/></a>)}/>\r\n                <Column title=\"direction\" dataIndex=\"direction\" key=\"direction\"\r\n                        render={direction => direction}/>\r\n                <Column title=\"Helmet\" dataIndex=\"helmet\" key=\"helmet\"\r\n                        render={helmet => helmet ? <span>No</span> : <span>Yes</span>}/>\r\n                <Column title=\"Action\"\r\n                        key=\"action\"\r\n                        render={(text, event) => (\r\n                            <Button type=\"danger\" onClick={() => this.archiveEvent(event)}><Icon type=\"warning\"/>{' '}\r\n                               Archive</Button>\r\n                        )}\r\n                />\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport {\r\n  Empty,\r\n  Icon,\r\n  Spin,\r\n  Table,\r\n  Timeline,\r\n  Modal,\r\n  Button,\r\n  Typography,\r\n} from \"antd\";\r\nimport Moment from \"react-moment\";\r\n\r\nimport AnprService from \"../../services/AnprService\";\r\n\r\nconst {Paragraph} = Typography;\r\nconst {Column} = Table;\r\nexport default class IncidentTimeline extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n          loading:false,\r\n          anprresponse: {},\r\n          filter:{\r\n            currentPage: 1,\r\n            pageSizes: 24,\r\n            lpr: \"\",\r\n            incidentType:\"\"\r\n          }\r\n        };\r\n\r\n       this.toggleVisible = this.toggleVisible.bind(this);\r\n       this.refreshBriefIncidentsNow = this.refreshBriefIncidentsNow.bind(this);\r\n       this.onModalPageChange = this.onModalPageChange.bind(this);\r\n       this.onModalPageSizeChange = this.onModalPageSizeChange.bind(this);\r\n       this.refreshBriefIncidentsNow=this.refreshBriefIncidentsNow.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        let filter = this.state.filter;\r\n        if((filter.lpr != nextProps.lpr) || (filter.incidentType != nextProps.incidentType)) {\r\n            filter.lpr = nextProps.lpr;\r\n            filter.incidentType = nextProps.incidentType;\r\n            this.setState({filter},()=>{\r\n              this.refreshBriefIncidentsNow();\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n\r\n    toggleVisible(){\r\n        let filter = this.state.filter;\r\n        filter.currentPage = 1;\r\n        this.setState({filter: filter});\r\n        this.props.toggleVisible();\r\n\r\n    }\r\n\r\n    refreshBriefIncidentsNow() {\r\n\r\n           let {loading, filter, anprresponse} = this.state;\r\n\r\n           if(filter.lpr && filter.incidentType){\r\n              this.setState({loading : true});\r\n              AnprService.getIncidentTimeline(filter).then(request =>\r\n              {\r\n                loading = false;\r\n                anprresponse= request.data;\r\n                this.setState({loading, anprresponse});\r\n              }).catch(error=> {\r\n               loading = false;\r\n               this.setState({loading});\r\n               alert(\"Something went wrong\");\r\n                 });\r\n           }\r\n\r\n    }\r\n      onModalPageChange(currentPage, pageSizes){\r\n         let filter = this.state.filter;\r\n         filter.currentPage = currentPage;\r\n         filter.pageSizes = pageSizes;\r\n         this.refreshBriefIncidentsNow(filter);\r\n      }\r\n\r\n      onModalPageSizeChange(current, pageSizes) {\r\n           let filter = this.state.filter;\r\n           filter.pageSizes = pageSizes;\r\n           this.refreshBriefIncidentsNow(filter);\r\n        }\r\n\r\n    render(){\r\n         let events = this.state.anprresponse.events;\r\n         let count = this.state.anprresponse.totalPages * this.state.anprresponse.pageSizes;\r\n\r\n         const paginationOption = {\r\n                showSizeChanger: false,\r\n                showQuickJumper: false,\r\n                pageSize:5,\r\n                showLessItems: true,\r\n                onShowSizeChange: this.onModalPageSizeChange,\r\n                onChange: this.onModalPageChange,\r\n                total: count\r\n            };\r\n\r\n            const pagination = {\r\n                ...paginationOption,\r\n                total: count,\r\n                current: this.state.filter.currentPage,\r\n                pageSizes: this.state.filter.pageSizes\r\n            };\r\n\r\n         if (this.state.loading)\r\n         {\r\n            const antIcon = <Icon type=\"loading\" style={{fontSize: 24}} spin/>;\r\n            return <Spin indicator={antIcon}/>\r\n         }\r\n\r\n         if (!this.state.anprresponse.events){\r\n                   return <Empty description={false}/>\r\n         }\r\n\r\n        return <Modal\r\n\r\n                title={<div><Paragraph copyable>{this.state.filter.lpr}</Paragraph></div> }\r\n                visible={this.props.visible}\r\n                onCancel={this.toggleVisible}\r\n                onClose={this.toggleVisible}\r\n                footer={[\r\n                         <Button key=\"close\"  type=\"primary\" onClick={this.toggleVisible}>\r\n                           Close\r\n                         </Button>\r\n                        ]}\r\n                >\r\n                   <div>\r\n                              <Table dataSource={events} pagination={pagination}>\r\n                                   <Column title=\"When and Where\"\r\n\r\n\r\n                                            render={(text, record, index)=> <Timeline.Item>\r\n                                          <div>\r\n                                            <p><Icon type=\"clock-circle\" />  <Moment format=\"lll\">{record.eventDate}</Moment></p>\r\n                                            <p><Icon type=\"environment\"/> {record.location}</p>\r\n                                            <a title={\"click here to download\"}\r\n                                              href={\"/public/anpr/lpr/\" + record.id + \"/image.jpg\"}\r\n                                            download={true}>\r\n                                            <img alt=\"event\"\r\n                                                src={\"/public/anpr/lpr/\" + record.id + \"/image.jpg\"}style={{width:160,height:\"auto\"}}/>\r\n                                            </a>\r\n                                          </div>\r\n                                            </Timeline.Item>\r\n                                            }/>\r\n                                   <Column  title=\"Captured Image\" dataIndex=\"id\" key=\"anprimage\"\r\n                                             render={id => (\r\n                                                     <a title={\"click here to download\"}  href={\"/public/anpr/vehicle/\" + id + \"/image.jpg\"}\r\n                                                     download={true}>\r\n                                                     <img alt=\"event\"\r\n                                                     src={\"/public/anpr/vehicle/\" + id + \"/image.jpg\" }style={{width:200,height:\"auto\"}}/></a>)}/>\r\n                              </Table>\r\n                           </div>\r\n\r\n               </Modal>\r\n    }\r\n}","import React, {Component} from \"react\"\r\nimport {Button, Card, Col, Empty, Icon, Input, message, Row, Spin, Table,} from \"antd\";\r\nimport AnprService from \"../../services/AnprService\";\r\nimport IncidentTimeline from \"./IncidentTimeline\";\r\n\r\nconst {Column} = Table;\r\nconst {Search} = Input;\r\n\r\nexport default class MasterDataView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            archiveEventsLoading: \"\",\r\n            activeTab: \"All-Incidents\",\r\n            visible: false,\r\n            timelineLpr: \"\",\r\n            filter: {\r\n                lpr: \"\",\r\n            },\r\n            archiveLpr: {\r\n                anprresponse: {},\r\n                lpr: \"\",\r\n            },\r\n\r\n            allData: {\r\n                loading: false,\r\n                anprresponse: {},\r\n                filter: {\r\n                    pages: 1,\r\n                    pageSizes: 24,\r\n                    lpr: \"\",\r\n                    incidentType: \"\",\r\n                }\r\n            }\r\n        };\r\n\r\n        this.refresh = this.refresh.bind(this);\r\n        this.handleRefresh = this.handleRefresh.bind(this);\r\n        this.onMasterDataPageChange = this.onMasterDataPageChange.bind(this);\r\n        this.onMasterDataPageSizeChange = this.onMasterDataPageSizeChange.bind(this);\r\n        this.handleTabClick = this.handleTabClick.bind(this);\r\n        this.refreshIncidentsNow = this.refreshIncidentsNow.bind(this);\r\n        this.onLprInputChange = this.onLprInputChange.bind(this);\r\n        this.search = this.search.bind(this);\r\n        this.onTabChange = this.onTabChange.bind(this);\r\n        this.toggleIncidentTimelineModal = this.toggleIncidentTimelineModal.bind(this);\r\n        this.archiveLprOnChange = this.archiveLprOnChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    handleTabClick(tabIndex) {\r\n        this.setState({\r\n            activeTabIndex:\r\n                tabIndex === this.state.activeTabIndex\r\n                    ? this.props.defaultActiveTabIndex\r\n                    : tabIndex\r\n        });\r\n    }\r\n\r\n    refresh() {\r\n        this.refreshIncidentsNow();\r\n    }\r\n\r\n    showModal = (lpr) => {\r\n        this.setState({\r\n            visible: true,\r\n            timelineLpr: lpr\r\n        });\r\n    }\r\n\r\n    toggleIncidentTimelineModal() {\r\n        let visible = this.state.visible;\r\n        this.setState({visible: !visible});\r\n    }\r\n\r\n    //cant use refresh to read from state as state may not have been set\r\n\r\n    refreshIncidentsNow() {\r\n        let allData = this.state.allData;\r\n        allData.loading = true;\r\n        this.setState({allData: allData});\r\n        AnprService.getIncidentsList(this.state.allData.filter).then(request => {\r\n            allData.loading = false;\r\n            allData.anprresponse = request.data;\r\n            this.setState({allData: allData});\r\n        }).catch(error => {\r\n            allData.loading = false;\r\n            this.setState({hasError: true});\r\n            alert(\"Something went wrong\");\r\n        });\r\n    }\r\n\r\n    handleRefresh() {\r\n        this.refresh();\r\n    }\r\n\r\n    onLprInputChange(e) {\r\n        let filter = this.state.filter;\r\n        filter.lpr = e.target.value;\r\n        this.setState({filter: filter})\r\n    }\r\n\r\n    search(searchText) {\r\n        let {filter, allData} = this.state;\r\n        filter.lpr = searchText;\r\n        allData.filter.lpr = searchText;\r\n        this.setState({filter, allData}, () => {\r\n            this.refresh();\r\n        });\r\n    }\r\n\r\n    onMasterDataPageChange(pages, pageSizes) {\r\n        let filter = this.state.allData.filter;\r\n        filter.pages = pages;\r\n        filter.pageSizes = pageSizes;\r\n        this.refreshIncidentsNow(filter);\r\n    }\r\n\r\n    onMasterDataPageSizeChange(current, pageSizes) {\r\n        let filter = this.state.allData.filter;\r\n        filter.pageSizes = pageSizes;\r\n        this.refreshIncidentsNow(filter);\r\n    }\r\n\r\n    onTabChange(key) {\r\n        this.setState({activeTab: key})\r\n    }\r\n\r\n    archiveLprOnChange(lpr) {\r\n        this.setState({archiveEventsLoading: lpr});\r\n        AnprService.archiveAllEvent(lpr).then(request => {\r\n            this.setState({archiveEventsLoading: \"\"});\r\n            this.refresh(this.state.archiveLpr);\r\n            message.success('Vehicle archived!');\r\n        }).catch(error => {\r\n            this.setState({archiveEventsLoading: \"\"});\r\n            message.error('Something went wrong!');\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n\r\n                </div>\r\n\r\n                <Card\r\n                    style={{width: '100%'}}\r\n                    title={<Row>\r\n                        <Col xl={{span: 16}} lg={{span: 16}} md={{span: 12}} sm={{span: 12}} xs={{span: 12}}>\r\n                            <h4>Master-Anpr-Data</h4>\r\n                        </Col>\r\n                        <Col xl={{span: 8}} lg={{span: 8}} md={{span: 12}} sm={{span: 12}} xs={{span: 12}}>\r\n\r\n                            <Search allowClear\r\n                                    placeholder=\"Search Vehicle \"\r\n                                    onChange={this.onLprInputChange}\r\n                                    style={{textAlign: \"right\"}}\r\n                                    onSearch={value => this.search(value)} enterButton\r\n                            />\r\n                        </Col>\r\n                    </Row>}\r\n\r\n\r\n                    onTabChange={key => {\r\n                        this.onTabChange(key);\r\n                    }}\r\n                >\r\n                    {this.renderMasterData()}\r\n                    <IncidentTimeline\r\n                        lpr={this.state.timelineLpr}\r\n                        incidentType={this.state.activeTab}\r\n                        visible={this.state.visible}\r\n                        toggleVisible={this.toggleIncidentTimelineModal}\r\n                    />\r\n\r\n                </Card>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderMasterData() {\r\n\r\n\r\n        let events = this.state.allData.anprresponse.events;\r\n        let count = this.state.allData.anprresponse.totalPages * this.state.allData.anprresponse.pageSizes;\r\n\r\n        let {archiveLpr} = this.state;\r\n\r\n        const paginationOption = {\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            onShowSizeChange: this.onMasterDataPageSizeChange,\r\n            onChange: this.onMasterDataPageChange,\r\n            total: count\r\n        };\r\n\r\n        const pagination = {\r\n            ...paginationOption,\r\n            total: count,\r\n            current: this.state.allData.filter.pages,\r\n            pageSizes: this.state.allData.filter.pageSizes\r\n        };\r\n\r\n        if (this.state.allData.loading) {\r\n            const antIcon = <Icon type=\"loading\" style={{fontSize: 24}} spin/>;\r\n            return <Spin indicator={antIcon}/>\r\n        }\r\n\r\n        if (!this.state.allData.anprresponse.events) {\r\n            return <Empty description={false}/>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Table dataSource={events} pagination={pagination}>\r\n\r\n                    <Column title=\"LPR\" dataIndex=\"anprText\" key=\"anprText\"\r\n                            render={anprText => <Button onClick={() => this.showModal(anprText)}>{anprText}</Button>}/>\r\n\r\n                    <Column title=\"Incident Count\" dataIndex=\"repeatedTimes\" key=\"repeatedTimes\"\r\n                            render={repeatedTimes => repeatedTimes}/>\r\n\r\n                    <Column\r\n                        render={(text, record, index) => <div>\r\n                            <p><Button type={'danger'} loading={this.state.archiveEventsLoading === record.anprText}\r\n                                       onClick={() => this.archiveLprOnChange(record.anprText)}>Archive</Button></p>\r\n\r\n                        </div>\r\n                        }/>\r\n                </Table>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n","import axios from \"./axios\";\r\n\r\nclass ApmsService {\r\n\r\n    static Instance() {\r\n        return new ApmsService()\r\n    }\r\n\r\n    checkIn(vehicleNo) {\r\n        return axios.post('/api/apms/check/in?vehicleNo=' + vehicleNo);\r\n    }\r\n\r\n    checkOut(vehicleNo) {\r\n        return axios.post('/api/apms/check/out?vehicleNo=' + vehicleNo);\r\n    }\r\n\r\n    getEvents(filter) {\r\n        return axios.post('/api/apms/events', filter);\r\n    }\r\n\r\n    getEventStatus(vehicleNo) {\r\n        return axios.post('/api/apms/event/status?vehicleNo=' + vehicleNo);\r\n    }\r\n\r\n    getParkingSlotStats() {\r\n        return axios.get('/api/apms/guidance/stats');\r\n    }\r\n\r\n    getCheckedInVehiclesCount() {\r\n        return axios.get('/api/apms/guidance/checked-in/current/count');\r\n    }\r\n\r\n    getSlots() {\r\n        return axios.get('/api/apms/guidance/slots?lot=lucknow')\r\n    }\r\n\r\n    updateSlot(slot) {\r\n        return axios.post('/api/apms/guidance/slots', {lot:'lucknow', slot:slot.name, status:slot.free, misaligned:slot.misaligned})\r\n    }\r\n}\r\nexport default ApmsService.Instance()","import React, {Component} from \"react\";\r\nimport {Pie, Doughnut} from 'react-chartjs-2';\r\nimport {\r\n    Col,\r\n    Row,\r\n    Card,\r\n    Modal,\r\n    Menu,\r\n    DatePicker, Skeleton\r\n} from \"antd\";\r\nimport ApmsService from \"../../services/ApmsService\";\r\nimport {cloneDeep} from 'lodash';\r\nimport DashboardService from \"../../services/DashboardService\";\r\nimport CommonService from \"../../services/CommonService\";\r\nimport Moment from 'moment';\r\nimport 'chartjs-plugin-datalabels';\r\n\r\nconst {RangePicker} = DatePicker;\r\n\r\nlet fo_data = {\r\n    labels: [\r\n        'Occupied',\r\n        'Free'\r\n    ],\r\n    datasets: [{\r\n        data: [],\r\n        backgroundColor: [DashboardService.getColor(0), DashboardService.getColor(2)]\r\n    }]\r\n};\r\n\r\nlet misAlignedData = {\r\n    labels: [\r\n        'Aligned',\r\n        'MisAligned'\r\n    ],\r\n    datasets: [{\r\n        data: [],\r\n        backgroundColor: [DashboardService.getColor(6), DashboardService.getColor(1)]\r\n    }]\r\n};\r\n\r\n\r\nlet entryexit_data = {\r\n    labels: [\r\n        'Car - In',\r\n        'Bike - In',\r\n    ],\r\n    datasets: [{\r\n        data: [],\r\n        backgroundColor: [DashboardService.getColor(0), DashboardService.getColor(2)]\r\n    }]\r\n};\r\n\r\nexport default class ParkingDashboardView extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const baseDate = Moment();\r\n        this.state = {\r\n            loading: {\r\n                parkingEventData: false,\r\n                stats: false,\r\n                checkInEventsData: false\r\n            },\r\n            isOpencustomDateRangeModal: \"\",\r\n            fo_data: fo_data,\r\n            cb_data: {},\r\n            entryexit_data: entryexit_data,\r\n            misAlignedData: misAlignedData,\r\n            parkingEventData: {\r\n                filter: {\r\n                    selectedCustomDateRange: \"Today\",\r\n                    selectedXAxisOption: \"Hourly\",\r\n                    fromDate: baseDate.startOf('day').toDate(),\r\n                    toDate: baseDate.endOf('day').toDate()\r\n                },\r\n                chartData: {\r\n                    labels: [],\r\n                    datasets: []\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n        this.refresh = this.refresh.bind(this);\r\n        this.getParkingSlotStats = this.getParkingSlotStats.bind(this);\r\n        this.getDateRangeOptions = this.getDateRangeOptions.bind(this);\r\n\r\n        this.getParkingVehicleCount = this.getParkingVehicleCount.bind(this);\r\n        this.getBarChartOptions = this.getBarChartOptions.bind(this);\r\n        this.selectDateRange = this.selectDateRange.bind(this);\r\n        this.selectXAxisOption = this.selectXAxisOption.bind(this);\r\n        this.refresh = this.refresh.bind(this);\r\n        this.getDateRangeOptions = this.getDateRangeOptions.bind(this);\r\n        this.getXAxisOptions = this.getXAxisOptions.bind(this);\r\n        this.handleDateRangeChange = this.handleDateRangeChange.bind(this);\r\n        this.getCheckedInVehiclesCount = this.getCheckedInVehiclesCount.bind(this);\r\n\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        this.getParkingSlotStats();\r\n        this.getCheckedInVehiclesCount();\r\n        this.getParkingVehicleCount(this.state.parkingEventData.filter.fromDate, this.state.parkingEventData.filter.toDate, this.state.parkingEventData.filter.selectedXAxisOption);\r\n    }\r\n\r\n    selectXAxisOption(selectedXAxisOption) {\r\n        let parkingEventData = this.state.parkingEventData;\r\n        parkingEventData.filter.selectedXAxisOption = selectedXAxisOption;\r\n        this.setState({parkingEventData: parkingEventData}, () => {\r\n            this.refresh();\r\n        });\r\n    }\r\n\r\n    getXAxisOptions() {\r\n        return (<Menu>\r\n            <Menu.Item key=\"1\"\r\n                       onClick={() => this.selectXAxisOption(\"Hourly\")}>\r\n                Hourly\r\n            </Menu.Item>\r\n            <Menu.Item key=\"5\"\r\n                       onClick={() => this.selectXAxisOption(\"Daily\")}>\r\n                Daily\r\n            </Menu.Item>\r\n        </Menu>)\r\n    }\r\n\r\n    showCustomDateRangeModal() {\r\n        this.setState({\r\n            isOpencustomDateRangeModal: true,\r\n        });\r\n    };\r\n\r\n    selectDateRange(selectedCustomDateRangeEnum, selectedCustomDateRangeMoment) {\r\n        let {isOpencustomDateRangeModal} = this.state;\r\n        let parkingEventData = this.state.parkingEventData;\r\n        parkingEventData.filter.selectedCustomDateRange = selectedCustomDateRangeEnum;\r\n        let fromToDate = DashboardService.extractFromToDate(parkingEventData.filter.selectedCustomDateRange, selectedCustomDateRangeMoment);\r\n        parkingEventData.filter.fromDate = fromToDate.from_date;\r\n        parkingEventData.filter.toDate = fromToDate.to_date;\r\n\r\n\r\n        if (selectedCustomDateRangeEnum === \"Custom\") {\r\n            isOpencustomDateRangeModal = false\r\n        }\r\n        this.setState({parkingEventData: parkingEventData, isOpencustomDateRangeModal}, () => {\r\n            this.refresh();\r\n        });\r\n\r\n    }\r\n\r\n    handleDateRangeChange(dates, dateString) {\r\n        this.setState(() => {\r\n            this.refresh();\r\n        });\r\n\r\n    }\r\n\r\n    handleCancel = e => {\r\n        this.setState({\r\n            isOpencustomDateRangeModal: \"\",\r\n        });\r\n    };\r\n\r\n    getParkingVehicleCount(from_date, to_date, xAxis) {\r\n        let {parkingEventData, loading} = this.state;\r\n        parkingEventData.chartData = {\r\n            labels: [],\r\n            datasets: []\r\n        };\r\n        loading.parkingEventData = true;\r\n        this.setState({loading});\r\n        DashboardService.getParkingVehicleCount(from_date, to_date, xAxis).then(resposne => {\r\n\r\n            let checkInEvents = resposne.data.checkInEvents;\r\n            let checkOutEvents = resposne.data.checkOutEvents;\r\n\r\n            //Get all unique labels(timestamps) from both type of incidents\r\n            let labels = [];\r\n            for (let i in checkOutEvents) {\r\n                if (xAxis === \"Hourly\") {\r\n                    checkOutEvents[i].date = parseInt(checkOutEvents[i].date);\r\n                }\r\n                if (!labels.includes(checkOutEvents[i].date)) {\r\n                    labels.push(checkOutEvents[i].date);\r\n                }\r\n            }\r\n\r\n            for (let i in checkInEvents) {\r\n                if (xAxis === \"Hourly\") {\r\n                    checkInEvents[i].date = parseInt(checkInEvents[i].date);\r\n                }\r\n                if (!labels.includes(checkInEvents[i].date)) {\r\n                    labels.push(checkInEvents[i].date);\r\n                }\r\n            }\r\n\r\n            // sort the labels, as it is a timeseries\r\n            if (xAxis === \"Hourly\") {\r\n                labels.sort((a, b) => a - b);\r\n            }\r\n            if (xAxis === \"Daily\") {\r\n                labels.sort((a, b) => new Moment(a).format('YYYY-MM-DD') - new Moment(b).format('YYYY-MM-DD'))\r\n            }\r\n\r\n            //prepare dataset\r\n            let checkInDataset = {\r\n                label: \"Check In\",\r\n                data: [],\r\n                borderColor: DashboardService.getColor(0)\r\n            };\r\n            let checkOutDataset = {\r\n                label: \"Check Out\",\r\n                data: [],\r\n                borderColor: DashboardService.getColor(2)\r\n            };\r\n\r\n            //fill the value of dataset for each label\r\n            let dataValue = 0;\r\n            let index = -1;\r\n            for (let i in labels) {\r\n                dataValue = 0;\r\n                index = CommonService.findIndex(checkInEvents, 'date', labels[i]);\r\n                if (index > -1) {\r\n                    dataValue = checkInEvents[index].vehicleCount;\r\n                }\r\n                checkInDataset.data.push(dataValue);\r\n\r\n                dataValue = 0;\r\n                index = CommonService.findIndex(checkOutEvents, 'date', labels[i]);\r\n                if (index > -1) {\r\n                    dataValue = checkOutEvents[index].vehicleCount;\r\n                }\r\n                checkOutDataset.data.push(dataValue);\r\n            }\r\n\r\n            //finalize it with setState\r\n            parkingEventData.chartData.labels = labels;\r\n            parkingEventData.chartData.datasets.push(checkInDataset);\r\n            parkingEventData.chartData.datasets.push(checkOutDataset);\r\n            loading.parkingEventData = false;\r\n            this.setState({parkingEventData, loading});\r\n        }).catch(error => {\r\n            loading.parkingEventData = false;\r\n            this.setState({parkingEventData, loading});\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    getParkingSlotStats() {\r\n        let {fo_data, loading} = this.state;\r\n        loading.stats = true;\r\n        this.setState({loading});\r\n        ApmsService.getParkingSlotStats().then(response => {\r\n            let statsData = response.data;\r\n            fo_data.datasets[0].data[0] = statsData.parkedSlots;\r\n            fo_data.datasets[0].data[1] = statsData.freeSlots;\r\n\r\n            misAlignedData.datasets[0].data[0] = statsData.parkedSlots- statsData.parkedMisalignedSlots;\r\n            misAlignedData.datasets[0].data[1] = statsData.parkedMisalignedSlots;\r\n\r\n            let cb_data = {\r\n                label: 'Car',\r\n                labels: ['Parked Slots', 'Free Slots'],\r\n                datasets: []\r\n            };\r\n\r\n            let dataset = {\r\n                data: [statsData.carsParked, statsData.carSlots - statsData.carsParked],\r\n                label: 'Car',\r\n                labels: [\"Parked Slots\", \"Free Slots\"],\r\n                backgroundColor: [DashboardService.getColor(0), DashboardService.getColor(2)]\r\n            };\r\n            cb_data.datasets.push(cloneDeep(dataset));\r\n\r\n            dataset = {\r\n                label: 'Bike',\r\n                data: [statsData.bikesParked, statsData.bikeSlots - statsData.bikesParked],\r\n                labels: [\"Parked Slots\", \"Free Slots\"],\r\n                backgroundColor: [DashboardService.getColor(0), DashboardService.getColor(2)]\r\n            };\r\n            cb_data.datasets.push(cloneDeep(dataset));\r\n\r\n            loading.stats = false;\r\n            this.setState({fo_data, cb_data, loading});\r\n        }).catch(error => {\r\n            loading.stats = false;\r\n            this.setState({loading});\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    getBarChartOptions(chartName) {\r\n        let yAxisScaleLabel = \"Day\";\r\n        if (this.state[chartName].filter.selectedXAxisOption === \"Hourly\") {\r\n            yAxisScaleLabel = \"Hours(24-hour)\"\r\n        }\r\n        let yAxisLabel = \"Vehicles\";\r\n        if (chartName === \"parkingEventData\") {\r\n            yAxisLabel = \"Entries\"\r\n        }\r\n\r\n        return {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            animation: {\r\n                duration: 0\r\n            },\r\n            hover: {\r\n                animationDuration: 0\r\n            },\r\n            responsiveAnimationDuration: 0,\r\n            legend: {\r\n                position: 'right'\r\n            },\r\n            scales: {\r\n                xAxes: [{\r\n                    stacked: false,\r\n                    ticks: {\r\n                        beginAtZero: true\r\n                    }, scaleLabel: {\r\n                        display: true,\r\n                        labelString: yAxisScaleLabel\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                    stacked: false,\r\n                    ticks: {\r\n                        beginAtZero: true\r\n                    }, scaleLabel: {\r\n                        display: true,\r\n                        labelString: yAxisLabel\r\n                    }\r\n                }]\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n\r\n    getCheckedInVehiclesCount() {\r\n        let {entryexit_data, loading} = this.state;\r\n        loading.checkInEventsData = true;\r\n        this.setState({loading});\r\n        ApmsService.getCheckedInVehiclesCount().then(response => {\r\n            let data = response.data;\r\n            entryexit_data.datasets[0].data[0] = data.checkedInCars;\r\n            entryexit_data.datasets[0].data[1] = data.checkedInBikes;\r\n\r\n            loading.checkInEventsData = false;\r\n            this.setState({entryexit_data, loading});\r\n        }).catch(error => {\r\n            loading.checkInEventsData = false;\r\n            this.setState({loading});\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    getDateRangeOptions() {\r\n        return (\r\n            <Menu>\r\n                <Menu.Item key=\"1\" onClick={() => this.selectDateRange(\"Today\")}>\r\n                    Today\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" onClick={() => this.selectDateRange(\"Yesterday\")}>\r\n                    Yesterday\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" onClick={() => this.selectDateRange(\"This week\")}>\r\n                    This week\r\n                </Menu.Item>\r\n                <Menu.Item key=\"4\" onClick={() => this.selectDateRange(\"Last week\")}>\r\n                    Last week\r\n                </Menu.Item>\r\n                <Menu.Item key=\"5\" onClick={() => this.selectDateRange(\"This month\")}>\r\n                    This month\r\n                </Menu.Item>\r\n                <Menu.Item key=\"6\" onClick={() => this.selectDateRange(\"This year\")}>\r\n                    This year\r\n                </Menu.Item>\r\n                <Menu.Item key=\"7\" onClick={() => this.selectDateRange(\"Last year\")}>\r\n                    Last year\r\n                </Menu.Item>\r\n                <Menu.Item onClick={() => this.showCustomDateRangeModal()}>\r\n                    Custom\r\n                </Menu.Item>\r\n\r\n            </Menu>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let {fo_data, cb_data, parkingEventData, loading} = this.state;\r\n        const parkingEventsChartOptions = this.getBarChartOptions(\"parkingEventData\");\r\n        return (<div>\r\n\r\n\r\n            <Row>\r\n                <Col xl={{span: 8}} lg={{span: 8}} md={{span: 8}} sm={{span: 24}} xs={{span: 24}}>\r\n                    <Card>\r\n                        {\r\n                            loading.stats\r\n                                ? <Skeleton active/>\r\n                                : <Pie data={fo_data} options={{\r\n                                    title: {\r\n                                        display: true,\r\n                                        text: 'Free/Occupied Slots'\r\n                                    },\r\n                                    plugins: {\r\n                                        datalabels: {\r\n                                            display: true,\r\n                                            color: '#fff',\r\n                                            anchor: 'end',\r\n                                            align: 'start',\r\n                                            offset: -10,\r\n                                            borderWidth: 2,\r\n                                            borderColor: '#fff',\r\n                                            borderRadius: 25,\r\n                                            backgroundColor: (context) => {\r\n                                                return context.dataset.backgroundColor;\r\n                                            },\r\n                                            font: {\r\n                                                weight: 'bold',\r\n                                                size: '10'\r\n                                            },\r\n                                            formatter: (item, context) => {\r\n                                                return  item + \" Slots\";\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }}/>\r\n                        }\r\n                    </Card>\r\n                </Col>\r\n                <Col xl={{span: 8}} lg={{span: 8}} md={{span: 8}} sm={{span: 24}} xs={{span: 24}}>\r\n                    <Card>\r\n                        {\r\n                            loading.stats\r\n                                ? <Skeleton active/>\r\n                                : <Doughnut data={cb_data} options={\r\n                                    {\r\n                                        circumference: Math.PI,\r\n                                        rotation: Math.PI,\r\n                                        title: {\r\n                                            display: true,\r\n                                            text: ' Car/Bike'\r\n                                        },\r\n                                        tooltips: {\r\n                                            callbacks: {\r\n                                                title: function (item, data) {\r\n                                                    return data.datasets[item[0].datasetIndex].label;\r\n                                                },\r\n                                                label: function (item, data) {\r\n                                                    let label = data.datasets[item.datasetIndex].labels[item.index];\r\n                                                    let value = data.datasets[item.datasetIndex].data[item.index];\r\n                                                    return label + ': ' + value;\r\n                                                }\r\n                                            }\r\n                                        },\r\n                                        plugins: {\r\n                                            datalabels: {\r\n                                                display: true,\r\n                                                color: '#fff',\r\n                                                anchor: 'end',\r\n                                                align: 'start',\r\n                                                offset: -10,\r\n                                                borderWidth: 2,\r\n                                                borderColor: '#fff',\r\n                                                borderRadius: 25,\r\n                                                backgroundColor: (context) => {\r\n                                                    return context.dataset.backgroundColor;\r\n                                                },\r\n                                                font: {\r\n                                                    weight: 'bold',\r\n                                                    size: '10'\r\n                                                },\r\n                                                formatter: (item, context) => {\r\n                                                    return context.dataset.label + \": \" + item;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                />\r\n                        }\r\n                    </Card>\r\n\r\n\r\n                </Col>\r\n                <Col xl={{span: 8}} lg={{span: 8}} md={{span: 8}} sm={{span: 24}} xs={{span: 24}}>\r\n                    <Card>\r\n                        {\r\n                            loading.stats\r\n                                ? <Skeleton active/>\r\n                                : <Pie data={misAlignedData} options={{\r\n                                    title: {\r\n                                        display: true,\r\n                                        text: 'Aligned/Mis-Aligned Occupied Slots'\r\n                                    },\r\n                                    plugins: {\r\n                                        datalabels: {\r\n                                            display: true,\r\n                                            color: '#fff',\r\n                                            anchor: 'end',\r\n                                            align: 'start',\r\n                                            offset: -10,\r\n                                            borderWidth: 2,\r\n                                            borderColor: '#fff',\r\n                                            borderRadius: 25,\r\n                                            backgroundColor: (context) => {\r\n                                                return context.dataset.backgroundColor;\r\n                                            },\r\n                                            font: {\r\n                                                weight: 'bold',\r\n                                                size: '10'\r\n                                            },\r\n                                            formatter: (item, context) => {\r\n                                                return  item + \" Slots\";\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }}/>\r\n                        }\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n            {/* <br/>\r\n\r\n            <Card title={<div>Parkings\r\n                &nbsp;\r\n                <Dropdown overlay={() => this.getDateRangeOptions(\"parkingEventData\")}>\r\n                    <Button>\r\n                        {parkingEventData.filter.selectedCustomDateRange ? parkingEventData.filter.selectedCustomDateRange : \"Select\"}\r\n                        <Icon\r\n                            type=\"down\"/>\r\n                    </Button>\r\n                </Dropdown>\r\n                &nbsp;<Dropdown overlay={() => this.getXAxisOptions(\"parkingEventData\")}>\r\n                    <Button>\r\n                        {parkingEventData.filter.selectedXAxisOption ? parkingEventData.filter.selectedXAxisOption : \"Select\"}\r\n                        <Icon\r\n                            type=\"down\"/>\r\n                    </Button>\r\n                </Dropdown>\r\n            </div>}>\r\n                {loading.parkingEventData ? <Skeleton active/> :\r\n                    <Line data={parkingEventData.chartData} options={parkingEventsChartOptions}/>}\r\n\r\n            </Card>*/}\r\n\r\n            <Modal\r\n                onCancel={this.handleCancel}\r\n                title=\"Custom Date Range\"\r\n                visible={this.state.isOpencustomDateRangeModal ? true : false}\r\n                footer={[]}\r\n\r\n            >\r\n                <RangePicker\r\n                    onChange={(changedDateRange) => this.selectDateRange(\"Custom\", changedDateRange)}/>\r\n            </Modal>\r\n        </div>)\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {Button, Col, Row, Select, Switch} from \"antd\";\r\nimport queryString from 'query-string';\r\nimport {Group, Image, Label, Layer, Line, Stage, Star, Tag, Text} from 'react-konva';\r\nimport ApmsService from \"../../services/ApmsService\";\r\n\r\nconst {Option} = Select;\r\n\r\nclass ParkingImage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            image: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadImage();\r\n    }\r\n\r\n    componentDidUpdate(oldProps) {\r\n\r\n        if (oldProps.src !== this.props.src) {\r\n            this.loadImage();\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.image.removeEventListener('load', this.handleLoad);\r\n    }\r\n\r\n    handleLoad = () => {\r\n        // after setState react-konva will update canvas and redraw the layer\r\n        // because \"image\" property is changed\r\n        this.setState({\r\n            image: this.image\r\n        });\r\n        // if you keep same image object during source updates\r\n        // you will have to update layer manually:\r\n        // this.imageNode.getLayer().batchDraw();\r\n    };\r\n\r\n    loadImage() {\r\n\r\n        // save to \"this\" to remove \"load\" handler on unmount\r\n        this.image = new window.Image();\r\n        this.image.src = this.props.src;\r\n        this.image.addEventListener('load', this.handleLoad);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Image\r\n                x={this.props.x}\r\n                y={this.props.y}\r\n                image={this.state.image}\r\n                ref={node => {\r\n                    this.imageNode = node;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default class ParkingConsoleView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slots: {},\r\n            loading: true,\r\n\r\n            biketotal: 0,\r\n            cartotal: 0,\r\n            bikefull: 0,\r\n            carfull: 0,\r\n            img: '/public/apms/lot/lucknow/image.jpg',\r\n            baseimg: '/public/apms/lot/lucknow/image.jpg'\r\n        };\r\n        this.togglerRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.intervalID = setInterval(this.refresh.bind(this), 30 * 1000);\r\n        this.ptTimer = setInterval(this.setOccupied.bind(this), 1000);\r\n        this.refresh();\r\n    }\r\n\r\n    setOccupied() {\r\n        let slots = this.state.slots;\r\n        slots.forEach(v => {\r\n            if (!v.free) {\r\n                v.lastOccupiedSeconds++\r\n            }\r\n        });\r\n        this.setState({slots:slots});\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n        clearInterval(this.ptTimer);\r\n    }\r\n\r\n    refresh() {\r\n\r\n        ApmsService.getSlots().then(response => {\r\n            let biketotal = 0;\r\n            let cartotal = 0;\r\n            let bikefull = 0;\r\n            let carfull = 0;\r\n\r\n            response.data.forEach((v, i) => {\r\n                switch (v.vehicleType) {\r\n                    case \"Bike\":\r\n                        biketotal++;\r\n                        if (!v.free) bikefull++;\r\n                        break;\r\n                    case \"Car\":\r\n                        cartotal++;\r\n                        if (!v.free) carfull++;\r\n                }\r\n            });\r\n\r\n\r\n            this.setState({\r\n                slots: response.data,\r\n                loading: false,\r\n                carfull: carfull,\r\n                cartotal: cartotal,\r\n                bikefull: bikefull,\r\n                biketotal: biketotal,\r\n                img: this.state.baseimg + \"?rng=\" + Math.random()\r\n            });\r\n            let params = queryString.parse(this.props.location.search);\r\n            if (params.edit) {\r\n                this.togglerRef.current.refresh(response.data)\r\n            }\r\n        })\r\n    }\r\n\r\n    getText(slot) {\r\n\r\n        if (slot.free)\r\n            return slot.misaligned ? (slot.name + \" (Misaligned)\") : slot.name;\r\n\r\n        return slot.misaligned ? (slot.name + \" (\" + this.fancyTime(slot.lastOccupiedSeconds) + \") \" + \" (Misaligned)\") : slot.name + \" (\" + this.fancyTime(slot.lastOccupiedSeconds) + \") \";\r\n    }\r\n\r\n    fancyTime(secs) {\r\n        if (secs <= 60)\r\n            return secs + \"s\";\r\n        if (secs <= 3600)\r\n            return Math.floor(secs / 60) +\"m\" + (secs % 60) + \"s\";\r\n    }\r\n    render() {\r\n        const loading = this.state.loading;\r\n        const data = this.state.slots;\r\n        const biketotal = this.state.biketotal;\r\n        const cartotal = this.state.cartotal;\r\n        const bikefull = this.state.bikefull;\r\n        const carfull = this.state.carfull;\r\n        const img = this.state.img;\r\n\r\n        console.log(\"R\", carfull, cartotal, bikefull, biketotal);\r\n        if (loading || !data) {\r\n            return (<div>Loading...</div>)\r\n        }\r\n\r\n        let params = queryString.parse(this.props.location.search);\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Row>\r\n                    <Col xl={{span: 12}} lg={{span: 12}} md={{span: 12}} sm={{span: 24}} xs={{span: 24}}>\r\n                        <Stage width={1280} height={724}>\r\n                            <Layer>\r\n                                <ParkingImage src={img}/>\r\n                                {Object.keys(data).map((k) => (\r\n                                    <Line\r\n                                        key={k}\r\n                                        points={[data[k].p1x, data[k].p1y, data[k].p2x, data[k].p2y, data[k].p3x, data[k].p3y, data[k].p4x, data[k].p4y,]}\r\n                                        stroke=\"red\" closed={true}/>\r\n                                ))}\r\n                                {Object.keys(data).map((k) => (\r\n                                    <Group>\r\n                                        <Label x={data[k].x}\r\n                                               y={data[k].y}\r\n\r\n                                        >\r\n                                            <Tag\r\n\r\n                                                fill={'black'}\r\n                                                pointerDirection='down'\r\n                                                pointerWidth={10}\r\n                                                pointerHeight={10}\r\n                                                lineJoin='round'\r\n                                                shadowColor={'black'}\r\n                                            />\r\n                                            <Text\r\n\r\n                                                text={this.getText(data[k])}\r\n                                                fontFamily='Calibri'\r\n                                                fontSize={12}\r\n                                                padding={3}\r\n                                                fill='white'\r\n                                            />\r\n\r\n\r\n                                        </Label>\r\n                                        <Star\r\n                                            key={k}\r\n                                            x={data[k].x}\r\n                                            y={data[k].y}\r\n                                            numPoints={20}\r\n                                            innerRadius={10}\r\n                                            outerRadius={10}\r\n                                            fill={data[k].free ? \"green\" : (data[k].misaligned ? 'blue' : 'red')}\r\n                                            opacity={1.0}\r\n                                            rotation={30}\r\n                                        />\r\n                                    </Group>\r\n                                ))}\r\n                            </Layer>\r\n                        </Stage>\r\n                    </Col>\r\n                    {/*\r\n                    <Col xl={{span: 12}} lg={{span: 12}} md={{span: 12}} sm={{span: 24}} xs={{span: 24}}>\r\n                        <Card>\r\n\r\n                            Car: <Slider value={carfull} tooltipVisible max={cartotal}/>\r\n                            Bike: <Slider value={bikefull} tooltipVisible max={biketotal}/>\r\n\r\n\r\n                        </Card>\r\n\r\n                    </Col>\r\n                    */}\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {params.edit && <SlotToggler ref={this.togglerRef} slots={data}/>}\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass SlotToggler extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let slotmap = {};\r\n        props.slots.forEach(v => {\r\n            slotmap[v.name] = v;\r\n        });\r\n\r\n        this.state = {\r\n            slots: slotmap,\r\n            selectedSlot: \"C1\",\r\n            ss: slotmap[\"C1\"]\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.updateSlot = this.updateSlot.bind(this);\r\n        this.onAlignmentChange = this.onAlignmentChange.bind(this);\r\n        this.onFreeChange = this.onFreeChange.bind(this);\r\n    }\r\n\r\n    refresh(data) {\r\n        let slotmap = {};\r\n\r\n        data.forEach(v => {\r\n            slotmap[v.name] = v;\r\n        });\r\n        let ss = slotmap[this.state.selectedSlot];\r\n        this.setState({\r\n            slots: slotmap,\r\n            ss: ss\r\n        });\r\n    }\r\n\r\n    handleChange(value) {\r\n        let slot = this.state.slots[this.state.selectedSlot];\r\n        this.setState({selectedSlot: value, ss: slot});\r\n    }\r\n\r\n    onAlignmentChange(value) {\r\n        let slot = this.state.ss;\r\n        slot.misaligned = value;\r\n        this.setState({ss: slot});\r\n    }\r\n\r\n    onFreeChange(value) {\r\n        let slot = this.state.ss;\r\n        slot.free = value;\r\n        this.setState({ss: slot});\r\n    }\r\n\r\n    updateSlot() {\r\n        ApmsService.updateSlot(this.state.ss)\r\n    }\r\n\r\n    render() {\r\n        const ss = this.state.ss;\r\n        const slots = this.props.slots;\r\n        return (\r\n            <div>\r\n                <table>\r\n                    <tr>\r\n                        <th>Slot</th>\r\n                        <th>Free</th>\r\n                        <th>MisAligned</th>\r\n                        <th>&nbsp;</th>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <Select onChange={this.handleChange} value={ss.name}>\r\n\r\n                                {(slots || []).map((slot, index) => {\r\n                                    return <Option value={slot.name}>{slot.name}</Option>\r\n                                })}\r\n\r\n                            </Select>\r\n                        </td>\r\n                        <td>\r\n                            <Switch checked={ss.free} onChange={this.onFreeChange}/>\r\n                        </td>\r\n                        <td>\r\n                            <Switch checked={ss.misaligned} onChange={this.onAlignmentChange}/>\r\n                        </td>\r\n                        <td><Button onClick={this.updateSlot}>GO</Button></td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import axios from \"./axios\";\r\nimport moment from 'moment';\r\nimport { authHeader } from '../helpers/auth-header';\r\nimport { config } from '../helpers/config'\r\n\r\nclass ReportService {\r\n\r\n    static Instance() {\r\n        return new ReportService()\r\n    }\r\n\r\n    getParkingEventsReport(req) {\r\n\r\n         const request = {\r\n                method: 'POST',\r\n                headers: authHeader(),\r\n                responseType: 'blob',\r\n                data: JSON.stringify(req),\r\n                url: config.apiUrl + 'api/report/parkingevents'\r\n            };\r\n        return axios(request);\r\n    }\r\n\r\n}\r\n\r\nexport default ReportService.Instance()","import React, {Component} from \"react\";\r\nimport {Button, Card, DatePicker, Dropdown, Icon, Menu, Modal, Select,Row,Col,Form,Spin} from \"antd\";\r\nimport DashboardService from \"../../services/DashboardService\";\r\nimport ReportService from \"../../services/ReportService\";\r\nimport CommonService from \"../../services/CommonService\";\r\nimport moment from 'moment';\r\nimport { saveAs } from 'file-saver';\r\n\r\nconst {Option} = Select;\r\nconst {RangePicker} = DatePicker;\r\n\r\nexport default class HomeView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isOpencustomDateRangeModal: \"\",\r\n            atcc: {\r\n                filter: {\r\n                    selectedCustomDateRange: \"Today\",\r\n                    selectedXAxisOption: \"All Entry-Exit\",\r\n                    fromDate: moment().startOf('day').toDate(),\r\n                    toDate: moment().endOf('day').toDate(),\r\n                    reportType:\"CSV\",\r\n                    filterType:\"inout\"\r\n                },\r\n                chartData: {\r\n                    labels: [],\r\n                    datasets: []\r\n                }\r\n            }, incident: {\r\n                filter: {\r\n                    selectedCustomDateRange: \"Today\",\r\n                    selectedXAxisOption: \"Hourly\",\r\n                    fromDate: {},\r\n                    toDate: {}\r\n                },\r\n                chartData: {\r\n                    labels: [],\r\n                    datasets: []\r\n                }\r\n            },\r\n            downloading:false,\r\n        };\r\n\r\n        this.selectDateRange = this.selectDateRange.bind(this);\r\n        this.selectXAxisOption = this.selectXAxisOption.bind(this);\r\n\r\n        this.getDateRangeOptions = this.getDateRangeOptions.bind(this);\r\n        this.getXAxisOptions = this.getXAxisOptions.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.downloadReport = this.downloadReport.bind(this);\r\n        this.handleChangeReportType = this.handleChangeReportType.bind(this);\r\n    }\r\n\r\n    handleChange(value) {\r\n\r\n        let atcc= {...this.state.atcc}\r\n        let filter= atcc.filter;\r\n        filter.filterType= value;\r\n\r\n        this.setState({atcc:atcc})\r\n    }\r\n\r\n    handleChangeReportType(value) {\r\n        let atcc= {...this.state.atcc}\r\n        let filter= atcc.filter;\r\n        filter.reportType= value;\r\n        this.setState({atcc:atcc})\r\n    }\r\n\r\n    showCustomDateRangeModal(graphName) {\r\n        this.setState({\r\n            isOpencustomDateRangeModal: graphName,\r\n        });\r\n    };\r\n\r\n    handleCancel = e => {\r\n        this.setState({\r\n            isOpencustomDateRangeModal: \"\",\r\n        });\r\n    };\r\n\r\n    selectDateRange(graphName, selectedCustomDateRangeEnum, selectedCustomDateRangeMoment) {\r\n        let {isOpencustomDateRangeModal} = this.state;\r\n        let graph = this.state[graphName];\r\n        graph.filter.selectedCustomDateRange = selectedCustomDateRangeEnum;\r\n        let fromToDate = DashboardService.extractFromToDate(graph.filter.selectedCustomDateRange, selectedCustomDateRangeMoment);\r\n        graph.filter.fromDate = fromToDate.from_date;\r\n        graph.filter.toDate = fromToDate.to_date;\r\n\r\n\r\n        if (selectedCustomDateRangeEnum === \"Custom\") {\r\n            isOpencustomDateRangeModal = \"\"\r\n        }\r\n        this.setState({[graphName]: graph, isOpencustomDateRangeModal}, () => {\r\n          //  this.refresh();\r\n        });\r\n\r\n    }\r\n\r\n    downloadReport(){\r\n        this.setState({downloading:true})\r\n       let filter= this.state.atcc.filter;\r\n        var req={\r\n             fromDateString: moment(filter.fromDate).format('YYYY-MM-DD HH:mm:ss'),\r\n             toDateString: moment(filter.toDate).format('YYYY-MM-DD HH:mm:ss\"'),\r\n             xAxis: filter.selectedXAxisOption,\r\n             reportType:filter.reportType,\r\n             filterType:filter.filterType\r\n        }\r\n\r\n        ReportService.getParkingEventsReport(req).then(response => {\r\n            this.setState({downloading: false});\r\n\r\n            if(filter.reportType==\"CSV\"){\r\n                 saveAs(response.data, \"parking-events.csv\");\r\n            }\r\n            else if(filter.reportType==\"JSON\"){\r\n                 saveAs(response.data, \"parking-events.json\");\r\n            }\r\n\r\n        }).catch(error => {\r\n            this.setState({downloading: false});\r\n        });\r\n    }\r\n\r\n    selectXAxisOption(graphName, selectedXAxisOption) {\r\n        let graph = this.state[graphName];\r\n        graph.filter.selectedXAxisOption = selectedXAxisOption;\r\n        this.setState({[graphName]: graph});\r\n    }\r\n\r\n    getXAxisOptions(graphName) {\r\n        return (<Menu>\r\n\r\n            <Menu.Item key=\"1\"\r\n                       onClick={() => this.selectXAxisOption(graphName, \"All Entry-Exit\")}>\r\n                All Entry-Exit\r\n            </Menu.Item>\r\n            <Menu.Item key=\"5\"\r\n                       onClick={() => this.selectXAxisOption(graphName, \"DayWise Summary\")}>\r\n                DayWise Summary\r\n            </Menu.Item>\r\n        </Menu>)\r\n    }\r\n\r\n    getDateRangeOptions(graphName) {\r\n        return (\r\n            <Menu>\r\n                <Menu.Item key=\"1\" onClick={() => this.selectDateRange(graphName, \"Today\")}>\r\n                    Today\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" onClick={() => this.selectDateRange(graphName, \"Yesterday\")}>\r\n                    Yesterday\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" onClick={() => this.selectDateRange(graphName, \"This week\")}>\r\n                    This week\r\n                </Menu.Item>\r\n                <Menu.Item key=\"4\" onClick={() => this.selectDateRange(graphName, \"Last week\")}>\r\n                    Last week\r\n                </Menu.Item>\r\n                <Menu.Item key=\"5\" onClick={() => this.selectDateRange(graphName, \"This month\")}>\r\n                    This month\r\n                </Menu.Item>\r\n                <Menu.Item key=\"6\" onClick={() => this.selectDateRange(graphName, \"This year\")}>\r\n                    This year\r\n                </Menu.Item>\r\n                <Menu.Item key=\"7\" onClick={() => this.selectDateRange(graphName, \"Last year\")}>\r\n                    Last year\r\n                </Menu.Item>\r\n                <Menu.Item onClick={() => this.showCustomDateRangeModal(graphName)}>\r\n                    Custom\r\n                </Menu.Item>\r\n\r\n            </Menu>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let {atcc, incident} = this.state;\r\n        const antIcon = <Icon type=\"loading\" style={{fontSize: 24}} spin/>;\r\n        return (\r\n            <div>\r\n                <div>\r\n\r\n                    <Modal\r\n                        onCancel={this.handleCancel}\r\n                        title=\"Custom Date Range\"\r\n                        visible={this.state.isOpencustomDateRangeModal ? true : false}\r\n                        footer={[]}\r\n                    >\r\n                        <RangePicker\r\n                            onChange={(changedDateRange) => this.selectDateRange(this.state.isOpencustomDateRangeModal, \"Custom\", changedDateRange)}/>\r\n                    </Modal>\r\n                </div>\r\n                <Row>\r\n                     <Col xl={{span: 8}} lg={{span: 6}} md={{span: 4}} sm={{span: 2}} xs={{span: 2}}/>\r\n                     <Col xl={{span: 8}} lg={{span: 12}} md={{span: 12}} sm={{span: 24}} xs={{span: 24}}>\r\n                         <Card title={<div>Parking Guidance Report</div>}>\r\n                             <Form>\r\n                                 <Form.Item>\r\n                                    Select Date Range\r\n                                    <Dropdown overlay={() => this.getDateRangeOptions(\"atcc\")}>\r\n                                        <Button style={{width: '-webkit-fill-available'}}>\r\n                                            {atcc.filter.selectedCustomDateRange ? atcc.filter.selectedCustomDateRange : \"Select\"}\r\n                                            <Icon\r\n                                                type=\"down\"/>\r\n                                        </Button>\r\n                                    </Dropdown>\r\n                                 </Form.Item>\r\n\r\n                                  <Form.Item>\r\n                                     Report Type\r\n                                     <Dropdown overlay={() => this.getXAxisOptions(\"atcc\")}>\r\n                                        <Button style={{width: '-webkit-fill-available'}}>\r\n                                             {atcc.filter.selectedXAxisOption ? atcc.filter.selectedXAxisOption : \"Select\"} <Icon\r\n                                             type=\"down\"/>\r\n                                         </Button>\r\n                                     </Dropdown>\r\n\r\n                                  </Form.Item>\r\n                                  {/*<Form.Item>\r\n\r\n                                     <Select defaultValue=\"inout\" onChange={this.handleChange}>\r\n                                         <Option value=\"inout\">In/Out Report</Option>\r\n                                     </Select>\r\n\r\n                                  </Form.Item> */}\r\n                                   <Form.Item>\r\n                                        Report Format\r\n                                       <Select defaultValue=\"CSV\" onChange={this.handleChangeReportType}>\r\n                                           <Option value=\"CSV\">CSV</Option>\r\n                                           <Option value=\"JSON\">JSON</Option>\r\n                                       </Select>\r\n\r\n                                   </Form.Item>\r\n                                 <Form.Item>\r\n                                  <Button type=\"primary\" htmlType=\"submit\" onClick={this.downloadReport} block loading={this.state.downloading}>\r\n                                         Download\r\n                                  </Button>\r\n                                 </Form.Item>\r\n                             </Form>\r\n\r\n                         </Card>\r\n                     </Col>\r\n                </Row>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport {\r\n    Card,\r\n    Col,\r\n    Icon,\r\n    Row,\r\n    Table,\r\n    Input, Button, Spin\r\n} from 'antd';\r\n\r\nimport Moment from \"react-moment\";\r\nimport moment from \"moment\";\r\nimport ApmsService from \"../../services/ApmsService\";\r\n\r\nconst {Column} = Table;\r\nconst {Search} = Input;\r\nconst antIcon = <Icon type=\"loading\" style={{fontSize: 24}} spin/>;\r\n\r\nexport default class ParkingInOutView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: {\r\n                checkIn: false,\r\n                checkOut: false\r\n            },\r\n\r\n            vehicleLastParkingEvent: {},\r\n            filter: {\r\n                page: 1,\r\n                pageSize: 10,\r\n                loading: false,\r\n                apmsresponse: {},\r\n                vehicleNo: \"\",\r\n            }\r\n        };\r\n\r\n        this.refresh = this.refresh.bind(this);\r\n        this.copyVehicleNo = this.copyVehicleNo.bind(this);\r\n        this.getEventsList = this.getEventsList.bind(this);\r\n        this.addCheckIn = this.addCheckIn.bind(this);\r\n        this.onLprInputChange = this.onLprInputChange.bind(this);\r\n        this.addCheckOut = this.addCheckOut.bind(this);\r\n        this.onPageChange = this.onPageChange.bind(this);\r\n        this.onPageSizeChange = this.onPageSizeChange.bind(this);\r\n    }\r\n\r\n    refresh() {\r\n        let filter = this.state.filter;\r\n        filter.page = 1;\r\n        this.getEventsList(filter);\r\n        if (filter.vehicleNo && filter.vehicleNo.length > 2) {\r\n            this.getEventsStatus(filter.vehicleNo);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n\r\n    onLprInputChange(e) {\r\n        let filter = this.state.filter;\r\n        filter.vehicleNo = e.target.value;\r\n        this.setState({filter: filter});\r\n        if (filter.vehicleNo && filter.vehicleNo.length > 2) {\r\n            this.getEventsStatus(filter.vehicleNo);\r\n        }\r\n    }\r\n\r\n    onPageChange(page, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.page = page;\r\n        filter.pageSize = pageSize;\r\n        this.getEventsList(filter)\r\n\r\n    }\r\n\r\n    onPageSizeChange(current, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.pageSize = pageSize;\r\n        this.getEventsList(filter);\r\n    }\r\n\r\n    copyVehicleNo(vehicleNo) {\r\n        let filter = this.state.filter;\r\n        filter.vehicleNo = vehicleNo;\r\n        this.setState({filter: filter});\r\n        if (filter.vehicleNo && filter.vehicleNo.length > 2) {\r\n            this.getEventsStatus(filter.vehicleNo);\r\n        }\r\n    }\r\n\r\n    addCheckIn() {\r\n\r\n        let vehicleNo = this.state.filter.vehicleNo;\r\n        let {loading} = this.state;\r\n        if (vehicleNo) {\r\n            loading.checkIn = true;\r\n            this.setState({loading});\r\n            ApmsService.checkIn(vehicleNo).then(response => {\r\n                this.refresh();\r\n                loading.checkIn = false;\r\n                this.setState({loading});\r\n            }).catch(error => {\r\n                loading.checkIn = false;\r\n                this.setState({loading});\r\n                alert(\"Something went wrong\");\r\n            })\r\n        }\r\n    }\r\n\r\n    addCheckOut() {\r\n        let vehicleNo = this.state.filter.vehicleNo;\r\n        let {loading} = this.state;\r\n        if (vehicleNo) {\r\n            loading.checkOut = true;\r\n            this.setState({loading});\r\n            ApmsService.checkOut(vehicleNo).then(response => {\r\n                loading.checkOut = false;\r\n                this.setState({loading});\r\n                this.refresh();\r\n            }).catch(error => {\r\n                loading.checkOut = false;\r\n                this.setState({loading});\r\n                alert(\"Something went wrong\");\r\n            })\r\n        }\r\n    }\r\n\r\n    getEventsStatus(vehicleNo) {\r\n        ApmsService.getEventStatus(vehicleNo).then(response => {\r\n            this.setState({vehicleLastParkingEvent: response.data})\r\n        }).catch(error => {\r\n            alert(\"Something went wrong\");\r\n        });\r\n    }\r\n\r\n    getEventsList(filter) {\r\n\r\n        filter.loading = true;\r\n        this.setState({filter: filter});\r\n\r\n        ApmsService.getEvents(filter).then(response => {\r\n            filter.loading = false;\r\n            filter.apmsresponse = response.data;\r\n            for (var i in filter.apmsresponse.events) {\r\n                filter.apmsresponse.events[i].timeDiff = this.getTimeDifference(filter.apmsresponse.events[i]);\r\n            }\r\n            this.setState({filter: filter});\r\n        }).catch(error => {\r\n            filter.loading = false;\r\n            this.setState({hasError: true});\r\n            alert(\"Something went wrong\");\r\n        });\r\n    }\r\n\r\n    getTimeDifference(record) {\r\n        var a = moment(record.checkIn);\r\n        var b = moment(record.checkOut);\r\n\r\n        if (a & b) {\r\n            return (moment.utc(moment(b, \"DD/MM/YYYY HH:mm\").diff(moment(a, \"DD/MM/YYYY HH:mm\"))).format(\"HH:mm\"))\r\n        }\r\n    }\r\n\r\n    isEmpty(obj) {\r\n\r\n        // null and undefined are \"empty\"\r\n        if (obj == null) return true;\r\n\r\n        // Assume if it has a length property with a non-zero value\r\n        // that that property is correct.\r\n        if (obj.length > 0) return false;\r\n        if (obj.length === 0) return true;\r\n\r\n        // If it isn't an object at this point\r\n        // it is empty, but it can't be anything *but* empty\r\n        // Is it empty?  Depends on your application.\r\n        if (typeof obj !== \"object\") return true;\r\n\r\n        // Otherwise, does it have any properties of its own?\r\n        // Note that this doesn't handle\r\n        // toString and valueOf enumeration bugs in IE < 9\r\n        for (let key in obj) {\r\n            if (hasOwnProperty.call(obj, key)) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getEventId() {\r\n        let filter = {...this.state.filter};\r\n        if (!filter.loading) {\r\n            if (filter.apmsresponse.events) {\r\n                if (filter.apmsresponse.events.length > 0) {\r\n                    return parseInt(filter.apmsresponse.events[0].id);\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    render() {\r\n\r\n        let filter = this.state.filter;\r\n        let events = this.state.filter.apmsresponse.events;\r\n        let vehicleNo = this.state.filter.vehicleNo;\r\n        let vehicleLastParkingEvent = this.state.vehicleLastParkingEvent;\r\n        let loading = this.state.loading;\r\n        let count = this.state.filter.apmsresponse.totalPages * this.state.filter.apmsresponse.pageSize;\r\n\r\n        const paginationOption = {\r\n            showSizeChanger: false,\r\n            showQuickJumper: false,\r\n\r\n            showLessItems: true,\r\n            onShowSizeChange: this.onPageSizeChange,\r\n            onChange: this.onPageChange,\r\n            total: count\r\n        };\r\n        const pagination = {\r\n            ...paginationOption,\r\n            total: count,\r\n            current: this.state.filter.page,\r\n            pageSizes: this.state.filter.pageSize\r\n        };\r\n\r\n        let disableCheckIn = true;\r\n        let disableCheckOut = true;\r\n\r\n        if ((this.isEmpty(vehicleLastParkingEvent) || vehicleLastParkingEvent.checkOut) && vehicleNo) {\r\n            disableCheckIn = false;\r\n        }\r\n        if ((!(this.isEmpty(vehicleLastParkingEvent)) && (!vehicleLastParkingEvent.checkOut)) && vehicleNo) {\r\n            disableCheckOut = false;\r\n\r\n        }\r\n\r\n        return (\r\n\r\n            <div>\r\n                <h3>Parking Event</h3>\r\n                <Card>\r\n                    <Row>\r\n                        <Col xl={{span: 12}} lg={{span: 12}} md={{span: 12}} sm={{span: 24}} xs={{span: 24}}>\r\n\r\n                            <img width=\"440\" height=\"260\"\r\n                                 src={\"/public/apms/parking/event/\" + vehicleLastParkingEvent.id + \"/image.jpg\"}/>\r\n\r\n                        </Col>\r\n\r\n                        <Col xl={{span: 12}} lg={{span: 12}} md={{span: 12}} sm={{span: 24}} xs={{span: 24}}>\r\n\r\n                            <Search allowClear\r\n                                    value={vehicleNo}\r\n                                    placeholder=\"Enter Vehicle No.\"\r\n                                    enterButton=\"Search\"\r\n                                    onChange={this.onLprInputChange}\r\n                                    size=\"large\"\r\n\r\n                                    onSearch={() => this.onPageChange(1, filter.pageSize)}\r\n\r\n                            /><br/><br/><br/>\r\n\r\n\r\n                            <Button type=\"primary\" size=\"large\" block=\"false\" icon={\"arrow-down\"}\r\n                                    loading={loading.checkIn} disabled={disableCheckIn}\r\n                                    onClick={() => this.addCheckIn()}>\r\n                                Entry\r\n                            </Button><br/><br/><br/>\r\n\r\n\r\n                            <Button type=\"primary\" size=\"large\" block=\"false\" icon={\"arrow-up\"}\r\n                                    loading={loading.checkOut} disabled={disableCheckOut}\r\n                                    onClick={() => this.addCheckOut()}>\r\n                                Exit\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <br/>\r\n                </Card>\r\n\r\n\r\n                {\r\n                    this.state.filter.loading\r\n                        ? <Spin indicator={antIcon}/>\r\n                        : <div>\r\n\r\n                            <div>\r\n                                <Table dataSource={events} pagination={pagination}>\r\n\r\n                                    <Column title=\"Vehicle no.\" dataIndex=\"vehicleNo\" key=\"vehicleNo\"\r\n\r\n                                            render={vehicleNo => (<Button\r\n                                                onClick={() => this.copyVehicleNo(vehicleNo)}>{vehicleNo}</Button>)}/>\r\n                                    <Column title=\"Entry-time\" dataIndex=\"checkIn\" key=\"checkIn\"\r\n                                            render={checkIn => (<div>\r\n                                                <div><Moment format=\"LLL\">{checkIn}</Moment></div>\r\n                                                <Moment fromNow>{checkIn}</Moment></div>)}/>\r\n                                    <Column title=\"Exit-time\" dataIndex=\"checkOut\" key=\"checkOut\"\r\n                                            render={checkOut => (checkOut ? <div>\r\n                                                    <div>\r\n                                                        <Moment format=\"LLL\">{checkOut}</Moment>\r\n                                                    </div>\r\n                                                    <Moment fromNow>{checkOut}</Moment>\r\n                                                </div> : \"\"\r\n                                            )}\r\n                                    />\r\n                                    <Column title=\"Time-diff(HH:mm)\" render={(text, record) => (record.timeDiff)}/>\r\n                                </Table>\r\n                            </div>\r\n                        </div>\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n","import React, {Component} from \"react\";\r\nimport {Button, DatePicker, Icon, TimePicker} from 'antd';\r\n\r\n\r\nexport default class DeviceView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            layout: \"list\",\r\n            filter: {\r\n                page: 1,\r\n                pageSize: 10\r\n            }\r\n        };\r\n        this.onFromDateChange = this.onFromDateChange.bind(this);\r\n        this.onFromTimeChange = this.onFromTimeChange.bind(this);\r\n        this.onToDateChange = this.onToDateChange.bind(this);\r\n        this.onToTimeChange = this.onToTimeChange.bind(this);\r\n        this.onPageChange = this.onPageChange.bind(this);\r\n        this.onPageSizeChange = this.onPageSizeChange.bind(this);\r\n        this.refresh = this.refresh.bind(this);\r\n    }\r\n\r\n    refresh() {\r\n        this.props.handleRefresh();\r\n    }\r\n\r\n    onPageChange(page, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.page = page;\r\n        filter.pageSize = pageSize;\r\n        this.refreshNow(filter)\r\n    }\r\n\r\n    onPageSizeChange(current, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.pageSize = pageSize;\r\n        this.refreshNow(filter);\r\n    }\r\n\r\n    onFromDateChange(date) {\r\n        let filter = this.state.filter;\r\n        if (date != null) {\r\n            filter.fromDate = date.format(\"YYYY-MM-DD\");\r\n        } else {\r\n            filter.fromDate = null;\r\n        }\r\n        this.setState({filter: filter});\r\n        this.props.handleFilterChange(filter);\r\n    }\r\n\r\n    onFromTimeChange(time) {\r\n        let filter = this.state.filter;\r\n        if (time != null) {\r\n            filter.fromTime = time.format(\"HH:mm:ss\");\r\n        } else {\r\n            filter.fromTime = null;\r\n        }\r\n        this.setState({filter: filter});\r\n        this.props.handleFilterChange(filter);\r\n    }\r\n\r\n    onToDateChange(date) {\r\n        let filter = this.state.filter;\r\n        if (date != null) {\r\n            filter.toDate = date.format(\"YYYY-MM-DD\");\r\n        } else {\r\n            filter.toDate = null;\r\n        }\r\n        this.setState({filter: filter});\r\n        this.props.handleFilterChange(filter);\r\n    }\r\n\r\n    onToTimeChange(time) {\r\n        let filter = this.state.filter;\r\n        if (time != null) {\r\n            filter.toTime = time.format(\"HH:mm:ss\");\r\n        } else {\r\n            filter.toTime = null;\r\n        }\r\n        this.setState({filter: filter});\r\n        this.props.handleFilterChange(filter);\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div>\r\n                <span>From: </span>\r\n                <DatePicker onChange={this.onFromDateChange}/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <TimePicker minuteStep={15} secondStep={60}\r\n                            onChange={this.onFromTimeChange}/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <span>To: </span>\r\n                <DatePicker onChange={this.onToDateChange}/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <TimePicker minuteStep={15} secondStep={60}\r\n                            onChange={this.onToTimeChange}/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <Button onClick={() => {\r\n                    this.refresh()\r\n                }}><Icon type=\"reload\"/>Reload</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import axios from \"./axios\";\r\n\r\nclass ApcFileService{\r\nstatic Instance() {\r\n        return new ApcFileService()\r\n}\r\n\r\ngetPeopleData(filter) {\r\n        return axios.post('/api/apc/pplData', filter);\r\n}\r\n\r\n\r\n archiveEvent(event) {\r\n        return axios.delete('/api/apc/'+ event.id);\r\n    }\r\n}\r\nexport default ApcFileService.Instance()","import React, {Component} from \"react\";\r\nimport {\r\n    Collapse,\r\n    Empty,\r\n    Table,\r\n    message, Input, Typography\r\n} from 'antd';\r\n\r\nimport ApcGenericFilter from \"./ApcGenericFilter\";\r\nimport Moment from \"react-moment\";\r\nimport ApcFileService from \"../../services/ApcFileService\";\r\n\r\nconst {Paragraph} = Typography;\r\nconst {Column} = Table;\r\nconst {Panel} = Collapse;\r\n\r\nexport default class PeopleCounting extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            events: {},\r\n            filter: {\r\n                page: 1,\r\n                pageSize: 24\r\n\r\n            },\r\n        };\r\n\r\n        this.refresh = this.refresh.bind(this);\r\n        this.handleRefresh = this.handleRefresh.bind(this);\r\n        this.onPageChange = this.onPageChange.bind(this);\r\n        this.onPageSizeChange = this.onPageSizeChange.bind(this);\r\n        this.handleFilterChange = this.handleFilterChange.bind(this);\r\n        this.onEventIdInputChange = this.onEventIdInputChange.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    onPageSizeChange(current, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.page = current;// Here i made change\r\n        filter.pageSize = pageSize;\r\n        this.refresh(filter);\r\n    }\r\n\r\n    refresh(filter) {\r\n        if (!filter) {\r\n            filter = this.state.filter;\r\n        }\r\n        this.setState({loading: true});\r\n        ApcFileService.getPeopleData(filter).then(response => {\r\n            let data = response.data;\r\n            filter.pageSize = data.pageSize;\r\n            filter.currentPage = data.pageNumber;\r\n            filter.totalPages = data.totalPages;\r\n            this.setState({filter, loading: false, events: data.list});\r\n        }).catch(error => {\r\n            message.error(\"Error, something went wrong!!\")\r\n        })\r\n    }\r\n\r\n    handleFilterChange(data) {\r\n        this.setState({filter: data})\r\n    }\r\n\r\n    handleRefresh() {\r\n        this.refresh(this.state.refresh);\r\n    }\r\n\r\n    onPageChange(page, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.page = page;\r\n        filter.pageSize = pageSize;\r\n        this.refresh(filter)\r\n    }\r\n\r\n    archiveEvent(event) {\r\n        ApcFileService.archiveEvent(event).then(() => {\r\n            this.refresh();\r\n        })\r\n\r\n    }\r\n\r\n    onEventIdInputChange(e) {\r\n        let filter = this.state.filter;\r\n        filter.eventId = e.target.value;\r\n        console.log(filter);\r\n        this.setState({filter: filter})\r\n    }\r\n\r\n    render() {\r\n        let eventId = this.state.filter.eventId;\r\n        return (\r\n            <div>\r\n                <Collapse bordered={true} defaultActiveKey={['1']}>\r\n                    <Panel header=\"Filter\" key=\"1\">\r\n                        Event Id: <Input value={eventId} style={{\"width\": \"200px\"}}\r\n                                         onChange={this.onEventIdInputChange}/> <br/><br/>\r\n                        <ApcGenericFilter handleRefresh={this.refresh} filter={this.state.filter}\r\n                                          handleFilterChange={this.handleFilterChange}\r\n                        />\r\n                    </Panel>\r\n                </Collapse>\r\n                <div>\r\n                    {this.renderTable()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTable() {\r\n\r\n        if (this.state.loading || !this.state.events || this.state.events.length === 0) {\r\n            return <Empty description={false}/>\r\n        }\r\n        let events = this.state.events;\r\n        let count = this.state.filter.totalPages * this.state.filter.pageSize;\r\n        const paginationOptions = {\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            onShowSizeChange: this.onPageSizeChange,\r\n            onChange: this.onPageChange,\r\n            total: count\r\n        };\r\n        const pagination = {\r\n            ...paginationOptions,\r\n            total: count,\r\n            current: this.state.filter.currentPage,\r\n            pageSize: this.state.filter.pageSize\r\n        };\r\n        return (<div>\r\n                <Table dataSource={events} pagination={pagination}>\r\n                    <Column title=\"ID\" dataIndex=\"eventId\" key=\"eventId\"\r\n                            render={eventId => <Paragraph strong copyable>{eventId}</Paragraph>}/>\r\n                    <Column title=\"Date\" dataIndex=\"eventDate\" key=\"eventDate\"\r\n                            render={eventDate => (<Moment format=\"L\">{eventDate}</Moment>)}/>\r\n                    <Column title=\"Archived\" dataIndex=\"archived\" key=\"archived\"\r\n                            render={archived => (<p>{archived ? \"Archived\" : \"Active\"}</p>)}/>\r\n                    <Column title=\"Direction\" dataIndex=\"direction\" key=\"direction\"\r\n                            render={direction => direction}/>\r\n                </Table>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}","import axios from \"./axios\";\r\nimport moment from 'moment';\r\n\r\nclass ApcDashboardService {\r\n\r\n    static Instance() {\r\n        return new ApcDashboardService()\r\n    }\r\n\r\n    getApcPeopleCount(fromDate, toDate, xAxis) {\r\n        let filter = {\r\n            fromDateString: moment(fromDate).format('YYYY-MM-DD HH:mm:ss'),\r\n            toDateString: moment(toDate).format('YYYY-MM-DD HH:mm:ss\"'),\r\n            xAxis: xAxis\r\n        };\r\n        return axios.post('/api/apc/dashboard/peoplecount', filter);\r\n    }\r\n\r\n    getApcPeakHour(fromDate, toDate) {\r\n        let filter = {\r\n            fromDateString: moment(fromDate).format('YYYY-MM-DD HH:mm:ss'),\r\n            toDateString: moment(toDate).format('YYYY-MM-DD HH:mm:ss\"')\r\n        };\r\n        return axios.post('/api/apc/dashboard/peakhour', filter);\r\n    }\r\n\r\n    getColor(index) {\r\n        let color = \"\";\r\n        let colors = [\r\n            '#e83e8c',\r\n            '#dc3545',\r\n            '#007bff',\r\n            '#6610f2',\r\n            '#fd7e14',\r\n            '#ffc107',\r\n            '#28a745',\r\n            '#20c997',\r\n            '#17a2b8',\r\n            '#6c757d',\r\n            '#343a40',\r\n            '#6f42c1'];\r\n\r\n        color = colors[index];\r\n        if (color) {\r\n            return color;\r\n        }\r\n        return this.getRandomColor();\r\n\r\n    }\r\n\r\n\r\n    getRandomColor() {\r\n        let letters = '0123456789ABCDEF';\r\n        let color = '#';\r\n        for (let i = 0; i < 6; i++) {\r\n            color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    }\r\n\r\n\r\n    extractFromToDate(selectedCustomDateRangeEnum, selectedCustomDateRangeMoment) {\r\n\r\n        let baseDate;\r\n        let from_date;\r\n        let to_date;\r\n        switch (selectedCustomDateRangeEnum) {\r\n            case  \"Today\":\r\n                baseDate = moment();\r\n                from_date = baseDate.startOf('day').toDate();\r\n                to_date = baseDate.endOf('day').toDate();\r\n                break;\r\n            case  \"Yesterday\":\r\n                baseDate = moment().subtract(1, 'days');\r\n                from_date = baseDate.startOf('day').toDate();\r\n                to_date = baseDate.endOf('day').toDate();\r\n                break;\r\n            case  \"This week\":\r\n                baseDate = moment();\r\n                from_date = baseDate.startOf('week').toDate();\r\n                to_date = baseDate.endOf('week').toDate();\r\n                break;\r\n            case  \"This month\":\r\n                baseDate = moment();\r\n                from_date = baseDate.startOf('month').toDate();\r\n                to_date = baseDate.endOf('month').toDate();\r\n                break;\r\n            case  \"This quarter\":\r\n                baseDate = moment();\r\n                from_date = baseDate.startOf('quarter').toDate();\r\n                to_date = baseDate.endOf('quarter').toDate();\r\n                break;\r\n            case  \"This year\":\r\n                baseDate = moment();\r\n                from_date = baseDate.startOf('year').toDate();\r\n                to_date = baseDate.endOf('year').toDate();\r\n                break;\r\n            case  \"Last week\":\r\n                baseDate = moment().subtract(1, 'weeks');\r\n                from_date = baseDate.startOf('week').toDate();\r\n                to_date = baseDate.endOf('week').toDate();\r\n                break;\r\n            case  \"Last month\":\r\n                baseDate = moment().subtract(1, 'months');\r\n                from_date = baseDate.startOf('month').toDate();\r\n                to_date = baseDate.endOf('month').toDate();\r\n                break;\r\n            case  \"Last quarter\":\r\n                baseDate = moment().subtract(1, 'quarters');\r\n                from_date = baseDate.startOf('quarter').toDate();\r\n                to_date = baseDate.endOf('quarter').toDate();\r\n                break;\r\n            case  \"Last year\":\r\n                baseDate = moment().subtract(1, 'years');\r\n                from_date = baseDate.startOf('year').toDate();\r\n                to_date = baseDate.endOf('year').toDate();\r\n                break;\r\n            case  \"Second Last week\":\r\n                baseDate = moment().subtract(2, 'weeks');\r\n                from_date = baseDate.startOf('week').toDate();\r\n                to_date = baseDate.endOf('week').toDate();\r\n                break;\r\n            case  \"Second Last month\":\r\n                baseDate = moment().subtract(2, 'months');\r\n                from_date = baseDate.startOf('month').toDate();\r\n                to_date = baseDate.endOf('month').toDate();\r\n                break;\r\n            case  \"Second Last quarter\":\r\n                baseDate = moment().subtract(2, 'quarters');\r\n                from_date = baseDate.startOf('quarter').toDate();\r\n                to_date = baseDate.endOf('quarter').toDate();\r\n                break;\r\n            case  \"Second Last year\":\r\n                baseDate = moment().subtract(2, 'years');\r\n                from_date = baseDate.startOf('year').toDate();\r\n                to_date = baseDate.endOf('year').toDate();\r\n                break;\r\n            case  \"Custom\":\r\n                from_date = selectedCustomDateRangeMoment[0].toDate();\r\n                to_date = selectedCustomDateRangeMoment[1].toDate();\r\n                break;\r\n        }\r\n\r\n        return {\r\n            from_date: from_date,\r\n            to_date: to_date\r\n        }\r\n    }\r\n}\r\n\r\nexport default ApcDashboardService.Instance();","import React, {Component} from \"react\";\r\nimport {\r\n    Col,\r\n    Row,\r\n    DatePicker,\r\n    Button,\r\n    Icon,\r\n    Card,\r\n    Modal,\r\n    Menu,\r\n    Dropdown,\r\n    Table\r\n} from \"antd\";\r\nimport ApcDashboardService from \"../../services/ApcDashboardService\";\r\nimport { Line, Doughnut} from 'react-chartjs-2';\r\n\r\nconst {RangePicker} = DatePicker;\r\nconst {Column} = Table;\r\n\r\nexport default class ApcDashboard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isOpencustomDateRangeModal: \"\",\r\n            apc: {\r\n                filter: {\r\n                    selectedCustomDateRange: \"Today\",\r\n                    selectedXAxisOption: \"Hourly\",\r\n                    fromDate: {},\r\n                    toDate: {}\r\n                },\r\n                chartData: {\r\n                    labels: [],\r\n                    datasets: []\r\n                }\r\n            },\r\n            peakhour: {\r\n                filter: {\r\n                    selectedCustomDateRange: \"Today\",\r\n\r\n                    fromDate: {},\r\n                    toDate: {}\r\n                },\r\n                chartData: {\r\n                    labels: [],\r\n                    datasets: []\r\n                }\r\n            },\r\n            peakHourEvents: []\r\n        };\r\n\r\n        this.getApcPeopleCount = this.getApcPeopleCount.bind(this);\r\n        this.getApcPeakHour = this.getApcPeakHour.bind(this);\r\n        this.getBarChartOptions = this.getBarChartOptions.bind(this);\r\n        this.selectDateRange = this.selectDateRange.bind(this);\r\n        this.selectXAxisOption = this.selectXAxisOption.bind(this);\r\n        this.refresh = this.refresh.bind(this);\r\n        this.getDateRangeOptions = this.getDateRangeOptions.bind(this);\r\n        this.getXAxisOptions = this.getXAxisOptions.bind(this);\r\n        this.handleDateRangeChange = this.handleDateRangeChange.bind(this);\r\n        this.refreshPeakHour = this.refreshPeakHour.bind(this);\r\n        this.refreshApcChart = this.refreshApcChart.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    showCustomDateRangeModal(graphName) {\r\n        this.setState({\r\n            isOpencustomDateRangeModal: graphName,\r\n        });\r\n    };\r\n\r\n    handleCancel = e => {\r\n        this.setState({\r\n            isOpencustomDateRangeModal: \"\",\r\n        });\r\n    };\r\n\r\n    selectDateRange(graphName, selectedCustomDateRangeEnum, selectedCustomDateRangeMoment) {\r\n        let {isOpencustomDateRangeModal} = this.state;\r\n        let graph = this.state[graphName];\r\n        graph.filter.selectedCustomDateRange = selectedCustomDateRangeEnum;\r\n        let fromToDate = ApcDashboardService.extractFromToDate(graph.filter.selectedCustomDateRange, selectedCustomDateRangeMoment);\r\n        graph.filter.fromDate = fromToDate.from_date;\r\n        graph.filter.toDate = fromToDate.to_date;\r\n\r\n\r\n        if (selectedCustomDateRangeEnum === \"Custom\") {\r\n            isOpencustomDateRangeModal = \"\"\r\n        }\r\n        if (graphName === \"peakhour\") {\r\n            this.setState({[graphName]: graph, isOpencustomDateRangeModal}, () => {\r\n                this.refreshPeakHour();\r\n            });\r\n        } else if (graphName === \"apc\") {\r\n            this.setState({[graphName]: graph, isOpencustomDateRangeModal}, () => {\r\n                this.refreshApcChart();\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    selectXAxisOption(graphName, selectedXAxisOption) {\r\n        let graph = this.state[graphName];\r\n        graph.filter.selectedXAxisOption = selectedXAxisOption;\r\n        if (graphName === \"peakhour\") {\r\n            this.setState({[graphName]: graph}, () => {\r\n                this.refreshPeakHour();\r\n            });\r\n        } else if (graphName === \"apc\") {\r\n            this.setState({[graphName]: graph}, () => {\r\n                this.refreshApcChart();\r\n            });\r\n        }\r\n    }\r\n\r\n    refresh() {\r\n        this.refreshPeakHour();\r\n        this.refreshApcChart();\r\n    }\r\n\r\n    refreshApcChart() {\r\n        this.getApcPeopleCount(this.state.apc.filter.fromDate, this.state.apc.filter.toDate, this.state.apc.filter.selectedXAxisOption);\r\n\r\n    }\r\n\r\n    refreshPeakHour() {\r\n        this.getApcPeakHour(this.state.peakhour.filter.fromDate, this.state.peakhour.filter.toDate);\r\n\r\n    }\r\n\r\n    getApcPeakHour(from_date, to_date) {\r\n        let {peakhour} = this.state;\r\n        peakhour.chartData = {\r\n            labels: [],\r\n            datasets: []\r\n        };\r\n        ApcDashboardService.getApcPeakHour(from_date, to_date).then(response => {\r\n            let rawData = response.data;\r\n            if (rawData && rawData.length > 0) {\r\n                let labelDuration = [];\r\n                let percentageOfPeopleCount = [];\r\n                for (let i in rawData) {\r\n                    labelDuration.push(rawData[i].duration);\r\n                    percentageOfPeopleCount.push(rawData[i].peopleCountPercentage);\r\n                }\r\n                peakhour.chartData.labels = labelDuration;\r\n                let durationIndex = 0;\r\n                let dataSet = {\r\n                    data: [],\r\n                    backgroundColor: [],\r\n                    hoverBackgroundColor: []\r\n                };\r\n                for (let j in percentageOfPeopleCount) {\r\n\r\n                    let color = ApcDashboardService.getColor(durationIndex);\r\n\r\n                    dataSet.backgroundColor.push(color);\r\n                    dataSet.hoverBackgroundColor.push(\"black\");\r\n                    dataSet.data.push(percentageOfPeopleCount[j]);\r\n\r\n                    durationIndex++;\r\n                }\r\n                peakhour.chartData.datasets.push(dataSet);\r\n\r\n\r\n            }\r\n            this.setState({peakhour, peakHourEvents: rawData});\r\n        }).catch(error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    getApcPeopleCount(from_date, to_date, xAxis) {\r\n        let {apc} = this.state;\r\n        apc.chartData = {\r\n            labels: [],\r\n            datasets: []\r\n        };\r\n        ApcDashboardService.getApcPeopleCount(from_date, to_date, xAxis).then(response => {\r\n\r\n            let rawData = response.data;\r\n            if (rawData && rawData.length > 0) {\r\n                let labelDates = [];\r\n                let peopleCount = [];\r\n                for (let i in rawData) {\r\n\r\n                    labelDates.push(rawData[i].date)\r\n                    peopleCount.push(rawData[i].peopleCount);\r\n                }\r\n                apc.chartData.labels = labelDates;\r\n                let dataSet = {\r\n                    label: \"No Of People\",\r\n                    data: [],\r\n                    backgroundColor: '#e83e65'\r\n                };\r\n                for (let j in peopleCount) {\r\n\r\n                    dataSet.data.push(peopleCount[j]);\r\n\r\n\r\n                }\r\n                apc.chartData.datasets.push(dataSet);\r\n            }\r\n\r\n\r\n            this.setState({apc});\r\n        }).catch(error => {\r\n            console.log(error);\r\n        });\r\n\r\n    }\r\n\r\n\r\n    handleDateRangeChange(dates, dateString) {\r\n\r\n        let startDate = dates[0].toDate();\r\n        let endDate = dates[1].toDate();\r\n        this.setState(() => {\r\n            this.refresh();\r\n        });\r\n        console.log(dates, dateString);\r\n    }\r\n\r\n    getXAxisOptions(graphName) {\r\n        return (<Menu>\r\n\r\n            <Menu.Item key=\"1\"\r\n                       onClick={() => this.selectXAxisOption(graphName, \"Hourly\")}>\r\n                Hourly\r\n            </Menu.Item>\r\n            <Menu.Item key=\"5\"\r\n                       onClick={() => this.selectXAxisOption(graphName, \"Daily\")}>\r\n                Daily\r\n            </Menu.Item>\r\n        </Menu>)\r\n    }\r\n\r\n    getDateRangeOptions(graphName) {\r\n        return (\r\n            <Menu>\r\n                <Menu.Item key=\"1\" onClick={() => this.selectDateRange(graphName, \"Today\")}>\r\n                    Today\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" onClick={() => this.selectDateRange(graphName, \"Yesterday\")}>\r\n                    Yesterday\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" onClick={() => this.selectDateRange(graphName, \"This week\")}>\r\n                    This week\r\n                </Menu.Item>\r\n                <Menu.Item key=\"4\" onClick={() => this.selectDateRange(graphName, \"Last week\")}>\r\n                    Last week\r\n                </Menu.Item>\r\n                <Menu.Item key=\"5\" onClick={() => this.selectDateRange(graphName, \"This month\")}>\r\n                    This month\r\n                </Menu.Item>\r\n                <Menu.Item key=\"6\" onClick={() => this.selectDateRange(graphName, \"This year\")}>\r\n                    This year\r\n                </Menu.Item>\r\n                <Menu.Item key=\"7\" onClick={() => this.selectDateRange(graphName, \"Last year\")}>\r\n                    Last year\r\n                </Menu.Item>\r\n                <Menu.Item onClick={() => this.showCustomDateRangeModal(graphName)}>\r\n                    Custom\r\n                </Menu.Item>\r\n\r\n            </Menu>\r\n        );\r\n    }\r\n\r\n    getBarChartOptions(chartName) {\r\n        let yAxisScaleLabel = \"Day\";\r\n        if (this.state[chartName].filter.selectedXAxisOption === \"Hourly\") {\r\n            yAxisScaleLabel = \"Hours(24-hour)\";\r\n        }\r\n        let yAxisLabel = \"No Of People\";\r\n        let options = {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            animation: {\r\n                duration: 0\r\n            },\r\n            hover: {\r\n                animationDuration: 0\r\n            },\r\n            responsiveAnimationDuration: 0,\r\n            legend: {\r\n                position: 'right'\r\n            },\r\n            scales: {\r\n                xAxes: [{\r\n                    stacked: true,\r\n                    ticks: {\r\n                        beginAtZero: true\r\n                    }, scaleLabel: {\r\n                        display: true,\r\n                        labelString: yAxisScaleLabel\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                    stacked: true,\r\n                    ticks: {\r\n                        beginAtZero: true\r\n                    }, scaleLabel: {\r\n                        display: true,\r\n                        labelString: yAxisLabel\r\n                    }\r\n                }]\r\n            },\r\n            plugins: {\r\n                datalabels: {\r\n                    display: true,\r\n\r\n                }\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        let {apc, peakhour} = this.state;\r\n        let peakHourEvents = this.state.peakHourEvents;\r\n        const apcChartOptions = this.getBarChartOptions(\"apc\");\r\n        return (\r\n            <div style={{background: '#ECECEC', padding: '5px'}}>\r\n                <Row>\r\n\r\n\r\n                    <Card title={<div>Peak Hour\r\n                        &nbsp;\r\n                        <Dropdown overlay={() => this.getDateRangeOptions(\"peakhour\")}>\r\n                            <Button>\r\n                                {peakhour.filter.selectedCustomDateRange ? peakhour.filter.selectedCustomDateRange : \"Select\"}\r\n                                <Icon\r\n                                    type=\"down\"/>\r\n                            </Button>\r\n                        </Dropdown>\r\n                    </div>\r\n                    }>\r\n                        <Col xl={{span: 12}} lg={{span: 12}} md={{span: 12}} sm={{span: 24}} xs={{span: 24}}>\r\n\r\n                            <Doughnut data={peakhour.chartData} options={{\r\n                                title: {\r\n                                    display: true,\r\n                                    text: 'Peak Hour'\r\n                                },\r\n                                maintainAspectRatio: true,\r\n\r\n                                plugins: {\r\n                                    datalabels: {\r\n                                        display: true,\r\n                                        color: '#fff',\r\n                                        anchor: 'end',\r\n                                        align: 'start',\r\n                                        offset: -10,\r\n                                        borderWidth: 2,\r\n                                        borderColor: '#fff',\r\n                                        borderRadius: 5,\r\n                                        backgroundColor: (context) => {\r\n                                            return context.dataset.backgroundColor;\r\n                                        },\r\n                                        font: {\r\n                                            weight: 'bold',\r\n                                            size: '10'\r\n                                        },\r\n                                        formatter: (item, context) => {\r\n                                            return item + \" % \";\r\n                                        }\r\n                                    }\r\n                                },\r\n                                rotation: 1 * Math.PI,\r\n                                circumference: 1 * Math.PI,\r\n                            }}/>\r\n\r\n                        </Col>\r\n                        <Col xl={{span: 12}} lg={{span: 12}} md={{span: 12}} sm={{span: 24}} xs={{span: 24}}>\r\n\r\n                            <div>\r\n                                <Table dataSource={peakHourEvents} bordered={true} size={\"small\"} pagination={false}>\r\n                                    <Column title=\"Duration\" dataIndex=\"duration\" key=\"duration\"\r\n                                            render={duration => duration} />\r\n                                    <Column title=\"No Of People\" dataIndex=\"peopleCount\" key=\"peopleCount\"\r\n                                            render={peopleCount => peopleCount}/>\r\n                                </Table>\r\n                            </div>\r\n\r\n\r\n                        </Col>\r\n                    </Card>\r\n\r\n\r\n                </Row>\r\n                <div>\r\n                    <Modal\r\n                        onCancel={this.handleCancel}\r\n                        title=\"Custom Date Range\"\r\n                        visible={!!this.state.isOpencustomDateRangeModal}\r\n                        footer={[]}\r\n                    >\r\n                        <RangePicker\r\n                            onChange={(changedDateRange) => this.selectDateRange(this.state.isOpencustomDateRangeModal, \"Custom\", changedDateRange)}/>\r\n                    </Modal>\r\n                </div>\r\n                <div>\r\n                    <Card title={<div>People Counting\r\n                        &nbsp;\r\n                        <Dropdown overlay={() => this.getDateRangeOptions(\"apc\")}>\r\n                            <Button>\r\n                                {apc.filter.selectedCustomDateRange ? apc.filter.selectedCustomDateRange : \"Select\"}\r\n                                <Icon\r\n                                    type=\"down\"/>\r\n                            </Button>\r\n                        </Dropdown>\r\n                        &nbsp;<Dropdown overlay={() => this.getXAxisOptions(\"apc\")}>\r\n                            <Button>\r\n                                {apc.filter.selectedXAxisOption ? apc.filter.selectedXAxisOption : \"Select\"} <Icon\r\n                                type=\"down\"/>\r\n                            </Button>\r\n                        </Dropdown>\r\n                    </div>}>\r\n                        < Line data={apc.chartData} options={apcChartOptions}/>\r\n\r\n                    </Card>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import axios from \"./axios\";\r\n\r\nclass AtccService {\r\n\r\n    static Instance() {\r\n        return new AtccService()\r\n    }\r\n\r\n    getAtccData(filter) {\r\n        return axios.put(\"/api/atcc/raw\", filter);\r\n    }\r\n\r\n    getAtccSummaryData(filter, interval) {\r\n        return axios.put(\"/api/atcc/summary?interval=\" + interval, filter);\r\n    }\r\n}\r\n\r\nexport default AtccService.Instance()","import React, {Component} from \"react\";\r\nimport {Col, Row} from \"antd\";\r\nimport 'react-table-6/react-table.css'\r\nimport \"video-react/dist/video-react.css\";\r\nimport ReactTable from 'react-table-6'\r\nimport { Player } from 'video-react';\r\nimport AtccService from \"../../services/AtccService\";\r\nexport default class AtccView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n            loading: true,\r\n            pages: 0,\r\n            video: null\r\n        };\r\n        this.getRawData = this.getRawData.bind(this);\r\n        //setInterval(()=> this.refRawDataTable.fireFetchData(), 120000)\r\n    }\r\n\r\n    getRawData(page, pageSize, sorted, filtered, handleRetrievedData) {\r\n\r\n        this.setState({\r\n            loading: true\r\n        });\r\n\r\n        let filter = {\r\n            page: page,\r\n            pageSize: pageSize,\r\n            sorted: sorted,\r\n            filtered: filtered,\r\n        };\r\n\r\n        AtccService.getAtccData(filter).then(response => {\r\n            handleRetrievedData(response.data);\r\n        });\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        const data = this.state.data;\r\n        const pages = this.state.pages;\r\n        const loading = this.state.loading;\r\n\r\n        const columns = [{\r\n            Header: 'Id',\r\n            accessor: 'id',\r\n            id: 'id'\r\n        }, {\r\n\r\n            Header: 'Type',\r\n            accessor: 'type',\r\n            Cell: props => <span className='number'>{props.value}</span>, // Custom cell components!\r\n            id: 'type'\r\n        }, {\r\n            Header: 'Date',\r\n            accessor: 'date',\r\n            id: 'date'\r\n        }, {\r\n            Header: 'Time',\r\n            accessor: 'time',\r\n            id: 'time'\r\n        }, {\r\n            Header: 'Lane',\r\n            accessor: 'lane',\r\n            id: 'lane'\r\n        }, {\r\n            Header: 'VID',\r\n            accessor: 'vehicleId',\r\n            id: 'VID'\r\n        }, {\r\n            Header: 'Direction',\r\n            accessor: 'tag',\r\n            id: 'tag'\r\n        },\r\n            {\r\n                Header: 'Video',\r\n                accessor: 'vid',\r\n                id: 'video',\r\n                Cell: e => e.value !== 0 ? <div style={{cursor:'pointer'}} onClick={() => this.showVideo(e)}>View</div> : <div>NA</div>\r\n            },\r\n            /*{\r\n                Header: 'Screenshot',\r\n                accessor: 'id',\r\n                id: 'ss',\r\n                Cell: e => e.original.vid !== 0 ? <div style={{cursor:'pointer'}} onClick={() => this.showScreenshot(e)}>View</div> : <div>NA</div>\r\n            },*/\r\n            {\r\n                Header: 'Download',\r\n                accessor: 'vid',\r\n                id: 'dlvideo',\r\n                Cell: e => e.original.vid !== 0 ? <div style={{cursor:'pointer'}} onClick={() => this.downloadVideo(e)}>Download</div> : <div>NA</div>\r\n            }\r\n        ];\r\n\r\n\r\n        return (\r\n\r\n            <Row>\r\n                <Col>\r\n                    <ReactTable\r\n                        ref={(refRawDataTable) => {\r\n                            this.refRawDataTable = refRawDataTable;\r\n                        }}\r\n                        defaultPageSize={10}\r\n                        data={data}\r\n                        columns={columns}\r\n                        pages={pages}\r\n                        className=\"-striped -highlight\"\r\n                        loading={loading}\r\n                        showPagination={true}\r\n                        showPaginationTop={false}\r\n                        showPaginationBottom={true}\r\n                        pageSizeOptions={[5, 10, 20, 25, 50, 100]}\r\n                        manual // this would indicate that server side pagination has been enabled\r\n                        onFetchData={(state, instance) => {\r\n                            this.setState({loading: true});\r\n                            this.getRawData(state.page, state.pageSize, state.sorted, state.filtered, (res) => {\r\n\r\n                                this.setState({\r\n                                    data: res.data,\r\n                                    pages: Math.ceil(res.totalElements / parseFloat(state.pageSize)),\r\n                                    loading: false\r\n                                })\r\n                            });\r\n                        }}\r\n                    />\r\n\r\n                    <div style={{cursor:'pointer'}} onClick={()=>this.downloadCsv()}> Download Data</div>\r\n                </Col>\r\n                <Col>\r\n                    <div>\r\n                        <Player\r\n                            startTime={this.state.seek}\r\n                            autoPlay\r\n                            playsInline\r\n                            poster=\"/logo.png\"\r\n                            src={this.state.video}\r\n                        />\r\n                        <img src={this.state.ss || '/logo.png'} alt=\"event screenshot\"/>\r\n                    </div>\r\n                </Col>\r\n            </Row>)\r\n    }\r\n\r\n    showVideo(e) {\r\n\r\n        const seek = e.original.timeStamp - e.original.vts - e.original.offset - 5;\r\n        //seek(time)\r\n        this.setState({\r\n            seek : seek,\r\n            video:'/video/' + e.original.vid + \"?\" + Math.random()\r\n        });\r\n    }\r\n\r\n    showScreenshot(e) {\r\n        this.setState({\r\n            ss:'/screenshot/' + e.original.id + \"?\" + Math.random()\r\n        });\r\n    }\r\n\r\n    downloadVideo(e) {\r\n        fetch('/video/' + e.original.vid)\r\n            .then((response) => response.blob())\r\n            .then((blob) => {\r\n                const url = window.URL.createObjectURL(new Blob([blob]));\r\n                const link = document.createElement('a');\r\n                link.href = url;\r\n                link.setAttribute('download', e.original.tag + \"-\" + e.original.vid + `-video.mp4`);\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                link.parentNode.removeChild(link);\r\n            })\r\n    }\r\n\r\n    downloadCsv() {\r\n        fetch('/csv/')\r\n            .then((response) => response.blob())\r\n            .then((blob) => {\r\n                const url = window.URL.createObjectURL(new Blob([blob]));\r\n                const link = document.createElement('a');\r\n                link.href = url;\r\n                link.setAttribute('download', `data.csv`);\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                link.parentNode.removeChild(link);\r\n            })\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport 'react-table-6/react-table.css'\r\nimport ReactTable from 'react-table-6'\r\nimport {Bar} from \"react-chartjs-2\";\r\nimport * as name from \"chartjs-plugin-colorschemes\";\r\nimport {Button, Col, Row} from \"antd\";\r\nimport AtccService from \"../../services/AtccService\";\r\nconst ButtonGroup = Button.Group;\r\n\r\nexport default class AtccSummaryView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n            chartdata: null,\r\n            loading: true,\r\n            pages: 0,\r\n            interval: \"hour\"\r\n        };\r\n\r\n\r\n        this.makeChartData = this.makeChartData.bind(this);\r\n        this.getSummaryData = this.getSummaryData.bind(this);\r\n        this.changeInterval = this.changeInterval.bind(this);\r\n        setInterval(()=> this.changeInterval(), 120000)\r\n    }\r\n\r\n\r\n    async changeInterval(value) {\r\n        await this.setState({interval: value});\r\n        this.refReactTable.fireFetchData();\r\n    }\r\n\r\n    getSummaryData(page, pageSize, sorted, filtered, handleRetrievedData) {\r\n\r\n        this.setState({\r\n            loading: true\r\n        });\r\n\r\n        let filter = {\r\n            page: page,\r\n            pageSize: pageSize,\r\n            sorted: sorted,\r\n            filtered: filtered,\r\n        };\r\n\r\n        let interval = this.state.interval;\r\n        AtccService.getAtccSummaryData(filter, interval).then(response => {\r\n            this.makeChartData(response.data);\r\n            this.setState({\r\n                loading: false\r\n            });\r\n\r\n            if (handleRetrievedData) {\r\n                return handleRetrievedData(response.data);\r\n            } else {\r\n                return response;\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    makeChartData(data) {\r\n        let chartdata = {\r\n            labels: [],\r\n            datasets: []\r\n        };\r\n\r\n\r\n        let timeSeries = new Set();\r\n        for (let i = 0; i < data.length; i++) {\r\n\r\n            if (data[i].span !== \"Month\") {\r\n                timeSeries.add(data[i].date + \" \" + data[i].from);\r\n            } else {\r\n                timeSeries.add(data[i].from + \" - \" + data[i].to);\r\n            }\r\n\r\n            let index = -1;\r\n            for (let j in chartdata.datasets) {\r\n                if (chartdata.datasets[j].label) {\r\n                    if (chartdata.datasets[j].label === data[i].type) {\r\n                        index = j;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (index === -1) {\r\n                chartdata.datasets.push({\r\n                    label: data[i].type,\r\n                    data: [data[i].count]\r\n                });\r\n            } else {\r\n                chartdata.datasets[index].data.push(data[i].count);\r\n            }\r\n        }\r\n\r\n        chartdata.labels = Array.from(timeSeries);\r\n        this.setState({chartdata: chartdata})\r\n    }\r\n\r\n    render() {\r\n        const options = {\r\n            scales: {\r\n                xAxes: [{\r\n                    stacked: true,\r\n                    gridLines: {display: false},\r\n                }],\r\n                yAxes: [{\r\n                    stacked: true,\r\n                    ticks: {\r\n                        beginAtZero: true\r\n                    },\r\n                }],\r\n            },\r\n            legend: {display: true},\r\n            plugins: {\r\n                colorschemes: {\r\n                    scheme: 'brewer.Paired12'\r\n                }\r\n            }\r\n        };\r\n\r\n        const chartdata = this.state.chartdata;\r\n        const data = this.state.data;\r\n        const pages = this.state.pages;\r\n        const loading = this.state.loading;\r\n        const chartComponent = this.state.loading ? (<div>Loading...</div>) : (\r\n            <Bar data={chartdata} options={options}/>);\r\n        const columns = [{\r\n            Header: 'Date',\r\n            accessor: 'date',\r\n            id: 'date'\r\n        }, {\r\n            Header: 'From',\r\n            accessor: 'from',\r\n            id: 'from'\r\n        }, {\r\n            Header: 'To',\r\n            accessor: 'to',\r\n            id: 'to'\r\n        }, {\r\n            Header: 'Span',\r\n            accessor: 'span',\r\n            id: 'span'\r\n        }, {\r\n            Header: 'Type',\r\n            accessor: 'type',\r\n            id: 'type',\r\n            Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n        }, {\r\n            Header: 'Count',\r\n            accessor: 'count', // Custom value accessors!\r\n            id: 'count', // Required because our accessor is not a string\r\n        }\r\n        ];\r\n\r\n\r\n        return (\r\n\r\n            <Row>\r\n                <Col>\r\n                    <ButtonGroup>\r\n                        <Button onClick={() => this.changeInterval('hour')}>Hour</Button>\r\n                        <Button onClick={() => this.changeInterval('day')}>Day</Button>\r\n                        <Button onClick={() => this.changeInterval('month')}>Month</Button>\r\n                    </ButtonGroup>\r\n\r\n                    <ReactTable\r\n                        ref={(refReactTable) => {\r\n                            this.refReactTable = refReactTable;\r\n                        }}\r\n                        defaultPageSize={10}\r\n                        data={data}\r\n                        columns={columns}\r\n                        pages={pages}\r\n                        className=\"-striped -highlight\"\r\n                        loading={loading}\r\n                        showPagination={true}\r\n                        showPaginationTop={false}\r\n                        showPaginationBottom={true}\r\n                        pageSizeOptions={[5, 10, 20, 25, 50, 100]}\r\n                        manual // this would indicate that server side pagination has been enabled\r\n                        onFetchData={(state, instance) => {\r\n                            this.setState({loading: true});\r\n                            this.getSummaryData(state.page, state.pageSize, state.sorted, state.filtered, (res) => {\r\n\r\n                                this.setState({\r\n                                    data: res.data,\r\n                                    pages: Math.ceil(res.totalElements / parseFloat(state.pageSize)),\r\n                                    loading: false\r\n                                })\r\n                            });\r\n                        }}\r\n                    />\r\n\r\n                    <div style={{cursor:'pointer'}} onClick={()=>this.downloadCsv()}> Download Data</div>\r\n                </Col>\r\n                <Col>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    {chartComponent}\r\n                </Col>\r\n            </Row>)\r\n    }\r\n\r\n    downloadCsv() {\r\n\r\n        var interval = this.state.interval;\r\n        fetch('/csv/summary/' + interval)\r\n            .then((response) => response.blob())\r\n            .then((blob) => {\r\n                const url = window.URL.createObjectURL(new Blob([blob]));\r\n                const link = document.createElement('a');\r\n                link.href = url;\r\n                link.setAttribute('download', interval + `-data.csv`);\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                link.parentNode.removeChild(link);\r\n            })\r\n    }\r\n}","import axios from \"./axios\";\r\n\r\nclass VidsService {\r\n\r\n    static Instance() {\r\n        return new VidsService()\r\n    }\r\n\r\n    getIncidents(filter) {\r\n        return axios.post('/api/vids/incidents', filter);\r\n    }\r\n\r\n    archiveIncident(event) {\r\n        return axios.delete('/api/vids/' + event.id);\r\n    }\r\n\r\n    updateIncident(event) {\r\n        return axios.put('/api/vids/event', event);\r\n    }\r\n\r\n    getIncidentImage(id) {\r\n        return axios.get('/public/vids/image/' + id + '/image.jpg');\r\n    }\r\n\r\n    getIncidentVideo(id) {\r\n        return axios.get('/public/vids/video/' + id + '/video.mp4');\r\n    }\r\n\r\n}\r\n\r\nexport default VidsService.Instance()","import React, {Component} from \"react\";\r\nimport {\r\n    Card,\r\n    Col,\r\n    Collapse,\r\n    Empty,\r\n    Icon,\r\n    Pagination,\r\n    Row,\r\n    Table,\r\n    Tag,\r\n    Button, Menu, Dropdown, Typography\r\n} from 'antd';\r\nimport GenericFilter from \"../../components/GenericFilter\";\r\nimport Moment from \"react-moment\";\r\nimport VidsService from \"../../services/VidsService\";\r\nimport { Player } from 'video-react';\r\nimport \"video-react/dist/video-react.css\";\r\nconst {Text} = Typography;\r\n\r\nconst {Column} = Table;\r\nconst {Panel} = Collapse;\r\n\r\n\r\nexport default class HighwayIncidentView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible: true,\r\n            loading: true,\r\n            layout: \"list\",\r\n            incidents: {},\r\n            playVideo: false,\r\n            filter: {\r\n                page: 1,\r\n                pageSize: 12\r\n            },\r\n        };\r\n\r\n        this.refresh = this.refresh.bind(this);\r\n        this.handleFilterChange = this.handleFilterChange.bind(this);\r\n        this.handleLayoutChange = this.handleLayoutChange.bind(this);\r\n        this.handleRefresh = this.handleRefresh.bind(this);\r\n        this.onPageChange = this.onPageChange.bind(this);\r\n        this.onPageSizeChange = this.onPageSizeChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        VidsService.getIncidents(this.state.filter).then(request => {\r\n            this.setState({\"incidents\": request.data, loading: false})\r\n        })\r\n    }\r\n\r\n    //cant use refresh to read from state as state may not have been set\r\n    refreshNow() {\r\n        VidsService.getIncidents(this.state.filter).then(request => {\r\n            this.setState({\"incidents\": request.data, loading: false})\r\n        })\r\n    }\r\n\r\n    archiveEvent(event) {\r\n        VidsService.archiveIncident(event).then(request => {\r\n            this.refresh();\r\n        })\r\n    }\r\n\r\n    handleFilterChange(data) {\r\n        this.setState({filter: data})\r\n    }\r\n\r\n    handleLayoutChange(data) {\r\n        this.setState({layout: data})\r\n    }\r\n\r\n    handleOnClick() {\r\n        this.setState({\r\n            visible: false,\r\n        });\r\n    };\r\n\r\n    handleRefresh() {\r\n        this.refresh();\r\n    }\r\n\r\n    onPageChange(page, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.page = page;\r\n        filter.pageSize = pageSize;\r\n        this.refreshNow(filter)\r\n    }\r\n\r\n    onPageSizeChange(current, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.pageSize = pageSize;\r\n        this.refreshNow(filter);\r\n    }\r\n\r\n    render() {\r\n\r\n        let layout = this.state.layout;\r\n\r\n        return (\r\n            <div>\r\n                <h3>Highway Incidents</h3>\r\n                <Collapse bordered={false} defaultActiveKey={['1']}>\r\n                    <Panel header=\"Filter\" key=\"1\">\r\n\r\n                        <GenericFilter handleRefresh={this.refresh} filter={this.state.filter} layout={layout}\r\n                                       handleFilterChange={this.handleFilterChange}\r\n                                       handleLayoutChange={this.handleLayoutChange}/>\r\n                    </Panel>\r\n                </Collapse>\r\n                <div>\r\n                    {layout === \"table\" ? (this.renderTable()) : (this.renderGrid())}\r\n                </div>\r\n            </div>)\r\n    }\r\n\r\n    renderGrid() {\r\n\r\n\r\n        if (this.state.loading || !this.state.incidents || this.state.incidents.totalPage === 0) {\r\n            return <Empty description={false}/>\r\n        }\r\n\r\n        let events = this.state.incidents.events;\r\n        let count = this.state.incidents.totalPages * this.state.incidents.pageSize;\r\n\r\n\r\n        return <div style={{background: '#ECECEC', padding: '5px'}}>\r\n            <Row>\r\n                {\r\n                    events.map((event, index) =>\r\n                        <Col xl={{span: 8}} lg={{span: 12}} md={{span: 12}} sm={{span: 24}} xs={{span: 24}} key={index}>\r\n                            <Card\r\n                                style={{margin: \"5px\"}}\r\n                                title={\r\n                                    <div>\r\n                                        <Tag color=\"#f50\">{event.incidentType}</Tag>\r\n                                        <div>\r\n                                            <Text code><Icon type=\"schedule\"/> <Moment\r\n                                                format=\"ll\">{event.incidentDate}</Moment>{' '}|{' '}<Moment\r\n                                                format=\"LTS\">{event.incidentDate}</Moment></Text>\r\n                                        </div>\r\n                                        <div style={{marginTop: \"5px\", textAlign: \"left\"}}>\r\n                                            <div>\r\n                                                <Text code><Icon type=\"environment\"/> {event.location || \"Location:NA\"}</Text>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                }\r\n                                extra={<Dropdown overlay={<Menu>\r\n                                    <Menu.Item key=\"1\">\r\n                                        <a\r\n                                            title={\"click here to download\"}\r\n                                            href={\"/public/vids/image/\" + event.id + \"/image.jpg\"}\r\n                                            download={true}><Icon type=\"download\"/>{' '} Image</a>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"2\">\r\n                                        <a\r\n                                            title={\"click here to download\"}\r\n                                            href={\"/public/vids/video/\" + event.id + \"/image.mp4\"}\r\n                                            download={true}><Icon type=\"download\"/>{' '} Video</a>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"3\">\r\n                                        <Button type=\"danger\" onClick={() => this.archiveEvent(event)}><Icon\r\n                                            type=\"warning\"/>{' '}\r\n                                            Archive\r\n                                        </Button>\r\n                                    </Menu.Item>\r\n\r\n                                </Menu>}>\r\n                                    <Button>\r\n                                        More <Icon type=\"down\"/>\r\n                                    </Button>\r\n                                </Dropdown>}\r\n                                bordered={true}\r\n\r\n                            >\r\n\r\n                                <Player\r\n                                    playsInline\r\n                                    poster={\"/public/vids/image/\" + event.id + \"/image.jpg\"}\r\n                                    src={\"/public/vids/video/\" + event.id + \"/video.mp4\"}\r\n                                />\r\n                            </Card>\r\n                        </Col>\r\n                    )\r\n                }\r\n            </Row>\r\n            <div style={{textAlign: \"right\"}}>\r\n                <Pagination onChange={this.onPageChange} onShowSizeChange={this.onPageSizeChange} showSizeChanger\r\n                            showQuickJumper\r\n                            defaultCurrent={1} total={count} current={this.state.filter.page}\r\n                            pageSize={this.state.filter.pageSize}/>\r\n            </div>\r\n\r\n        </div>\r\n    }\r\n\r\n    renderTable() {\r\n\r\n        if (this.state.loading || !this.state.events || this.state.events.Total === 0) {\r\n            return <Empty description={false}/>\r\n        }\r\n\r\n        let events = this.state.anprresponse.events;\r\n        let count = this.state.anprresponse.totalPages * this.state.anprresponse.pageSize;\r\n\r\n        const paginationOptions = {\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            onShowSizeChange: this.onPageSizeChange,\r\n            onChange: this.onPageChange,\r\n            total: count\r\n        };\r\n\r\n        const pagination = {\r\n            ...paginationOptions,\r\n            total: count,\r\n            current: this.state.filter.page,\r\n            pageSize: this.state.filter.pageSize\r\n        };\r\n\r\n        return (\r\n            <Table dataSource={events} pagination={pagination}>\r\n                <Column title=\"Location\" dataIndex=\"location\" key=\"location\"\r\n                        render={location => location}/>\r\n                <Column title=\"Date\" dataIndex=\"eventDate\" key=\"eventDate\"\r\n                        render={eventDate => (<Moment format=\"L\">{eventDate}</Moment>)}/>\r\n                <Column title=\"Time\" dataIndex=\"eventDate\" key=\"eventTime\"\r\n                        render={eventDate => (<Moment format=\"LTS\">{eventDate}</Moment>)}/>\r\n                <Column title=\"LPR\" dataIndex=\"anprText\" key=\"anprText\"\r\n                        render={anprText => anprText}/>\r\n                <Column title=\"LP Image\" dataIndex=\"id\" key=\"anprimage\"\r\n                        render={id => (\r\n                            <a title={\"click here to download\"} href={\"/public/anpr/lpr/\" + id + \"/image.jpg\"}\r\n                               download={true}>\r\n                                <img alt=\"event\"\r\n                                     src={\"/public/anpr/lpr/\" + id + \"/image.jpg\"}/></a> )}/>\r\n                <Column title=\"direction\" dataIndex=\"direction\" key=\"direction\"\r\n                        render={direction => direction}/>\r\n                <Column title=\"Helmet?\" dataIndex=\"helmet\" key=\"helmet\"\r\n                        render={helmet => helmet ? <span>No</span> : <span>N/A</span>}/>\r\n                <Column title=\"Speed\" dataIndex=\"speed\" key=\"speed\"\r\n                        render={speed => <span>{speed}</span>}/>\r\n                <Column title=\"Action\"\r\n                        key=\"action\"\r\n                        render={(text, event) => (\r\n                            <Button type=\"danger\" onClick={() => this.archiveEvent(event)}><Icon type=\"warning\"/>{' '}\r\n                                Archive</Button>\r\n                        )}\r\n                />\r\n\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n","import React,{Component} from \"react\";\r\n\r\n\r\nexport default class HighwayIncidentDashboardView extends Component{\r\n\r\n    render() {\r\n        return (<div>Hello moto</div>)\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nimport './App.css';\r\nimport {Layout} from 'antd';\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport Headbar from \"./components/Headbar\";\r\nimport Footerbar from \"./components/Footerbar\";\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\nimport HomeView from \"./views/HomeView\";\r\nimport FeedView from \"./views/FeedView\";\r\nimport {Route} from \"react-router-dom\";\r\nimport DeviceView from \"./views/DeviceView\";\r\nimport UserListView from \"./views/UserListView\";\r\nimport DeviceConfigView from \"./views/DeviceConfigView\";\r\n\r\nimport UserService from \"./services/UserService\";\r\nimport {EventBus} from \"./components/event\"\r\nimport LoginView from \"./views/LoginView\";\r\nimport TriggerView from \"./views/TriggerView\";\r\nimport AnprView from \"./views/anpr/AnprView\";\r\nimport TrafficIncidentView from \"./views/TrafficIncidentView\";\r\nimport IncidentRepeatedView from \"./views/incidents/IncidentRepeatedView\";\r\nimport IncidentHotlistView from \"./views/IncidentHotlistView\";\r\nimport MasterDataView from \"./views/anpr/MasterDataView\";\r\nimport ParkingDashboardView from \"./views/parking/ParkingDashboardView\";\r\nimport ParkingConsoleView from \"./views/parking/ParkingConsoleView\";\r\nimport PgsReportView from \"./views/parking/ParkingReportView\";\r\nimport ParkingInOutView from \"./views/parking/ParkingInOutView\";\r\nimport PeopleCounting from \"./views/PeopleCount/PeopleCounting\";\r\nimport ApcDashboard from \"./views/PeopleCount/ApcDashboard\";\r\nimport AtccView from \"./views/atcc/AtccView\";\r\nimport AtccSummaryView from \"./views/atcc/AtccSummaryView\";\r\nimport HighwayIncidentView from \"./views/vids/HighwayIncidentView\";\r\nimport HighwayIncidentDashboardView from \"./views/vids/HighwayIncidentDashboardView\";\r\n\r\nconst {Content} = Layout;\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {loggedIn: false};\r\n\r\n        EventBus.subscribe('login-logout', (event) => this.refreshMenu(event))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshMenu()\r\n    }\r\n\r\n    refreshMenu() {\r\n        this.setState({loggedIn: UserService.isLoggedIn()});\r\n    }\r\n\r\n    render() {\r\n\r\n        const isLoggedIn = this.state.loggedIn;\r\n\r\n        const sideBar = isLoggedIn ? <Sidebar/> : null;\r\n        const header = isLoggedIn ? <Headbar isLoggedIn={isLoggedIn}/> : null;\r\n\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Layout style={{minHeight: '100vh'}}>\r\n                    {sideBar}\r\n                    <Layout>\r\n                        <Content style={{margin: '16px'}}>\r\n                            <div style={{padding: 4}}>\r\n                                <Route path='/login' exact={true} component={LoginView}/>\r\n                                <PrivateRoute path='/' exact={true} component={HomeView}/>\r\n                                <PrivateRoute path='/incidents' exact={true} component={TrafficIncidentView}/>\r\n                                <PrivateRoute path='/incidents/hotlisted' exact={true} component={IncidentHotlistView}/>\r\n                                <PrivateRoute path='/incidents/repeated' exact={true} component={IncidentRepeatedView}/>\r\n                                <PrivateRoute path='/anpr' exact={true} component={AnprView}/>\r\n                                <PrivateRoute path='/anpr/masterdata' exact={true} component={MasterDataView}/>\r\n                                <PrivateRoute path='/user' exact={true} component={UserListView}/>\r\n                                <PrivateRoute path='/feed' exact={true} component={FeedView}/>\r\n                                <PrivateRoute path='/trigger' exact={true} component={TriggerView}/>\r\n                                <PrivateRoute path='/device' exact={true} component={DeviceView}/>\r\n                                <PrivateRoute path='/device/conf' exact={true} component={DeviceConfigView}/>\r\n                                <PrivateRoute path='/people-counting/events' exact={true} component={PeopleCounting}/>\r\n\r\n\r\n                                {/* PGS is parking guideance and management system */}\r\n                                <PrivateRoute path='/pgs/dashboard' exact={true} component={ParkingDashboardView}/>\r\n                                <PrivateRoute path='/pgs/console' exact={true} component={ParkingConsoleView}/>\r\n                                <PrivateRoute path='/pgs/inout' exact={true} component={ParkingInOutView}/>\r\n                                <PrivateRoute path='/pgs/reports' exact={true} component={PgsReportView}/>\r\n                                <PrivateRoute path='/people-counting/Dashboard' exact={true} component={ApcDashboard}/>\r\n\r\n                                {/* atcc */}\r\n                                <PrivateRoute path='/atcc' exact={true} component={AtccView}/>\r\n                                <PrivateRoute path='/atcc/summary' exact={true} component={AtccSummaryView}/>\r\n\r\n                                {/* vids */}\r\n                                <PrivateRoute path='/vids' exact={true} component={HighwayIncidentView}/>\r\n                                <PrivateRoute path='/vids/dashboard' exact={true} component={HighwayIncidentDashboardView}/>\r\n                            </div>\r\n                        </Content>\r\n                        <Footerbar/>\r\n                    </Layout>\r\n                </Layout>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'antd/dist/antd.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter as Router, Switch} from 'react-router-dom';\r\n\r\nclass Root extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                    <Switch>\r\n                        <App/>\r\n                    </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(<Root/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","const EventBus  = {\r\n    events : {},\r\n    publish: function (event, data) {\r\n        if (!this.events[event]) return;\r\n        this.events[event].forEach(callback => callback(data))\r\n    },\r\n    subscribe: function (event, callback) {\r\n        if (!this.events[event]) this.events[event] = [];\r\n        this.events[event].push(callback)\r\n    }\r\n};\r\n\r\nmodule.exports = {EventBus};"],"sourceRoot":""}