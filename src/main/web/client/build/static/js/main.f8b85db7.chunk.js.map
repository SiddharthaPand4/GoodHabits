{"version":3,"sources":["components/Sidebar.js","components/Headbar.js","components/Footerbar.js","services/axios.js","services/UserService.js","components/PrivateRoute.js","views/HomeView.js","services/FeedService.js","views/FeedView.js","services/DeviceService.js","views/DeviceView.js","views/UserListView.js","views/DeviceConfigView.js","helpers/history.js","views/LoginView.js","services/IncidentService.js","views/IncidentListView.js","services/TriggerService.js","components/TriggerSet.js","views/TriggerView.js","components/GenericFilter.js","services/AnprService.js","views/AnprView.js","App.js","serviceWorker.js","index.js","components/event.js"],"names":["Sider","Layout","SubMenu","Menu","Sidebar","breakpoint","collapsedWidth","onBreakpoint","broken","console","log","onCollapse","collapsed","type","className","theme","mode","defaultSelectedKeys","Item","key","to","title","Component","Header","Headbar","style","background","padding","Footer","textAlign","HttpService","ax","axios","create","baseURL","timeout","headers","interceptors","request","use","config","token","JSON","parse","localStorage","getItem","Authorization","response","undefined","err","url","includes","Promise","reject","status","clear","window","location","Instance","UserService","get","username","password","post","stringify","data","setItem","PrivateRoute","component","rest","render","props","isLoggedIn","pathname","state","from","HomeView","gutter","span","value","FeedService","feed","ID","delete","Text","Typography","FeedView","loading","videoVisible","feeds","EventBus","subscribe","event","refresh","removeFeed","bind","this","getFeeds","then","setState","startFeed","Math","random","stopFeed","length","WrappedFeedForm","Form","name","FeedForm","map","index","color","site","cover","alt","src","bordered","actions","onClick","submitted","loginError","handleSubmit","e","preventDefault","validationError","form","getFieldValue","addFeed","publish","fieldsError","getFieldDecorator","getFieldsError","onSubmit","rules","required","message","addonBefore","placeholder","htmlType","disabled","Object","keys","some","field","DeviceService","DeviceView","device","getDevice","width","extra","fingerprint","model","license","registeredTo","Column","Table","UserListView","users","getUsers","dataSource","dataIndex","text","record","href","lastName","TabPane","Tabs","DeviceConfigView","deviceconfig","getDeviceConfig","tab","defaultActiveKey","onChange","onTabChange","history","createBrowserHistory","LoginView","push","WrappedLoginForm","LoginForm","login","catch","error","offset","prefix","withRouter","IncidentService","filter","incident","Panel","ColumnGroup","Collapse","ButtonGroup","Button","Group","IncidentListView","layout","incidents","page","pageSize","handleDone","archiveIncident","onFromDateChange","onFromTimeChange","onToDateChange","onToTimeChange","onPageChange","onPageSizeChange","getIncidents","videoid","ReactPlayer","canPlay","date","fromDate","format","time","fromTime","toDate","toTime","refreshNow","current","visible","onOk","onCancel","controls","header","minuteStep","secondStep","size","icon","changeLayout","renderGrid","renderTable","Total","description","Incidents","count","onShowSizeChange","showSizeChanger","defaultCurrent","total","event_type","event_date","event_start","hidden","event_end","event_duration","image_id","showVideo","video_id","pagination","showQuickJumper","dur","TriggerService","trigger","put","TriggerSet","days","onChange0","onChange1","onChange2","onChange3","onChange4","onChange5","onChange6","onChangeValue","saveTrigger","deleteTrigger","setName","changed","idx","TriggerDays","Start","End","new","createTrigger","i","Day","target","selected","marks","day","start","end","dlist","min","max","range","Option","Select","TriggerView","triggers","tsRef","React","createRef","handleChange","newTrigger","getTriggers","selectedt","NewTrigger","id","ChangeTrigger","selectedname","Name","selector","ref","AnprService","events","getEvents","Content","App","loggedIn","refreshMenu","sideBar","margin","minHeight","path","exact","AnprView","Boolean","hostname","match","Root","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","forEach","callback"],"mappings":"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","file":"static/js/main.f8b85db7.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Icon, Layout, Menu, } from \"antd\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst { Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nexport default class Sidebar extends Component {\r\n    render() {\r\n        return (\r\n            <Sider\r\n                breakpoint=\"lg\"\r\n                collapsedWidth=\"0\"\r\n                onBreakpoint={broken => {\r\n                    console.log(broken);\r\n                }}\r\n                onCollapse={(collapsed, type) => {\r\n                    console.log(collapsed, type);\r\n                }}\r\n            >\r\n                <div className=\"logo\"/>\r\n                <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n                    <Menu.Item key=\"0\">\r\n                        <Link to='/'><Icon type='home' /><span className='nav-text'>Home</span></Link>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"1\" className=\"sidebar-nav-link\">\r\n                        <Link to='/incidents'><Icon type='alert' /><span className='nav-text'>Incidents</span></Link>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"6\" className=\"sidebar-nav-link\">\r\n                        <Link to='/anpr'><Icon type='box-plot' /><span className='nav-text'>ANPR</span></Link>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"2\">\r\n                        <Link to='/feed'><Icon type='video-camera' /><span className='nav-text'>Feed</span></Link>\r\n                    </Menu.Item>\r\n                    <SubMenu key=\"admin\" title={<span><Icon type=\"deployment-unit\"/>Admin</span>}>\r\n                        <Menu.Item key=\"3\">\r\n                            <Link to='/user'><Icon type='user' /><span className='nav-text'>Users</span></Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"4\">\r\n                            <Link to='/device'><Icon type='laptop' /><span className='nav-text'>Device</span></Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"5\">\r\n                            <Link to='/trigger'><Icon type=\"clock-circle\" /><span className='nav-text'>Triggers</span></Link>\r\n                        </Menu.Item>\r\n                    </SubMenu>\r\n                </Menu>\r\n            </Sider>\r\n        );\r\n    }\r\n}","\r\nimport React, {Component} from 'react';\r\nimport {Layout} from \"antd\";\r\nconst {Header} = Layout;\r\n\r\nexport default class Headbar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Header style={{ background: '#fff', padding: 10 }} >&nbsp;</Header>\r\n        )\r\n    }\r\n}","\r\nimport React, {Component} from 'react';\r\nimport {Layout} from \"antd\";\r\nconst {Footer} = Layout;\r\n\r\nexport default class Headbar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Footer style={{ textAlign: 'center' }}>SynergyLabs © 2019</Footer>\r\n        )\r\n    }\r\n}","import axios from \"axios\";\r\n\r\nfunction forceLogout() {\r\n    localStorage.clear();\r\n    window.location = '/login';\r\n}\r\n\r\nclass HttpService {\r\n\r\n    static Instance() {\r\n\r\n        let ax = new axios.create({\r\n            baseURL: \"/\",\r\n            timeout: 5000,\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        ax.interceptors.request.use(config => {\r\n            let token = JSON.parse(localStorage.getItem('syntoken'));\r\n            if (token) {\r\n                config.headers.Authorization = \"Bearer \" + token.token\r\n            }\r\n            return config\r\n        });\r\n\r\n        axios.interceptors.response.use(undefined, err => {\r\n            if (err.response.config.url.includes('/login'))\r\n                return Promise.reject(err);\r\n\r\n            if (err.response.status === 403) return forceLogout();\r\n            if (err.response.status !== 401) return Promise.reject(err);\r\n        });\r\n\r\n        return ax;\r\n    }\r\n\r\n}\r\n//https://gist.github.com/alfonmga/96474f6adb6ed8dee8bc8bf8627c0ae1\r\nexport default HttpService.Instance()","\r\nimport axios from \"./axios\";\r\n\r\nclass UserService {\r\n\r\n    static Instance() {\r\n        return new UserService()\r\n    }\r\n\r\n    getUser() {\r\n        return axios.get('/api/user/');\r\n    }\r\n\r\n    getUsers() {\r\n        return axios.get('/api/users');\r\n    }\r\n\r\n    isLoggedIn() {\r\n        let token = JSON.parse(localStorage.getItem('syntoken'));\r\n        if (!token) {\r\n            console.log(\"cannot locate token, returning false\");\r\n            return false;\r\n        }\r\n        console.log(\"located token, returning true\");\r\n        return true\r\n    }\r\n\r\n    async login(username, password) {\r\n        let response = await axios.post('/login', JSON.stringify({ username, password }), {headers: {\r\n                'Content-Type': 'application/json',\r\n            }});\r\n        console.log(\"got this response\", response);\r\n        let token = response.data;\r\n        if (token) {\r\n            localStorage.setItem('syntoken', JSON.stringify(token));\r\n        }\r\n        return token;\r\n    }\r\n\r\n}\r\n\r\nexport default UserService.Instance()\r\n\r\n//TODO valiate token,\r\n// https://medium.com/@siddharthac6/json-web-token-jwt-the-right-way-of-implementing-with-node-js-65b8915d550e","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport UserService from \"../services/UserService\";\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={props => (\r\n        UserService.isLoggedIn()\r\n            ? <Component {...props} />\r\n            : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\r\n    )} />\r\n);\r\n\r\nexport default PrivateRoute","import React, {Component} from \"react\";\r\nimport {Col, Row, Statistic} from \"antd\";\r\n\r\nexport default class HomeView extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row gutter={16}>\r\n                    <Col span={12}>\r\n                        <Statistic title=\"Incidents (This Week)\" value={24} />\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Statistic title=\"Incidents (Last Week)\" value={34} />\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}","import axios from 'axios';\r\n\r\nclass FeedService {\r\n\r\n    static Instance() {\r\n        return new FeedService()\r\n    }\r\n\r\n    getFeeds() {\r\n        return axios.get('/api/feeds');\r\n    }\r\n\r\n    getFeed(feed) {\r\n        return axios.get('/api/feed/' + feed.ID);\r\n    }\r\n\r\n    addFeed(feed) {\r\n        return axios.post('/api/feed/', feed)\r\n    }\r\n\r\n    removeFeed(feed) {\r\n        return axios.delete('/api/feed/' + feed.ID);\r\n    }\r\n\r\n    startFeed(feed) {\r\n        return axios.get('/api/feed/' +feed.ID+ '/start');\r\n    }\r\n\r\n    stopFeed(feed) {\r\n        return axios.get('/api/feed/' +feed.ID+ '/stop');\r\n    }\r\n}\r\n\r\nexport default FeedService.Instance()\r\n","import React, {Component} from \"react\";\r\nimport {Button, Card, Col, Form, Input, Row, Tag, Typography} from \"antd\";\r\nimport FeedService from \"../services/FeedService\";\r\nimport {EventBus} from \"../components/event\";\r\nconst {Text} = Typography;\r\n\r\nexport default class FeedView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            videoVisible: false,\r\n            feeds: {},\r\n        };\r\n\r\n        EventBus.subscribe('feed-refresh', (event) => this.refresh())\r\n        this.removeFeed = this.removeFeed.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        FeedService.getFeeds().then(request => {\r\n            this.setState({\"feeds\": request.data, loading: false})\r\n        })\r\n    }\r\n\r\n    removeFeed(feed) {\r\n        FeedService.removeFeed(feed).then(() => {\r\n            this.refresh()\r\n        })\r\n    }\r\n\r\n    startFeed(feed) {\r\n        FeedService.startFeed(feed).then(() => {\r\n            //this should force re-render :)\r\n            this.setState({\"refresh_state\": Math.random()})\r\n        })\r\n    }\r\n\r\n    stopFeed(feed) {\r\n        FeedService.stopFeed(feed).then(() => {\r\n            //this should force re-render :)\r\n            this.setState({\"refresh_state\": Math.random()})\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        let feeds = this.state.feeds;\r\n\r\n        if (this.state.loading || !this.state.feeds || this.state.feeds.length === 0) {\r\n            feeds = []\r\n        }\r\n\r\n        const WrappedFeedForm = Form.create({name: 'feed_form'})(FeedForm);\r\n\r\n        return (\r\n            <Row gutter={16}>\r\n                {\r\n                    feeds.map((feed, index) =>\r\n\r\n                        <Col span={8} key={index}>\r\n\r\n                            <Card\r\n                                title={\r\n                                    <Tag color=\"#f50\">{feed.site}/{feed.location}/{feed.name}</Tag>\r\n                                }\r\n                                cover={<img alt=\"feedview\" src={\"/api/feed/\" + feed.ID+ \"/view\"}/>}\r\n                                bordered={true}\r\n                                actions={[\r\n                                    <Button onClick={() => {this.startFeed(feed)}}>Start</Button>,\r\n                                    <Button onClick={() => {this.stopFeed(feed)}}>Stop</Button>,\r\n                                    <Button onClick={() => {this.removeFeed(feed)}}>Delete</Button>\r\n                                ]}\r\n                            >\r\n\r\n                            </Card>\r\n                        </Col>\r\n                    )\r\n                }\r\n\r\n                <Col span={8} key={-1}>\r\n\r\n                    <Card bordered={true}>\r\n                        <WrappedFeedForm/>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nfunction hasErrors(fieldsError) {\r\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n}\r\n\r\nclass FeedForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            submitted: false,\r\n            loading: false,\r\n            loginError: '',\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    handleSubmit(e) {\r\n\r\n        e.preventDefault();\r\n\r\n        const form = this.props.form;\r\n        var feed = {};\r\n        feed.url = form.getFieldValue(\"url\");\r\n        feed.site = form.getFieldValue(\"site\");\r\n        feed.location = form.getFieldValue(\"location\");\r\n        feed.name = form.getFieldValue(\"name\");\r\n        let validationError;\r\n        if (!feed.url) {\r\n            validationError = \"Missing url\"\r\n        }\r\n\r\n        if (!feed.site) {\r\n            validationError = \"Missing site\"\r\n        }\r\n\r\n        if (!feed.location) {\r\n            validationError = \"Missing location\"\r\n        }\r\n\r\n        if (!feed.name) {\r\n            validationError = \"Missing name\"\r\n        }\r\n\r\n        if (validationError) {\r\n            this.setState({validationError: validationError});\r\n            return\r\n        }\r\n\r\n        console.log('saving feed', feed);\r\n        this.setState({submitted: true, loading: true});\r\n\r\n        FeedService.addFeed(feed).then(response => {\r\n            EventBus.publish('feed-refresh', {})\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const {getFieldDecorator, getFieldsError} = this.props.form;\r\n        const validationError = this.state.validationError;\r\n        return (\r\n            <Form onSubmit={this.handleSubmit}>\r\n                <Form.Item>\r\n                    {getFieldDecorator('url', {rules: [{required: true, message: 'enter feed url!'}],})(\r\n                        <Input addonBefore=\"Feed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" placeholder=\"rtsp://\"/>,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    {getFieldDecorator('site', {rules: [{required: true, message: 'enter site!'}],})(\r\n                        <Input addonBefore=\"Site&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"\r\n                               placeholder=\"Site (e.g. gurgaon)\"/>,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    {getFieldDecorator('location', {rules: [{required: true, message: 'enter location!'}],})(\r\n                        <Input addonBefore=\"Location\" placeholder=\"Location (e.g. 9th floor)\"/>,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    {getFieldDecorator('name', {rules: [{required: true, message: 'enter name!'}],})(\r\n                        <Input addonBefore=\"Name&nbsp;&nbsp;&nbsp;&nbsp;\" placeholder=\"Name (e.g. front gate )\"/>,\r\n                    )}\r\n                </Form.Item>\r\n                <Button htmlType=\"submit\" type=\"primary\" disabled={hasErrors(getFieldsError())}>Add</Button>\r\n                {validationError && <Text type=\"danger\">{validationError}</Text>}\r\n            </Form>\r\n        )\r\n    }\r\n}","\r\nimport axios from 'axios';\r\n\r\nclass DeviceService {\r\n\r\n    static Instance() {\r\n        return new DeviceService()\r\n    }\r\n\r\n    getDevice() {\r\n        return axios.get('/api/device');\r\n    }\r\n\r\n    getDeviceConfig() {\r\n        return axios.get('/api/device/config');\r\n    }\r\n\r\n}\r\n\r\nexport default DeviceService.Instance()","import React, {Component} from \"react\";\r\nimport {Card, Icon} from 'antd';\r\nimport DeviceService from \"../services/DeviceService\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default class DeviceView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {loading:true, device:{}}\r\n    }\r\n\r\n    componentDidMount() {\r\n        DeviceService.getDevice().then(request => {\r\n            this.setState({\"device\" : request.data, loading : false})\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let loading = this.state.loading;\r\n        let device = this.state.device;\r\n\r\n        if (loading) {\r\n            return (<div>Loading..</div>)\r\n        }\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Card title=\"Device details\" style={{width: 300}} extra={<Link to=\"/device/conf\"><Icon type=\"setting\" /></Link>}>\r\n                    <p>ID: {device.fingerprint}</p>\r\n                    <p>Name:{device.name}</p>\r\n                    <p>Model:{device.model}</p>\r\n                    <p>License:{device.license}</p>\r\n                    <p>Status: {device.status}</p>\r\n                    <p>RegisteredTo: {device.registeredTo}</p>\r\n\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport {Table, Divider} from 'antd';\r\nimport UserService from \"../services/UserService\";\r\nconst { Column} = Table;\r\nexport default class UserListView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {loading: true, users: []}\r\n    }\r\n\r\n    componentDidMount() {\r\n        UserService.getUsers().then(request => {\r\n            this.setState({\"users\": request.data, loading: false})\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Table dataSource={this.state.users} >\r\n                <Column title=\"Username\" dataIndex=\"username\" key=\"username\" render={(text, record) => (\r\n                    <span><a href={\"user/\" + record.ID}>{text}</a></span>\r\n                )}/>\r\n                <Column title=\"Email\" dataIndex=\"email\" key=\"email\" />\r\n                <Column title=\"Token\" dataIndex=\"token\" key=\"token\" />\r\n                <Column title=\"Action\" key=\"action\" render={(text, record) => (\r\n                        <span>\r\n                            <a>Edit {record.lastName}</a>\r\n                            <Divider type=\"vertical\" />\r\n                            <a>Delete</a>\r\n                        </span>\r\n                    )}\r\n                />\r\n            </Table>\r\n        )\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport DeviceService from \"../services/DeviceService\";\r\nimport { Tabs } from 'antd';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport default class DeviceConfigView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {loading:true, deviceconfig:{}}\r\n    }\r\n\r\n    componentDidMount() {\r\n        DeviceService.getDeviceConfig().then(request => {\r\n            this.setState({\"deviceconfig\" : request.data, loading : false})\r\n        })\r\n    }\r\n\r\n    onTabChange(tab) {\r\n        console.log(\"tab changed\", tab)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Tabs defaultActiveKey=\"1\" onChange={this.onTabChange}>\r\n                <TabPane tab=\"Feed\" key=\"common\">\r\n                    Feed details\r\n                </TabPane>\r\n                <TabPane tab=\"Basic Intrusion\" key=\"bi\">\r\n                    Basic Intrusion\r\n                </TabPane>\r\n                <TabPane tab=\"Advanced Intrusion\" key=\"ai\">\r\n                    Advanced Intrusion\r\n                </TabPane>\r\n            </Tabs>\r\n        )\r\n    }\r\n}","import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();","import React, {Component} from 'react';\r\nimport UserService from \"../services/UserService\";\r\nimport {EventBus} from \"../components/event\";\r\nimport {Button, Col, Form, Icon, Input, Row, Typography} from 'antd';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {history} from \"../helpers/history\";\r\n\r\nconst {Text} = Typography;\r\n\r\n\r\nclass LoginView extends Component {\r\n\r\n    componentDidMount() {\r\n        if (UserService.isLoggedIn()) {\r\n            history.push( \"/\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const WrappedLoginForm = Form.create({name: 'login_form'})(LoginForm);\r\n        return (\r\n            <WrappedLoginForm/>\r\n        )\r\n    }\r\n}\r\n\r\nclass LoginForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            submitted: false,\r\n            loading: false,\r\n            loginError: '',\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(e) {\r\n\r\n        e.preventDefault();\r\n\r\n        const form = this.props.form;\r\n        const username = form.getFieldValue(\"username\");\r\n        const password = form.getFieldValue(\"password\");\r\n        this.setState({submitted: true});\r\n\r\n        if (!(username && password)) {\r\n            return\r\n        }\r\n\r\n        this.setState({loading: true});\r\n        UserService.login(username, password)\r\n            .then(token => {\r\n                history.push( \"/\");\r\n                EventBus.publish('login-logout', {})\r\n            }).catch(error => {\r\n                this.setState({\r\n                    loginError: \"Something went wrong, please try again\",\r\n                    loading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    render() {\r\n\r\n        const {getFieldDecorator} = this.props.form;\r\n        const loginError = this.state.loginError;\r\n\r\n        return (\r\n            <Row>\r\n                <Col span={8} offset={8}><h4>Login</h4>\r\n                    <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                        <Form.Item>\r\n                            {getFieldDecorator('username', {\r\n                                rules: [{required: true, message: 'Please input your username!'}],\r\n                            })(\r\n                                <Input\r\n                                    prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}}/>}\r\n                                    placeholder=\"Username\"\r\n                                />,\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            {getFieldDecorator('password', {\r\n                                rules: [{required: true, message: 'Please input your Password!'}],\r\n                            })(\r\n                                <Input\r\n                                    prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                />,\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                                Log in\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                    {loginError && <Text type=\"danger\">{loginError}</Text>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(LoginView);\r\n","\r\nimport axios from \"./axios\";\r\n\r\nclass IncidentService {\r\n\r\n    static Instance() {\r\n        return new IncidentService()\r\n    }\r\n\r\n    getIncidents(filter) {\r\n        return axios.post('/api/incidents', filter);\r\n    }\r\n\r\n    archiveIncident(incident) {\r\n        return axios.delete('/api/incident/' + incident.ID);\r\n    }\r\n}\r\n\r\nexport default IncidentService.Instance()","import React, {Component} from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    Col,\r\n    Collapse,\r\n    DatePicker,\r\n    Divider,\r\n    Empty,\r\n    Icon,\r\n    Modal,\r\n    Pagination,\r\n    Row,\r\n    Table,\r\n    Tag,\r\n    TimePicker\r\n} from 'antd';\r\nimport IncidentService from \"../services/IncidentService\";\r\nimport ReactPlayer from \"react-player\";\r\nimport Moment from 'react-moment';\r\n\r\nconst {Column, ColumnGroup} = Table;\r\nconst {Panel} = Collapse;\r\nconst ButtonGroup = Button.Group;\r\n\r\n\r\nexport default class IncidentListView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            videoVisible: false,\r\n            layout: \"table\",\r\n            incidents: {},\r\n            filter: {\r\n                page: 1,\r\n                pageSize: 10\r\n            }\r\n        };\r\n        this.handleDone = this.handleDone.bind(this);\r\n        this.archiveIncident = this.archiveIncident.bind(this);\r\n        this.refresh = this.refresh.bind(this);\r\n        this.onFromDateChange = this.onFromDateChange.bind(this);\r\n        this.onFromTimeChange = this.onFromTimeChange.bind(this);\r\n\r\n        this.onToDateChange = this.onToDateChange.bind(this);\r\n        this.onToTimeChange = this.onToTimeChange.bind(this);\r\n        this.onPageChange = this.onPageChange.bind(this);\r\n        this.onPageSizeChange = this.onPageSizeChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        IncidentService.getIncidents(this.state.filter).then(request => {\r\n            this.setState({\"incidents\": request.data, loading: false})\r\n        })\r\n    }\r\n\r\n    //cant use refresh to read from state as state may not have been set\r\n    refreshNow(filter) {\r\n        IncidentService.getIncidents(filter).then(request => {\r\n            this.setState({\"incidents\": request.data, loading: false, filter: filter})\r\n        })\r\n    }\r\n\r\n    archiveIncident(incident) {\r\n        IncidentService.archiveIncident(incident).then(() => {\r\n            this.refresh()\r\n        })\r\n    }\r\n\r\n    changeLayout(layout) {\r\n        this.setState({\"layout\": layout});\r\n    }\r\n\r\n    showVideo(videoid) {\r\n\r\n        let cp = ReactPlayer.canPlay(\"/api/incident/video/\" + this.state.videoid + \"/video.mp4\");\r\n        this.setState({\r\n            videoVisible: true,\r\n            videoid: videoid\r\n        });\r\n    };\r\n\r\n    handleDone() {\r\n        this.setState({\r\n            videoVisible: false,\r\n            videoid: \"\"\r\n        });\r\n    };\r\n\r\n    onFromDateChange(date) {\r\n        let filter = this.state.filter;\r\n        filter.fromDate = date.format(\"YYYY-MM-DD\");\r\n        this.setState({filter: filter});\r\n    }\r\n\r\n    onFromTimeChange(time) {\r\n        let filter = this.state.filter;\r\n        filter.fromTime = time.format(\"HH:mm:ss\");\r\n        this.setState({filter: filter});\r\n    }\r\n\r\n    onToDateChange(date) {\r\n        let filter = this.state.filter;\r\n        filter.toDate = date.format(\"YYYY-MM-DD\");\r\n        this.setState({filter: filter});\r\n    }\r\n\r\n    onToTimeChange(time) {\r\n        let filter = this.state.filter;\r\n        filter.toTime = time.format(\"HH:mm:ss\");\r\n        this.setState({filter: filter});\r\n    }\r\n\r\n    onPageChange(page, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.page = page;\r\n        filter.pageSize = pageSize;\r\n        this.refreshNow(filter)\r\n    }\r\n\r\n    onPageSizeChange(current, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.pageSize = pageSize;\r\n        this.refreshNow(filter);\r\n    }\r\n\r\n    render() {\r\n\r\n        let layout = this.state.layout;\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Modal\r\n                    title=\"Video\"\r\n                    visible={this.state.videoVisible}\r\n                    onOk={this.handleDone}\r\n                    onCancel={this.handleDone}\r\n                >\r\n                    {this.state.videoVisible ? (<ReactPlayer controls={true}\r\n                                                             url={\"/api/incident/video/\" + this.state.videoid + \"/video.mp4\"}\r\n                                                             width=\"300\"/>) : (<div><Empty/></div>)}\r\n                </Modal>\r\n\r\n                <Collapse bordered={false} defaultActiveKey={['1', '2']}>\r\n                    <Panel header=\"Filter\" key=\"1\">\r\n                        <span>From: </span>\r\n                        <DatePicker onChange={this.onFromDateChange}/>&nbsp;&nbsp;\r\n                        <TimePicker minuteStep={15} secondStep={60} onChange={this.onFromTimeChange}/>&nbsp;&nbsp;\r\n                        <span>To: </span>\r\n                        <DatePicker onChange={this.onToDateChange}/>&nbsp;&nbsp;\r\n                        <TimePicker minuteStep={15} secondStep={60} onChange={this.onToTimeChange}/>&nbsp;&nbsp;\r\n\r\n                        <ButtonGroup>\r\n                            <Button type={layout === \"list\" ? \"primary\" : \"\"} size=\"small\" icon=\"unordered-list\"\r\n                                    onClick={() => {\r\n                                        this.changeLayout(\"list\")\r\n                                    }}/>\r\n                            <Button type={layout === \"table\" ? \"primary\" : \"\"} size=\"small\" icon=\"table\"\r\n                                    onClick={() => {\r\n                                        this.changeLayout(\"table\")\r\n                                    }}/>\r\n                        </ButtonGroup>&nbsp;&nbsp;\r\n                        <Button onClick={() => {\r\n                            this.refresh()\r\n                        }}><Icon type=\"reload\"/>Reload</Button>\r\n                    </Panel>\r\n                    <Panel header=\"Incidents\" key=\"2\">\r\n                        {layout === \"table\" ? (this.renderGrid()) : (this.renderTable())}\r\n                    </Panel>\r\n                </Collapse>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderGrid() {\r\n\r\n        if (this.state.loading || !this.state.incidents || this.state.incidents.Total === 0) {\r\n            return <Empty description={false}/>\r\n        }\r\n\r\n        let incidents = this.state.incidents.Incidents;\r\n        let count = this.state.incidents.Total;\r\n\r\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\r\n            <Row>\r\n                <Col>\r\n                    <Pagination onChange={this.onPageChange} onShowSizeChange={this.onPageSizeChange} showSizeChanger\r\n                                defaultCurrent={1} total={count}/>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n                {\r\n                    incidents.map((incident, index) =>\r\n                        <Col span={8} key={index}>\r\n                            <Card\r\n                                title={\r\n                                    <div>\r\n                                        <Tag color=\"#f50\">{incident.event_type}</Tag>\r\n                                        <Tag color=\"#2db7f5\">{incident.event_date}</Tag>\r\n                                        <Tag color=\"#87d068\"><span><Moment format=\"LTS\">{incident.event_start}</Moment></span><Icon\r\n                                            type=\"right\" hidden/><span hidden><Moment\r\n                                            format=\"LTS\">{incident.event_end}</Moment></span></Tag>\r\n                                        <Tag color=\"#108ee9\" hidden>{incident.event_duration}s</Tag>\r\n                                    </div>\r\n                                }\r\n                                bordered={true}\r\n                                cover={<img alt=\"incident image\"\r\n                                            src={\"/api/incident/image/\" + incident.image_id + \"/image.jpg\"}/>}\r\n                                actions={[\r\n                                    <Icon type=\"right\" key=\"play\" onClick={() => this.showVideo(incident.video_id)}/>,\r\n                                    <Icon type=\"edit\" key=\"edit\"/>,\r\n                                    <Icon type=\"delete\" key=\"delete\" onClick={() => this.archiveIncident(incident)}/>,\r\n                                ]}\r\n                            >\r\n\r\n                            </Card>\r\n                        </Col>\r\n                    )\r\n                }\r\n            </Row>\r\n        </div>\r\n    }\r\n\r\n    renderTable() {\r\n\r\n        if (this.state.loading || !this.state.incidents || this.state.incidents.Total === 0) {\r\n            return <Empty description={false}/>\r\n        }\r\n\r\n        let incidents = this.state.incidents.Incidents;\r\n        let count = this.state.incidents.Total;\r\n\r\n        const paginationOptions = {\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            onShowSizeChange: this.onPageSizeChange,\r\n            onChange: this.onPageChange,\r\n            total: count\r\n        };\r\n\r\n        const pagination = {\r\n            ...paginationOptions,\r\n            total: count,\r\n            current: this.state.filter.page,\r\n            pageSize: this.state.filter.pageSize\r\n        };\r\n\r\n        return (\r\n            <Table dataSource={incidents} pagination={pagination}>\r\n                <Column title=\"ID\" dataIndex=\"ID\" key=\"ID\"/>\r\n                <Column title=\"Type\" dataIndex=\"event_type\" key=\"event_type\"/>\r\n                <Column title=\"Date\" dataIndex=\"event_date\" key=\"event_date\"/>\r\n                <Column title=\"Time\" dataIndex=\"event_start\" key=\"event_start\"\r\n                        render={event_start => (<Moment format=\"LTS\">{event_start}</Moment>)}/>\r\n                <Column title=\"Duration\" dataIndex=\"event_duration\" key=\"event_duration\" render={dur => (<span>{dur}s</span>) }/>\r\n                <Column title=\"Time\" dataIndex=\"event_start\" key=\"event_start\" render={(text, incident) => (\r\n                    <span>\r\n                        <a onClick={() => this.showVideo(incident.video_id)}>Play</a>\r\n                        <Divider type=\"vertical\"/>\r\n                        <a onClick={() => this.archiveIncident(incident)}>Delete</a>\r\n                    </span>\r\n                )}/>\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n","\r\nimport axios from 'axios';\r\n\r\nclass TriggerService {\r\n\r\n    static Instance() {\r\n        return new TriggerService()\r\n    }\r\n\r\n    getTrigger() {\r\n        return axios.get('/api/trigger/');\r\n    }\r\n\r\n    getTriggers() {\r\n        return axios.get('/api/triggers');\r\n    }\r\n\r\n    createTrigger(trigger) {\r\n        return axios.post('/api/trigger/', trigger);\r\n    }\r\n\r\n    saveTrigger(trigger) {\r\n        return axios.put('/api/trigger/' + trigger.ID, trigger);\r\n    }\r\n\r\n    deleteTrigger(trigger) {\r\n        return axios.delete('/api/trigger/' + trigger.ID);\r\n    }\r\n}\r\n\r\nexport default TriggerService.Instance()","import React, {Component} from \"react\";\r\nimport {Slider, Button, Input} from \"antd\";\r\nimport TriggerService from \"../services/TriggerService\";\r\n\r\nexport default class TriggerSet extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\r\n        this.onChange0 = this.onChange0.bind(this);\r\n        this.onChange1 = this.onChange1.bind(this);\r\n        this.onChange2 = this.onChange2.bind(this);\r\n        this.onChange3 = this.onChange3.bind(this);\r\n        this.onChange4 = this.onChange4.bind(this);\r\n        this.onChange5 = this.onChange5.bind(this);\r\n        this.onChange6 = this.onChange6.bind(this);\r\n        this.onChangeValue = this.onChangeValue.bind(this);\r\n        this.saveTrigger = this.saveTrigger.bind(this);\r\n        this.deleteTrigger = this.deleteTrigger.bind(this);\r\n        this.setName = this.setName.bind(this);\r\n\r\n        this.state = {\r\n            trigger : this.props.trigger,\r\n            changed : false\r\n        }\r\n    }\r\n\r\n    onChange0(value) { this.onChangeValue(0, value)    }\r\n    onChange1(value) { this.onChangeValue(1, value)    }\r\n    onChange2(value) { this.onChangeValue(2, value)    }\r\n    onChange3(value) { this.onChangeValue(3, value)    }\r\n    onChange4(value) { this.onChangeValue(4, value)    }\r\n    onChange5(value) { this.onChangeValue(5, value)    }\r\n    onChange6(value) { this.onChangeValue(6, value)    }\r\n\r\n    onChangeValue(idx, value) {\r\n        let trigger = this.state.trigger;\r\n        trigger.TriggerDays[idx].Start = value[0];\r\n        trigger.TriggerDays[idx].End = value[1];\r\n        this.setState({trigger:trigger, changed: true})\r\n    }\r\n\r\n    saveTrigger() {\r\n\r\n        if (this.state.trigger.new) {\r\n            TriggerService.createTrigger(this.state.trigger)\r\n        } else {\r\n            TriggerService.saveTrigger(this.state.trigger)\r\n        }\r\n\r\n    }\r\n\r\n    NewTrigger() {\r\n        let trigger = {name:\"New\", TriggerDays: [], new:true};\r\n        for (let i=0;i<7;i++) {\r\n            trigger.TriggerDays.push({\r\n                Start:0,\r\n                End:24,\r\n                Day:i,\r\n            })\r\n        }\r\n        this.setState({trigger:trigger, changed: true})\r\n    }\r\n\r\n    setName(e, value) {\r\n        let trigger = this.state.trigger;\r\n        trigger.name = e.target.value;\r\n        this.setState({trigger:trigger, changed: true});\r\n    }\r\n\r\n    deleteTrigger() {\r\n        TriggerService.deleteTrigger(this.state.trigger)\r\n    }\r\n\r\n    ChangeTrigger(trigger) {\r\n        this.setState({trigger:trigger, changed: false})\r\n    }\r\n\r\n    render() {\r\n        let selected = this.state.trigger;\r\n        let changed = this.state.changed;\r\n\r\n        if (!selected) return (<div>Waiting..</div>);\r\n        let marks = {};\r\n        for (let i = 12; i <= 24; i++) {\r\n            let j = i - 12;\r\n            marks[j] = i + ':00'\r\n        }\r\n\r\n        for (let i = 0; i <= 12; i++) {\r\n            let j = i + 12;\r\n            marks[j] = (i < 10 ? '0' : '') + i + ':00'\r\n        }\r\n\r\n\r\n        selected.TriggerDays.map((day, idx) => {\r\n            let start = day.Start;\r\n            let end = day.End;\r\n            if (start > end) {\r\n                day.Start = start - 12;\r\n                day.End = end + 12\r\n            }\r\n        });\r\n\r\n        let dlist = selected.TriggerDays;\r\n\r\n        return (\r\n            <div>\r\n                {selected.new ? (<Input placeholder=\"Name\" onChange={this.setName}/>) : (<span>{selected.ID} - {selected.name}</span>)}\r\n                <div>\r\n                    <span>{this.days[dlist[0].Day]}</span>\r\n                    <Slider min={0} max={24} range marks={marks} value={[dlist[0].Start, dlist[0].End]} onChange={this.onChange0}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <span>{this.days[dlist[1].Day]}</span>\r\n                    <Slider min={0} max={24} range marks={marks} value={[dlist[1].Start, dlist[1].End]} onChange={this.onChange1}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <span>{this.days[dlist[2].Day]}</span>\r\n                    <Slider min={0} max={24} range marks={marks} value={[dlist[2].Start, dlist[2].End]} onChange={this.onChange2}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <span>{this.days[dlist[3].Day]}</span>\r\n                    <Slider min={0} max={24} range marks={marks} value={[dlist[3].Start, dlist[3].End]} onChange={this.onChange3}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <span>{this.days[dlist[4].Day]}</span>\r\n                    <Slider min={0} max={24} range marks={marks} value={[dlist[4].Start, dlist[4].End]} onChange={this.onChange4}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <span>{this.days[dlist[5].Day]}</span>\r\n                    <Slider min={0} max={24} range marks={marks} value={[dlist[5].Start, dlist[5].End]} onChange={this.onChange5}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <span>{this.days[dlist[6].Day]}</span>\r\n                    <Slider min={0} max={24} range marks={marks} value={[dlist[6].Start, dlist[6].End]} onChange={this.onChange6}/>\r\n                </div>\r\n\r\n                <Button type=\"primary\" disabled={!changed} onClick={this.saveTrigger}>Save</Button>\r\n                <Button type=\"link\" disabled={changed} onClick={this.deleteTrigger}>Delete</Button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React, {Component} from \"react\";\r\nimport {Select, Button} from 'antd';\r\nimport TriggerService from \"../services/TriggerService\";\r\nimport TriggerSet from \"../components/TriggerSet\";\r\n\r\nconst {Option} = Select;\r\nexport default class TriggerView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            triggers: []\r\n        };\r\n\r\n        this.tsRef = React.createRef();\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.newTrigger = this.newTrigger.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        TriggerService.getTriggers().then(request => {\r\n            this.setState({\r\n                triggers: request.data,\r\n                selected: request.data[0].ID,\r\n                selectedt: request.data[0],\r\n                loading: false\r\n            })\r\n        });\r\n    }\r\n\r\n    newTrigger() {\r\n        this.tsRef.current.NewTrigger();\r\n    }\r\n\r\n    handleChange(id) {\r\n\r\n        console.log(\"changing to ...\", id);\r\n\r\n        for (let i = 0; i < this.state.triggers.length; i++) {\r\n            console.log(\"checking:\", this.state.triggers[i].ID);\r\n            if (id == this.state.triggers[i].ID) {\r\n                console.log(\"selected:\", id);\r\n                this.tsRef.current.ChangeTrigger(this.state.triggers[i]);\r\n                this.setState({selected: id, selectedt: this.state.triggers[i]});\r\n                return\r\n            }\r\n        }\r\n\r\n        console.log(\"cant select:(\")\r\n    }\r\n\r\n    render() {\r\n\r\n        let selected = this.state.selected;\r\n        let selectedt = this.state.selectedt;\r\n        let triggers = this.state.triggers;\r\n\r\n        if (this.state.loading) {\r\n            triggers = [];\r\n        }\r\n\r\n        let selectedname = \"\";\r\n        if (selectedt) {\r\n            selectedname = selectedt.Name\r\n        }\r\n\r\n        console.log(\"SN\", selectedname, selected, selectedt);\r\n        let selector = (\r\n\r\n            <div>\r\n                <Select style={{width: 120}} onChange={this.handleChange}>\r\n                    {\r\n                        triggers.map((trigger, index) =>\r\n                            <Option key={trigger.ID}>{trigger.name}</Option>\r\n                        )\r\n                    }\r\n\r\n                </Select>\r\n                &nbsp;\r\n                <Button type=\"primary\" onClick={this.newTrigger}>New</Button>\r\n            </div>\r\n        );\r\n\r\n        if (selectedt) {\r\n            return (\r\n                <div>\r\n                    {selector}\r\n                    <TriggerSet trigger={selectedt} ref={this.tsRef}/>\r\n                </div>\r\n\r\n            )\r\n        }\r\n\r\n        return (\r\n            selector\r\n        )\r\n    }\r\n}","\r\nimport React, {Component} from \"react\";\r\nimport {Button,  Card, DatePicker, Icon, TimePicker} from 'antd';\r\nimport DeviceService from \"../services/DeviceService\";\r\nimport {Link} from \"react-router-dom\";\r\nconst ButtonGroup = Button.Group;\r\n\r\nexport default class DeviceView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            layout: \"table\",\r\n            filter: {\r\n                page: 1,\r\n                pageSize: 10\r\n            }\r\n        };\r\n        this.onFromDateChange = this.onFromDateChange.bind(this);\r\n        this.onFromTimeChange = this.onFromTimeChange.bind(this);\r\n        this.onToDateChange = this.onToDateChange.bind(this);\r\n        this.onToTimeChange = this.onToTimeChange.bind(this);\r\n        this.onPageChange = this.onPageChange.bind(this);\r\n        this.onPageSizeChange = this.onPageSizeChange.bind(this);\r\n    }\r\n\r\n    onPageChange(page, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.page = page;\r\n        filter.pageSize = pageSize;\r\n        this.refreshNow(filter)\r\n    }\r\n\r\n    onPageSizeChange(current, pageSize) {\r\n        let filter = this.state.filter;\r\n        filter.pageSize = pageSize;\r\n        this.refreshNow(filter);\r\n    }\r\n\r\n    changeLayout(layout) {\r\n        this.setState({\"layout\": layout});\r\n    }\r\n\r\n    onFromDateChange(date) {\r\n        let filter = this.state.filter;\r\n        filter.fromDate = date.format(\"YYYY-MM-DD\");\r\n        this.setState({filter: filter});\r\n    }\r\n\r\n    onFromTimeChange(time) {\r\n        let filter = this.state.filter;\r\n        filter.fromTime = time.format(\"HH:mm:ss\");\r\n        this.setState({filter: filter});\r\n    }\r\n\r\n    onToDateChange(date) {\r\n        let filter = this.state.filter;\r\n        filter.toDate = date.format(\"YYYY-MM-DD\");\r\n        this.setState({filter: filter});\r\n    }\r\n\r\n    onToTimeChange(time) {\r\n        let filter = this.state.filter;\r\n        filter.toTime = time.format(\"HH:mm:ss\");\r\n        this.setState({filter: filter});\r\n    }\r\n\r\n    render() {\r\n\r\n        let layout = this.state.layout;\r\n\r\n        return (\r\n            <div>\r\n                <span>From: </span>\r\n                <DatePicker onChange={this.onFromDateChange}/>&nbsp;&nbsp;\r\n                <TimePicker minuteStep={15} secondStep={60} onChange={this.onFromTimeChange}/>&nbsp;&nbsp;\r\n                <span>To: </span>\r\n                <DatePicker onChange={this.onToDateChange}/>&nbsp;&nbsp;\r\n                <TimePicker minuteStep={15} secondStep={60} onChange={this.onToTimeChange}/>&nbsp;&nbsp;\r\n\r\n                <ButtonGroup>\r\n                    <Button type={layout === \"list\" ? \"primary\" : \"\"} size=\"small\" icon=\"unordered-list\"\r\n                            onClick={() => {\r\n                                this.changeLayout(\"list\")\r\n                            }}/>\r\n                    <Button type={layout === \"table\" ? \"primary\" : \"\"} size=\"small\" icon=\"table\"\r\n                            onClick={() => {\r\n                                this.changeLayout(\"table\")\r\n                            }}/>\r\n                </ButtonGroup>&nbsp;&nbsp;\r\n                <Button onClick={() => {\r\n                    this.refresh()\r\n                }}><Icon type=\"reload\"/>Reload</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","\r\nimport axios from \"./axios\";\r\n\r\nclass AnprService {\r\n\r\n    static Instance() {\r\n        return new AnprService()\r\n    }\r\n\r\n    getEvents() {\r\n        return axios.get('/api/anpr/events');\r\n    }\r\n}\r\n\r\nexport default AnprService.Instance()","import React, {Component} from \"react\";\r\nimport {\r\n    Card,\r\n    Col,\r\n    Collapse,\r\n    Divider,\r\n    Empty,\r\n    Icon,\r\n    Pagination,\r\n    Row,\r\n    Table,\r\n    Tag,\r\n} from 'antd';\r\nimport GenericFilter from \"../components/GenericFilter\";\r\nimport Moment from \"react-moment\";\r\nimport AnprService from \"../services/AnprService\";\r\n\r\nconst {Column} = Table;\r\nconst {Panel} = Collapse;\r\n\r\n\r\nexport default class DeviceView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            layout: \"table\",\r\n            events: {},\r\n        };\r\n\r\n        this.refresh = this.refresh.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        AnprService.getEvents(this.state.filter).then(request => {\r\n            this.setState({\"events\": request.data, loading: false})\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        let layout = this.state.layout;\r\n\r\n        return (<div>ANPR\r\n            <Collapse bordered={false} defaultActiveKey={['1', '2']}>\r\n                <Panel header=\"Filter\" key=\"1\">\r\n                    <GenericFilter/>\r\n                </Panel>\r\n                <Panel header=\"Events\" key=\"2\">\r\n                    {layout === \"table\" ? (this.renderGrid()) : (this.renderTable())}\r\n                </Panel>\r\n            </Collapse>\r\n        </div>)\r\n    }\r\n\r\n    renderGrid() {\r\n\r\n        if (this.state.loading || !this.state.incidents || this.state.incidents.Total === 0) {\r\n            return <Empty description={false}/>\r\n        }\r\n\r\n        let incidents = this.state.incidents.Incidents;\r\n        let count = this.state.incidents.Total;\r\n\r\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\r\n            <Row>\r\n                <Col>\r\n                    <Pagination onChange={this.onPageChange} onShowSizeChange={this.onPageSizeChange} showSizeChanger\r\n                                defaultCurrent={1} total={count}/>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n                {\r\n                    incidents.map((incident, index) =>\r\n                        <Col span={8} key={index}>\r\n                            <Card\r\n                                title={\r\n                                    <div>\r\n                                        <Tag color=\"#f50\">{incident.event_type}</Tag>\r\n                                        <Tag color=\"#2db7f5\">{incident.event_date}</Tag>\r\n                                        <Tag color=\"#87d068\"><span><Moment format=\"LTS\">{incident.event_start}</Moment></span><Icon\r\n                                            type=\"right\" hidden/><span hidden><Moment\r\n                                            format=\"LTS\">{incident.event_end}</Moment></span></Tag>\r\n                                        <Tag color=\"#108ee9\" hidden>{incident.event_duration}s</Tag>\r\n                                    </div>\r\n                                }\r\n                                bordered={true}\r\n                                cover={<img alt=\"incident\"\r\n                                            src={\"/api/incident/image/\" + incident.image_id + \"/image.jpg\"}/>}\r\n                                actions={[\r\n                                    <Icon type=\"right\" key=\"play\" onClick={() => this.showVideo(incident.video_id)}/>,\r\n                                    <Icon type=\"edit\" key=\"edit\"/>,\r\n                                    <Icon type=\"delete\" key=\"delete\" onClick={() => this.archiveIncident(incident)}/>,\r\n                                ]}\r\n                            >\r\n\r\n                            </Card>\r\n                        </Col>\r\n                    )\r\n                }\r\n            </Row>\r\n        </div>\r\n    }\r\n\r\n    renderTable() {\r\n\r\n        if (this.state.loading || !this.state.events || this.state.events.Total === 0) {\r\n            return <Empty description={false}/>\r\n        }\r\n\r\n        let incidents = this.state.incidents.events;\r\n        let count = this.state.incidents.Total;\r\n\r\n        const paginationOptions = {\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            onShowSizeChange: this.onPageSizeChange,\r\n            onChange: this.onPageChange,\r\n            total: count\r\n        };\r\n\r\n        const pagination = {\r\n            ...paginationOptions,\r\n            total: count,\r\n            current: this.state.filter.page,\r\n            pageSize: this.state.filter.pageSize\r\n        };\r\n\r\n        return (\r\n            <Table dataSource={incidents} pagination={pagination}>\r\n                <Column title=\"ID\" dataIndex=\"ID\" key=\"ID\"/>\r\n                <Column title=\"Type\" dataIndex=\"event_type\" key=\"event_type\"/>\r\n                <Column title=\"Date\" dataIndex=\"event_date\" key=\"event_date\"/>\r\n                <Column title=\"Time\" dataIndex=\"event_start\" key=\"event_start\"\r\n                        render={event_start => (<Moment format=\"LTS\">{event_start}</Moment>)}/>\r\n                <Column title=\"Duration\" dataIndex=\"event_duration\" key=\"event_duration\" render={dur => (<span>{dur}s</span>) }/>\r\n                <Column title=\"Time\" dataIndex=\"event_start\" key=\"event_start\" render={(text, incident) => (\r\n                    <span>\r\n                        <a onClick={() => this.showVideo(incident.video_id)}>Play</a>\r\n                        <Divider type=\"vertical\"/>\r\n                        <a onClick={() => this.archiveIncident(incident)}>Delete</a>\r\n                    </span>\r\n                )}/>\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport './App.css';\r\nimport {Layout} from 'antd';\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport Headbar from \"./components/Headbar\";\r\nimport Footerbar from \"./components/Footerbar\";\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\nimport HomeView from \"./views/HomeView\";\r\nimport FeedView from \"./views/FeedView\";\r\nimport {Route} from \"react-router-dom\";\r\nimport DeviceView from \"./views/DeviceView\";\r\nimport UserListView from \"./views/UserListView\";\r\nimport DeviceConfigView from \"./views/DeviceConfigView\";\r\n\r\nimport UserService from \"./services/UserService\";\r\nimport {EventBus} from \"./components/event\"\r\nimport LoginView from \"./views/LoginView\";\r\nimport IncidentListView from \"./views/IncidentListView\";\r\nimport TriggerView from \"./views/TriggerView\";\r\nimport AnprView from \"./views/AnprView\";\r\nconst {Content} = Layout;\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {loggedIn: false};\r\n\r\n        EventBus.subscribe('login-logout', (event) => this.refreshMenu(event))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshMenu()\r\n    }\r\n\r\n    refreshMenu() {\r\n        this.setState({loggedIn: UserService.isLoggedIn()});\r\n    }\r\n\r\n    render() {\r\n\r\n        const isLoggedIn = this.state.loggedIn;\r\n\r\n        const sideBar = isLoggedIn ? <Sidebar/> : null;\r\n        const header = isLoggedIn ? <Headbar isLoggedIn={isLoggedIn}/>: null;\r\n\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Layout>\r\n                    {sideBar}\r\n                    <Layout>\r\n                        {header}\r\n                        <Content style={{ margin: '24px 16px 0' }}>\r\n                            <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\r\n                                <Route path='/login' exact={true} component={LoginView}/>\r\n                                <PrivateRoute path='/' exact={true} component={HomeView}/>\r\n                                <PrivateRoute path='/incidents' exact={true} component={IncidentListView}/>\r\n                                <PrivateRoute path='/anpr' exact={true} component={AnprView}/>\r\n                                <PrivateRoute path='/user' exact={true} component={UserListView}/>\r\n                                <PrivateRoute path='/feed' exact={true} component={FeedView}/>\r\n                                <PrivateRoute path='/trigger' exact={true} component={TriggerView}/>\r\n                                <PrivateRoute path='/device' exact={true} component={DeviceView}/>\r\n                                <PrivateRoute path='/device/conf' exact={true} component={DeviceConfigView}/>\r\n                            </div>\r\n                        </Content>\r\n                        <Footerbar/>\r\n                    </Layout>\r\n                </Layout>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter as Router, Switch} from 'react-router-dom';\r\n\r\nclass Root extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                    <Switch>\r\n                        <App/>\r\n                    </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(<Root/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","const EventBus  = {\r\n    events : {},\r\n    publish: function (event, data) {\r\n        if (!this.events[event]) return;\r\n        this.events[event].forEach(callback => callback(data))\r\n    },\r\n    subscribe: function (event, callback) {\r\n        if (!this.events[event]) this.events[event] = [];\r\n        this.events[event].push(callback)\r\n    }\r\n};\r\n\r\nmodule.exports = {EventBus};"],"sourceRoot":""}